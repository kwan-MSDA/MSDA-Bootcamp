[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MSDA Bootcamp 2025",
    "section": "",
    "text": "This course covers essential mathematical foundations for data analytics, including Calculus and Linear Algebra. Explore the materials below to get started."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "MSDA Bootcamp 2025",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\nDate\nTime\nTopic\n\n\n\n\nAugust 26, 2025\n09:30 - 12:20\nOverview and Review of Calculus\n\n\nAugust 26, 2025\n14:00 - 16:50\nReview of Linear Algebra\n\n\nAugust 27, 2025\n14:00 - 16:50\nIntroduction to R (and RStudio)\n\n\nAugust 28, 2025\n14:00 - 16:50\nData Visualization with ggplot2\n\n\nAugust 29, 2025\n09:30 - 12:20\nData Wrangling with tidyverse\n\n\nAugust 29, 2025\n14:00 - 16:50\nElements of Probability and Statistics"
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "MSDA Bootcamp Notes",
    "section": "",
    "text": "Slides\n\n\n\n\nCalculus\nLinear Algebra\nIntroduction to R\nData Visualization\nData Wrangling\nProbability and Statistics"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#outline",
    "href": "Maths - Calculus_slimversion.html#outline",
    "title": "Maths - Calculus",
    "section": "Outline",
    "text": "Outline\n\nFunctions\nLimits\nDerivatives\nOptimization\nHigher-order derivatives\nSome common rules\nPartial derivatives\nIntegrals\nConstraint optimization"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#functions",
    "href": "Maths - Calculus_slimversion.html#functions",
    "title": "Maths - Calculus",
    "section": "Functions",
    "text": "Functions\n\nWhat is a function?\n\ndomain\nrange\nmapping\n\nWhat is not a function?"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#limits",
    "href": "Maths - Calculus_slimversion.html#limits",
    "title": "Maths - Calculus",
    "section": "Limits",
    "text": "Limits\n\nWhat is a limit?\n\nidea of a slope\n\nDoes it always exist?\nIs it unique?"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#derivatives",
    "href": "Maths - Calculus_slimversion.html#derivatives",
    "title": "Maths - Calculus",
    "section": "Derivatives",
    "text": "Derivatives\n\nWhat is Derivative?\n\nslope of a function\nrate of change\n\nwhy learning it?\n\noptimization\neconomics\nstatistics\nmachine learning\ndeep learning\n\nreminder about notation\n\n\\(\\frac{df(x)}{dx}\\)\n\\(\\frac{df}{dx}\\)\n\\(f'(x)\\)\n\\(\\frac{d}{dx}f(x)\\)\n\\(\\frac{d}{dx}f\\)"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#optimization",
    "href": "Maths - Calculus_slimversion.html#optimization",
    "title": "Maths - Calculus",
    "section": "Optimization",
    "text": "Optimization\n\nHow to find the maximum or minimum of a function?\n\nlet us think about a quadratic function, \\(y=ax^2+bx+c\\)\n\n\n\n\nHow to find out the maximum or minimum of a function?\n\nfirst-order condition\ncritical points"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#higher-order-derviatives",
    "href": "Maths - Calculus_slimversion.html#higher-order-derviatives",
    "title": "Maths - Calculus",
    "section": "Higher-order derviatives",
    "text": "Higher-order derviatives\n\nsecond-order derivative\n\nconcave\nconvex\ninflection point\n\nthird-order derivative\nn-th order derivative\nlocal vs global maximum/minimum\n\n\n\nOptimizing functions. Taking the first derivative and setting it equal to 0 gives us either a minimum or maximum. The second derivative allows us to discern between the two.\nhigher-order derivatives can be used to construct useful approximations (i.e. Taylor’s approximation) to complex functions that are important in understanding the properties of various statistical estimators."
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#some-common-rules-of-derivatives",
    "href": "Maths - Calculus_slimversion.html#some-common-rules-of-derivatives",
    "title": "Maths - Calculus",
    "section": "Some common rules of derivatives",
    "text": "Some common rules of derivatives\n\nHow to calculate Derivative?\n\npower rule\n\n\\(\\frac{dx^n}{dx}=nx^{n-1}\\)\n\nproduct rule\n\n\\(\\frac{d}{dx}f(x)g(x)=f'(x)g(x) +f(x)g'(x)\\)\n\nquotient rule\n\n\\(\\frac{d}{dx}\\frac{f(x)}{g(x)}=\\frac{f'(x)g(x)-f(x)g'(x)}{(g(x))^2}\\)\n\nchain rule\n\n\\(\\frac{d}{dx}f(g(x))=f'(g(x))g'(x)\\)\n\nspecial rules for logs and exponents\n\n\\(\\frac{d}{dx}\\ln(x)=\\frac{1}{x}\\)\n\\(\\frac{d}{dx}e^{x}=e^{x}\\)\n\n\n\n\n\n\\(\\frac{d}{dx}\\ln(f(x))=\\frac{f'(x)}{f(x)}\\)\n\\(\\frac{d}{dx}e^{f(x)}=f'(x)e^{f(x)}\\)"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#exercises",
    "href": "Maths - Calculus_slimversion.html#exercises",
    "title": "Maths - Calculus",
    "section": "Exercises:",
    "text": "Exercises:\n\n\\(\\frac{d}{dx}(6x^3+5)\\)\n\\(\\frac{d}{dx}\\sqrt{(5x^3+3x+5)}\\)\nlet \\(h(x)=2x+3; g(x)=5x^2+3x\\), let \\(f(x)=h(x)*g(x)\\), \\(\\frac{df(x)}{dx}\\)\nlet \\(p(x)=\\frac{h(x)}{g(x)}\\), \\(\\frac{dp(x)}{dx}\\)\n\\(\\frac{d(g(h(x)))}{dx}\\)\n\\(\\frac{d}{dx}\\ln(x^6+8)\\)\n\\(\\frac{d}{dx}e^{6x+3}\\)\n\\(\\frac{d}{dx}x^3e^{x}\\)"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#partial-derviatives",
    "href": "Maths - Calculus_slimversion.html#partial-derviatives",
    "title": "Maths - Calculus",
    "section": "Partial derviatives",
    "text": "Partial derviatives\n\nWhat is a partial derivative?\n\nLet \\(z=f(x,y)\\)\n\\(\\frac{\\partial f}{\\partial x}\\)\n\\(\\frac{\\partial f}{\\partial y}\\)\n\nExercise:\n\nlet \\(f(x,y)=x^2 y^3+3x+2y\\)\nfind \\(\\frac{\\partial f}{\\partial x}\\) and \\(\\frac{\\partial f}{\\partial y}\\)"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#integrals",
    "href": "Maths - Calculus_slimversion.html#integrals",
    "title": "Maths - Calculus",
    "section": "Integrals",
    "text": "Integrals\n\nWhat is an integral?\n\narea under the curve\nanti-derivative\n\nNotation\n\n\\(\\int^b_a f(x)dx\\)\n\\(\\int_X f(x)dx\\)\n\nWe are most interested in the concept rather than actual (hand) calculation of the integrals"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#constraint-optimization",
    "href": "Maths - Calculus_slimversion.html#constraint-optimization",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nWhat is constraint optimization?\n\noptimization with constraints\nLagrange multiplier\n\nThe idea is to optimize a function subject to some constraints\nThe problem can be stated as:\n\nmaximize \\(f(x,y)\\) subject to \\(g(x,y)=0\\)\nminimize \\(f(x,y)\\) subject to \\(g(x,y)=0\\)"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#constraint-optimization-1",
    "href": "Maths - Calculus_slimversion.html#constraint-optimization-1",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nlet us learn some economics\nin economics, a consumer faces the problem of maximizing her utility subject to the income constraint:\n\n\n\\[\n\\max_{x_1,x_2} u(x_1,x_2) \\quad s.t. \\; p_1x_1 + p_2x_2=y\n\\]\n\nwe can visualize and “solve” the problem using graph"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#constraint-optimization-2",
    "href": "Maths - Calculus_slimversion.html#constraint-optimization-2",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe optimal solution is at the point where the budget line is tangent to the indifference curve\n\n\n\\[\n\\frac{MU_1}{MU_2}=\\frac{p_1}{p_2}\n\\]\n\\(\\quad\\) where \\(MU_1\\) and \\(MU_2\\) are the marginal utilities of good 1 and good 2 respectively\n\nwe can solve this problem using the “identity”\n\n\n\n\\[\nu(x_1, x^U_2(x_1))=\\bar{u}\n\\]\n\nwe need to solve two equations simultaneously"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#constraint-optimization-3",
    "href": "Maths - Calculus_slimversion.html#constraint-optimization-3",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe Lagrange multiplier is a method to solve the optimization problem with constraints\nthe Lagrange function is defined as:\n\n\n\\[\nL(x_1,x_2,\\lambda)=u(x_1,x_2)+\\lambda(y-(p_1x_1+p_2x_2))\n\\]\n\nthe first-order conditions are\n\n\n\n\\[\n\\begin{align*}\n\\frac{\\partial u}{\\partial x_1} - \\lambda p_1 &=0 \\\\\n\\frac{\\partial u}{\\partial x_2} - \\lambda p_2 &=0 \\\\\ny-(p_1x_1+p_2x_2) &=0\n\\end{align*}\n\\]"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#constraint-optimization-4",
    "href": "Maths - Calculus_slimversion.html#constraint-optimization-4",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe Lagrange multiplier could be interpreted as the “marginal utility of income” in our example\nin economics, the Lagrange multiplier could be interpreted as the “shadow price” of the constraint\n\ne.g. the Lagrange multiplier could be interpreted as the “marginal cost” in production optimization\n\nReminder: the Lagrange multiplier could be zero, positive or negative\nthe Lagrange multiplier could be used in very general optimization problems\n\n\n\\[\n\\max_{x_1, \\dots, x_n} f(x_1,\\dots, x_n) \\quad s.t. \\; g_i(x_1,\\dots, x_n)=c_i, \\quad i=1,\\dots,m\n\\]"
  },
  {
    "objectID": "Maths - Calculus_slimversion.html#references",
    "href": "Maths - Calculus_slimversion.html#references",
    "title": "Maths - Calculus",
    "section": "References",
    "text": "References\n\n\nChiang, Alpha, Chung-i, and Kevin. Wainwright. 2005. Fundamental Methods of Mathematical Economics. 4th ed. / [rev. by] Kevin Wainwright. New York: McGraw-Hill.\n\n\nSimon, Carl P., and Lawrence. Blume. 1994. Mathematics for Economists. 1st ed. New York ; W.W. Norton."
  },
  {
    "objectID": "Calculus_slim.html",
    "href": "Calculus_slim.html",
    "title": "MSDA Bootcamp Notes",
    "section": "",
    "text": "Slides\n\n\n\n\nCalculus\nLinear Algebra"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#outline",
    "href": "Linear_Algebra_slimversion.html#outline",
    "title": "Linear Algebra",
    "section": "Outline",
    "text": "Outline\n\nVectors\nMatrix operations\nLinear Transformation\nSystem of Linear Equations\nVector Spaces\nEigenvalues and Eigenvectors\nApplications for calculus"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#vectors",
    "href": "Linear_Algebra_slimversion.html#vectors",
    "title": "Linear Algebra",
    "section": "Vectors",
    "text": "Vectors\n\nA vector of length \\(n\\) is just a sequence of \\(n\\) numbers\n\n\\(x=(x_1, \\ldots, x_n)\\) or\n\\(x=\\begin{bmatrix}x_1, \\ldots, x_n\\end{bmatrix}\\)\n\nvectors in 2-D space"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#vectors-1",
    "href": "Linear_Algebra_slimversion.html#vectors-1",
    "title": "Linear Algebra",
    "section": "Vectors",
    "text": "Vectors\n\nrow vector\n\n\n\\[\nu=\\begin{bmatrix} 1 & 0 \\end{bmatrix}\n\\]\n\ncolumn vector\n\n\n\n\\[\nv=\\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}\n\\]\n\n\\(v=u^T\\)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#vector-operations",
    "href": "Linear_Algebra_slimversion.html#vector-operations",
    "title": "Linear Algebra",
    "section": "Vector Operations",
    "text": "Vector Operations\n\naddition and subtraction\n\ndo the operation element-by-element\ncheck the dimension of the vectors"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#vector-operations-1",
    "href": "Linear_Algebra_slimversion.html#vector-operations-1",
    "title": "Linear Algebra",
    "section": "Vector Operations",
    "text": "Vector Operations\n\nvector multiplication\n\nmultiply vectors with scalars\ndot product (inner product)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#vector-operations-2",
    "href": "Linear_Algebra_slimversion.html#vector-operations-2",
    "title": "Linear Algebra",
    "section": "Vector Operations",
    "text": "Vector Operations\nThe dot product of vectors \\(x,y \\in \\mathbb R^n\\) is defined as\n\\[\n\\begin{array}{rl}\nx^\\top y &= {\\color{red}{x_1 y_1}} + {\\color{blue}{x_2 y_2}} + \\cdots + x_n y_n \\\\\n&= \\sum_{i=1}^n x_i y_i\n\\end{array}\n\\]\n\nthe dot product could be written as \\(x \\cdot y\\) or \\(x'y\\)\nthe dot product could be expressed in cosine form\n\n\n\\[\nx \\cdot y = \\|x\\| \\|y\\| \\cos \\theta\n\\]"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-algebra",
    "href": "Linear_Algebra_slimversion.html#matrix-algebra",
    "title": "Linear Algebra",
    "section": "Matrix Algebra",
    "text": "Matrix Algebra\n\nwhat is a matrix?\n\na matrix is a rectangular array of numbers\n\\(A_{m \\times n} = \\begin{bmatrix} a_{11} & a_{12} & \\cdots & a_{1n} \\\\ a_{21} & a_{22} & \\cdots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{m1} & a_{m2} & \\cdots & a_{mn} \\end{bmatrix}\\)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-algebra-1",
    "href": "Linear_Algebra_slimversion.html#matrix-algebra-1",
    "title": "Linear Algebra",
    "section": "Matrix Algebra",
    "text": "Matrix Algebra\n\nmatrix addition and subtraction\n\n\\(A_{m \\times n} \\pm B_{m \\times n} = C_{m \\times n}\\)\n\ne.g. \\(A = \\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}\\), \\(B = \\begin{bmatrix} 5 & 6 \\\\ 7 & 8 \\end{bmatrix}\\), \\(A+B = \\begin{bmatrix} 6 & 8 \\\\ 10 & 12 \\end{bmatrix}\\)\n\ncheck the dimension of the matrices\n\nIn general,\n\n\n\\[\nA + B =\n\\begin{bmatrix}\n    a_{11} & \\cdots & a_{1k} \\\\\n    \\vdots & \\vdots & \\vdots \\\\\n    a_{n1} & \\cdots & a_{nk}\n\\end{bmatrix} +\n\\begin{bmatrix}\n    b_{11} & \\cdots & b_{1k} \\\\\n    \\vdots & \\vdots & \\vdots \\\\\n    b_{n1} & \\cdots & b_{nk}\n\\end{bmatrix} =\n\\begin{bmatrix}\n    a_{11} + b_{11} &  \\cdots & a_{1k} + b_{1k} \\\\\n    \\vdots & \\vdots & \\vdots \\\\\n    a_{n1} + b_{n1} &  \\cdots & a_{nk} + b_{nk}\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-algebra-2",
    "href": "Linear_Algebra_slimversion.html#matrix-algebra-2",
    "title": "Linear Algebra",
    "section": "Matrix Algebra",
    "text": "Matrix Algebra\n\nscale multiplication\n\nIn general for a number \\(\\gamma\\) and any matrix \\(A\\),\n\n\n\n\\[\n\\gamma A =\n\\gamma\n\\begin{bmatrix}\n    a_{11} &  \\cdots & a_{1k} \\\\\n    \\vdots & \\vdots  & \\vdots \\\\\n    a_{n1} &  \\cdots & a_{nk}\n\\end{bmatrix} :=\n\\begin{bmatrix}\n    \\gamma a_{11} & \\cdots & \\gamma a_{1k} \\\\\n    \\vdots & \\vdots & \\vdots \\\\\n    \\gamma a_{n1} & \\cdots & \\gamma a_{nk}\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication",
    "title": "Linear Algebra",
    "section": "Matrix multiplication",
    "text": "Matrix multiplication\n\nThe rule for matrix multiplication generalizes the idea of inner products\n\nIf \\(A\\) is \\(n \\times k\\) and \\(B\\) is \\(j \\times m\\), then to multiply \\(A\\) and \\(B\\)\n\nany requirement on the dimensions of \\(A\\) and \\(B\\) for the matrix multiplication?\nwhat will be dimension of the resulting matrix \\(A B\\)\n\n\nHere’s an example of a \\(2 \\times 2\\) matrix multiplied by a \\(2 \\times 1\\) vector\n\n\n\\[\nAx =\n\\begin{bmatrix}\n    \\color{red}{a_{11}} & \\color{red}{a_{12}} \\\\\n    a_{21} & a_{22}\n\\end{bmatrix}\n\\begin{bmatrix}\n    \\color{red}{x_1} \\\\\n    \\color{red}{x_2}\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n    \\color{red}{a_{11}x_1 + a_{12}x_2} \\\\\n    a_{21}x_1 + a_{22}x_2\n\\end{bmatrix}\n\\]\n\nHere is a simple illustration of multiplication of two matrices\n\n\n\n\\[\nAB =\n\\begin{bmatrix}\n    a_{11} & a_{12} \\\\\n    \\color{red}{a_{21}} & \\color{red}{a_{22}} \\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n    b_{11} & \\color{red}{b_{12}} \\\\\n    b_{21} & \\color{red}{b_{22}} \\\\\n\\end{bmatrix} :=\n\\begin{bmatrix}\n    a_{11}b_{11} + a_{12}b_{21} & a_{11}b_{12} + a_{12}b_{22} \\\\\n    a_{21}b_{11} + a_{22}b_{21} & \\color{red}{a_{21}b_{12} + a_{22}b_{22}}\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-1",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-1",
    "title": "Linear Algebra",
    "section": "Matrix multiplication",
    "text": "Matrix multiplication\n\nNotice that \\(AB \\neq BA\\) in general\nThere are many tutorials to help you further visualize this operation, like this one\nOne important special case is the identity matrix, which has ones on the principal diagonal and zero elsewhere:\n\n\n\\[\n    I =\n    \\begin{bmatrix}\n        1 & \\cdots & 0 \\\\\n        \\vdots & \\ddots & \\vdots \\\\\n        0 &  \\cdots & 1\n    \\end{bmatrix}\n\\]\n\nExecises:\n\nif \\(A\\) is \\(n \\times k\\) and \\(I\\) is the \\(k \\times k\\) identity matrix, then \\(AI = A\\)\nif \\(I\\) is the \\(n \\times n\\) identity matrix, then \\(IA = A\\)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#exercise",
    "href": "Linear_Algebra_slimversion.html#exercise",
    "title": "Linear Algebra",
    "section": "Exercise",
    "text": "Exercise\n\\[\nY=\\begin{bmatrix} 3 & 1 & -2 \\\\ 6 & 3 & 4 \\end{bmatrix}\n, \\quad X=\\begin{bmatrix} 4 & 2 \\\\ 3 & 0 \\\\ 1 & 2 \\end{bmatrix}\n\\]\n\nWhat are the dimensions of the matrices \\(X\\) and \\(Y\\)?\nHow to multiply \\(Y\\) and \\(X\\) to yield a \\(3 \\times 3\\) matrix? Compute it\nHow to multiply \\(Y\\) and \\(X\\) to yield a \\(2 \\times 2\\) matrix? Compute it"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#linear-transformation",
    "href": "Linear_Algebra_slimversion.html#linear-transformation",
    "title": "Linear Algebra",
    "section": "Linear Transformation",
    "text": "Linear Transformation\nMatrics as Mapping\n\nEach \\(n \\times k\\) matrix \\(A\\) can be identified with a function \\(f(x) = Ax\\) that maps \\(x \\in \\mathbb R ^k\\) into \\(y = Ax \\in \\mathbb R ^n\\)\n\nthese kinds of functions have a special property: they are linear\n\nA function \\(f \\colon \\mathbb R ^k \\to \\mathbb R ^n\\) is called linear if\n\nfor all \\(x, y \\in \\mathbb R\\) and all scalars \\(\\alpha, \\beta\\), we have\n\n\n\n\\[\nf(\\alpha x + \\beta y) = \\alpha f(x) + \\beta f(y)\n\\]\n\n\nit can be shown that \\(f\\) is linear if and only if there exists a matrix \\(A\\) such that \\(f(x) = Ax\\) for all \\(x\\)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#linear-transformation-1",
    "href": "Linear_Algebra_slimversion.html#linear-transformation-1",
    "title": "Linear Algebra",
    "section": "Linear Transformation",
    "text": "Linear Transformation\nSome examples\nWe consider how a given matrix transforms in \\(\\mathbb R ^2\\)\nLet \\(\\begin{bmatrix} 2 & 1 \\\\ -1 & 1 \\end{bmatrix}\\)\n\n\n\nit transforms the vector \\(x = \\begin{bmatrix} 1 \\\\ 3 \\end{bmatrix}\\) to the vector \\(y = \\begin{bmatrix} 5 \\\\ 2 \\end{bmatrix}\\) through the matrix multiplication\n\n\n\\[\\begin{bmatrix}\n        2 & 1 \\\\\n        -1 & 1\n    \\end{bmatrix}\n    \\begin{bmatrix}\n        1 \\\\\n        3\n    \\end{bmatrix}\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEx: with the same vector \\(x\\), now, the matrix becomes \\(A = \\begin{bmatrix} 1 & 2 \\\\ 3 & 4 \\end{bmatrix}\\), what will be the \\(y\\)?"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#linear-transformation-2",
    "href": "Linear_Algebra_slimversion.html#linear-transformation-2",
    "title": "Linear Algebra",
    "section": "Linear Transformation",
    "text": "Linear Transformation\nSome examples - Scaling\n\n\nA matrix of the form\n\\[\n    \\begin{bmatrix}\n        \\alpha & 0\n        \\\\ 0 & \\beta\n    \\end{bmatrix}\n\\]\nscales vectors across the x-axis by a factor \\(\\alpha\\) and along the y-axis by a factor \\(\\beta\\).\n\na simple example where \\(\\alpha = \\beta = 3\\)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#linear-transformation-3",
    "href": "Linear_Algebra_slimversion.html#linear-transformation-3",
    "title": "Linear Algebra",
    "section": "Linear Transformation",
    "text": "Linear Transformation\nSome examples - Shearing\n\n\nA “shear” matrix of the form\n\\[\n    \\begin{bmatrix}\n        1 & \\lambda \\\\\n        0 & 1\n    \\end{bmatrix}\n\\]\nstretches vectors along the x-axis by an amount proportional to the y-coordinate of a point"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#linear-transformation-4",
    "href": "Linear_Algebra_slimversion.html#linear-transformation-4",
    "title": "Linear Algebra",
    "section": "Linear Transformation",
    "text": "Linear Transformation\nSome examples - Rotation\n\n\nA matrix of the form\n\\[\n    \\begin{bmatrix}\n        \\cos \\theta & \\sin \\theta\n        \\\\ - \\sin \\theta & \\cos \\theta\n    \\end{bmatrix}\n\\]\nis called a rotation matrix\n\nThis matrix rotates vectors clockwise by an angle \\(\\theta\\)\n\n45 degree clockwise rotation"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#linear-transformation-5",
    "href": "Linear_Algebra_slimversion.html#linear-transformation-5",
    "title": "Linear Algebra",
    "section": "Linear Transformation",
    "text": "Linear Transformation\nSome examples - Permutation\n\n\nThe permutation matrix\n\\[\n    \\begin{bmatrix}\n        0 & 1 \\\\\n        1 & 0\n    \\end{bmatrix}\n\\] interchanges the coordinates of a vector"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions\nConsider the two matrices\n\\[\n    A =\n        \\begin{bmatrix}\n            0 & 1 \\\\\n            -1 & 0\n        \\end{bmatrix}\n        \\quad \\text{and} \\quad\n    B =\n        \\begin{bmatrix}\n            1 & 2 \\\\\n            0 & 1\n        \\end{bmatrix}\n\\]\nWhat will the output be when we try to obtain \\(ABx\\) for some \\(2 \\times 1\\) vector \\(x\\)?\n\\[\n\\color{red}{\\underbrace{\n\\color{black}{\\begin{bmatrix}\n  0 & 1 \\\\\n-1 & 0\n\\end{bmatrix}}\n}_{\\textstyle A} }\n\\color{red}{\\underbrace{\n\\color{black}{\\begin{bmatrix}\n  1 & 2 \\\\\n  0 & 1\n\\end{bmatrix}}\n}_{\\textstyle B}}\n\\color{red}{\\overbrace{\n\\color{black}{\\begin{bmatrix}\n  1 \\\\\n  3\n\\end{bmatrix}}\n}^{\\textstyle x}}\n\\rightarrow\n\\color{red}{\\underbrace{\n\\color{black}{\\begin{bmatrix}\n  0 & 1 \\\\\n  -1 & -2\n\\end{bmatrix}}\n}_{\\textstyle AB}}\n\\color{red}{\\overbrace{\n\\color{black}{\\begin{bmatrix}\n  1 \\\\\n  3\n\\end{bmatrix}}\n}^{\\textstyle x}}\n\\rightarrow\n\\color{red}{\\overbrace{\n\\color{black}{\\begin{bmatrix}\n  3 \\\\\n  -7\n\\end{bmatrix}}\n}^{\\textstyle y}}\n\\]"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-1",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-1",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions\n\\[\n\\color{red}{\\underbrace{\n\\color{black}{\\begin{bmatrix}\n  0 & 1 \\\\\n-1 & 0\n\\end{bmatrix}}\n}_{\\textstyle A} }\n\\color{red}{\\underbrace{\n\\color{black}{\\begin{bmatrix}\n  1 & 2 \\\\\n  0 & 1\n\\end{bmatrix}}\n}_{\\textstyle B}}\n\\color{red}{\\overbrace{\n\\color{black}{\\begin{bmatrix}\n  1 \\\\\n  3\n\\end{bmatrix}}\n}^{\\textstyle x}}\n\\rightarrow\n\\color{red}{\\underbrace{\n\\color{black}{\\begin{bmatrix}\n  0 & 1 \\\\\n  -1 & 0\n\\end{bmatrix}}\n}_{\\textstyle A}}\n\\color{red}{\\overbrace{\n\\color{black}{\\begin{bmatrix}\n  7 \\\\\n  3\n\\end{bmatrix}}\n}^{\\textstyle Bx}}\n\\rightarrow\n\\color{red}{\\overbrace{\n\\color{black}{\\begin{bmatrix}\n  3 \\\\\n  -7\n\\end{bmatrix}}\n}^{\\textstyle y}}\n\\]\n\nWe can observe that applying the transformation \\(AB\\) on the vector \\(x\\) is the same as first applying \\(B\\) on \\(x\\) and then applying \\(A\\) on the vector \\(Bx\\).\nthe matrix product \\(AB\\) is the composition of the matrix transformations \\(A\\) and \\(B\\)\n\nfirst apply transformation \\(B\\) and then transformation \\(A\\)\n\n\n\n\nWhen we matrix multiply an \\(n \\times m\\) matrix \\(A\\) with an \\(m \\times k\\) matrix \\(B\\) the obtained matrix product is an \\(n \\times k\\) matrix \\(AB\\)\n\nThus, if \\(A\\) and \\(B\\) are transformations such that \\(A \\colon \\mathbb{R}^m \\to\n\\mathbb{R}^n\\) and \\(B \\colon \\mathbb{R}^k \\to \\mathbb{R}^m\\), then \\(AB\\) transforms \\(\\mathbb{R}^k\\) to \\(\\mathbb{R}^n\\).\n\n\nnotice that \\(AB\\) is generally not equal to \\(BA\\)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-2",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-2",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions - examples\n\nLet \\(A\\) be the \\(90^{\\circ}\\) clockwise rotation matrix given by \\(\\begin{bmatrix} 0 & 1 \\\\ -1 & 0 \\end{bmatrix}\\)\nLet \\(B\\) be a shear matrix along the x-axis given by \\(\\begin{bmatrix} 1 & 2 \\\\ 0 & 1 \\end{bmatrix}\\)\nvisualize how a grid of points changes when we apply the transformation \\(AB\\) and then compare it with the transformation \\(BA\\)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-3",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-3",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions - examples\nShear then rotate"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-4",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-4",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions - examples\nRotate then shear\n\n\n\n\n\n\n\n\n\n\nit demonstrates that the transformation \\(AB\\) is not the same as the transformation \\(BA\\)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-5",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-5",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions - Iterating on a fixed map\nIn economics, we are often interested in analyzing behavior where we repeatedly apply a fixed matrix\nFor example, given a vector \\(v\\) and a matrix \\(A\\), we are interested in studying the sequence\n\\[\n    v, \\quad\n    Av, \\quad\n    AAv = A^2v, \\quad \\ldots\n\\]"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-6",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-6",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions - Iterating on a fixed map\n\nExample of a sequence of iterates \\((A^k v)_{k \\geq 0}\\) under map \\(A=\\begin{bmatrix} \\sqrt{3}+1 & -2 \\\\ 1 & \\sqrt{3}-1  \\end{bmatrix}\\)\nlet \\(v = (-3, -3)\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere with each iteration the vectors get shorter, i.e., move closer to the origin\nIn this case, repeatedly multiplying a vector by \\(A\\) makes the vector “spiral in”"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-7",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-7",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions - Iterating on a fixed map\n\nExample of a sequence of iterates \\((A^k v)_{k \\geq 0}\\) under map \\(A=\\begin{bmatrix} \\sqrt{3}+1 & -2 \\\\ 1 & \\sqrt{3}-1  \\end{bmatrix}\\)\nlet \\(v = (2.5, 0)\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this case, repeatedly multiplying a vector by \\(A\\) simply “rotates it around an ellipse”"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-8",
    "href": "Linear_Algebra_slimversion.html#matrix-multiplication-as-composition-8",
    "title": "Linear Algebra",
    "section": "Matrix multiplication as composition",
    "text": "Matrix multiplication as composition\nLinear compositions - Iterating on a fixed map\n\nExample of a sequence of iterates \\((A^k v)_{k \\geq 0}\\) under map \\(A=\\begin{bmatrix} \\sqrt{3}+1 & -2 \\\\ 1 & \\sqrt{3}-1  \\end{bmatrix}\\)\nlet \\(v = (-1, -0.25)\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this case, repeatedly multiplying a vector by \\(A\\) makes the vector “spiral out”"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#system-of-linear-equations",
    "href": "Linear_Algebra_slimversion.html#system-of-linear-equations",
    "title": "Linear Algebra",
    "section": "System of Linear Equations",
    "text": "System of Linear Equations\n\nTwo equations in two unknowns\n\n\n\\[\n\\begin{aligned}\n    y_1 = a x_1 + b x_2 \\\\\n    y_2 = c x_1 + d x_2\n\\end{aligned}\n\\]\n\nHow we solve it?\n\nsubstitution and elimination\n\nLet us work on a simple example\n\n\n\n\\[\\begin{aligned}\n    3x + 5y &= 7 \\\\\n    x - 2y &= 3\n    \n\\end{aligned}\\]\n\nwhat are \\(x\\) and \\(y\\)?"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#general-linear-systems",
    "href": "Linear_Algebra_slimversion.html#general-linear-systems",
    "title": "Linear Algebra",
    "section": "General linear systems",
    "text": "General linear systems\nA more general version looks as follows\n\\[\n\\begin{matrix}\n    a_{11} x_1 & + & a_{12} x_2 & + & \\cdots & + & a_{1n} x_n & = & b_1 \\\\\n    \\vdots & & \\vdots & & & & \\vdots & & \\vdots \\\\\n    a_{n1} x_1 & + & a_{n2} x_2 & + & \\cdots & + & a_{nn} x_n & = & b_n\n\\end{matrix}\n\\]\n\nThe objective here is to solve for the “unknowns” \\(x_1, \\ldots, x_n\\)\nWe take as given the coefficients \\(a_{11}, \\ldots, a_{nn}\\) and constants \\(b_1, \\ldots, b_n\\)\nthis is a setting where the number of unknowns equals the number of equations\n\nthis is the case where we are most likely to find a well-defined solution\n\n\n\n\n(The other cases are referred to as overdetermined and underdetermined systems of equations)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#solving-systems-of-equations",
    "href": "Linear_Algebra_slimversion.html#solving-systems-of-equations",
    "title": "Linear Algebra",
    "section": "Solving systems of equations",
    "text": "Solving systems of equations\n\\[\nA x = b\n    \\quad \\text{where} \\quad\n    A =\n    \\begin{bmatrix}\n        a_{11} &  \\cdots & a_{1n} \\\\\n        \\vdots & \\vdots  & \\vdots \\\\\n        a_{n1} &  \\cdots & a_{nn}\n    \\end{bmatrix}\n    \\quad \\text{and} \\quad\n    b =\n    \\begin{bmatrix}\n        b_1 \\\\\n        \\vdots \\\\\n        b_n\n    \\end{bmatrix}\n\\] - find a vector \\(x \\in \\mathbb R^n\\) that solves the equations, taking \\(b\\) and \\(A\\) as given"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#some-examples-1",
    "href": "Linear_Algebra_slimversion.html#some-examples-1",
    "title": "Linear Algebra",
    "section": "Some examples",
    "text": "Some examples\nConsider the system of equations given by\n\n\n\\[\n\\begin{aligned}\n    x + 3y &= 3 \\\\\n    2x + 6y &= -8\n\\end{aligned}\n\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthe rows of \\(A\\) are called linearly dependent"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#some-examples-2",
    "href": "Linear_Algebra_slimversion.html#some-examples-2",
    "title": "Linear Algebra",
    "section": "Some examples",
    "text": "Some examples\nConsider the system of equations given by\n\\[\n\\begin{aligned}\n    x - 2y &= -4 \\\\\n    -2x + 4y &= 8\n\\end{aligned}\n\\]\nAny vector \\(v = (x,y)\\) such that \\(x = 2y - 4\\) will solve the above system\nSince we can find infinite such vectors this system has infinitely many solutions\nThis is because the rows of the corresponding matrix are linearly dependent"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#nonsingular-matrices",
    "href": "Linear_Algebra_slimversion.html#nonsingular-matrices",
    "title": "Linear Algebra",
    "section": "Nonsingular matrices",
    "text": "Nonsingular matrices\n\nA square matrix \\(A\\) is nonsingular if and only if the rows and columns of \\(A\\) are linearly independent\nTo every square matrix we can assign a unique number called the determinant.\nFor \\(2 \\times 2\\) matrices, the determinant is given by,\n\n\n\\[\n\\begin{bmatrix}\n    \\color{red}{a} & \\color{blue}{b} \\\\\n    \\color{blue}{c} & \\color{red}{d}\n\\end{bmatrix}\n=\n{\\color{red}{ad}} - {\\color{blue}{bc}}\n\\]\n\n\nthe determinant of a \\(3 \\times 3\\) matrix\n\n\n\\[\ndet \\begin{bmatrix}\n    a & b & c \\\\\n    d & e & f \\\\\n    g & h & i\n\\end{bmatrix}\n= a(ei - fh) - b(di - fg) + c(dh - eg)\n\\]\n\n\nIf the determinant of \\(A\\) is not zero, then we say that \\(A\\) is nonsingular\n\n\n\nThe determinant of a \\(2 \\times 2\\) matrix is also the area of the parallelogram spanned by the column vectors\nThe determinant of a \\(2 \\times 2\\) matrix is also the factor by which the matrix scales the area of any set of points in the plane\n\nif the determinant is negative, the matrix also flips the orientation of the plane\nif the determinant is zero, the matrix collapses the plane to a line or lower-dimensional space\nif the determinant is one, the matrix preserves the area of the plane\nif the determinant is greater than one, the matrix expands the area of the plane\nif the determinant is less than one, the matrix shrinks the area of the plane\n\n\n\n#| echo: false\n#| results: hide\n#| out-height: 88%\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, ax = plt.subplots()\n\n# Draw the unit square\nsquare = np.array([[0, 1, 1, 0, 0], [0, 0, 1, 1, 0]])\nax.plot(square[0], square[1], 'b-', lw=2, alpha=0.6)\n\n# Draw the unit square transformed by a matrix\nA = np.array([[1, 2], [2, 1]])\ntransformed_square = A @ square\nax.plot(transformed_square[0], transformed_square[1], 'r-', lw=2, alpha=0.6)\n\n# Annotate the plot\nax.text(0.5, 0.5, r'$1$', fontsize=14)\nax.text(1.5, 1.5, r'$2$', fontsize=14)\nax.text(1.5, 0.5, r'$3$', fontsize=14)\nax.text(0.5, 1.5, r'$4$', fontsize=14)\n\nax.set(xlim=(0, 3), ylim=(0, 3))\n\n[(0.0, 3.0), (0.0, 3.0)]\n\nax.set_xticks([])\n\n[]\n\nax.set_yticks([])\n\n[]\n\nplt.show()"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#nonsingular-matrices-1",
    "href": "Linear_Algebra_slimversion.html#nonsingular-matrices-1",
    "title": "Linear Algebra",
    "section": "Nonsingular matrices",
    "text": "Nonsingular matrices\n\na square matrix \\(A\\) has a nonzero determinant, if and only if it possesses an inverse matrix \\(A^{-1}\\), with the property that \\(A A^{-1} =A^{-1} A = I\\).\nAs a consequence, if we pre-multiply both sides of \\(Ax = b\\) by \\(A^{-1}\\), we get\n\n\n\\[\nx = A^{-1} b\n\\]\nThis is the solution to \\(Ax = b\\) — the solution we are looking for\n\nA more detailed explanation of matrix inverse can be found here"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#when-the-matrices-have-more-rows-than-columns",
    "href": "Linear_Algebra_slimversion.html#when-the-matrices-have-more-rows-than-columns",
    "title": "Linear Algebra",
    "section": "When the matrices have more rows than columns",
    "text": "When the matrices have more rows than columns\n\\(A_{n \\times k}\\) matrix with \\(n &gt; k\\)\n\nthis is important in many settings, including linear regression\nGiven arbitrary \\(y \\in \\mathbb R ^n\\), we seek an \\(x \\in \\mathbb R ^k\\) such that \\(y = Ax\\)\n\nthe existence of a solution is highly unlikely\n\nfocusing on the case where the columns of \\(A\\) are linearly independent.\n\nthe span of the columns of \\(A\\) is a \\(k\\)-dimensional subspace of \\(\\mathbb R ^n\\).\n\n\n\n\nThis span is very “unlikely” to contain arbitrary \\(y \\in \\mathbb R ^n\\).\nTo see why, recall the figure above, where $ k=2 $ and \\(n=3\\).\nImagine an arbitrarily chosen $ y R ^3 $, located somewhere in that three-dimensional space.\nWhat’s the likelihood that \\(y\\) lies in the span of \\(\\{a_1, a_2\\}\\) (i.e., the two dimensional plane through these points)?\nIn a sense, it must be very small, since this plane has zero “thickness”.\n\n\n\nin the \\(n &gt; k\\) case we usually give up on existence\n\ninstead, seek the best approximation, looking for \\(x\\) that makes the distance \\(\\| y - Ax\\|\\) as small as possible\none can use either calculus or the theory of orthogonal projections"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#when-the-matrices-have-more-rows-than-columns-1",
    "href": "Linear_Algebra_slimversion.html#when-the-matrices-have-more-rows-than-columns-1",
    "title": "Linear Algebra",
    "section": "When the matrices have more rows than columns",
    "text": "When the matrices have more rows than columns\n\\(A_{n \\times k}\\) matrix with \\(n &lt; k\\)\n\nthere are either no solutions or infinitely many — in other words, uniqueness never holds\nFor example, consider the case where \\(k=3\\) and \\(n=2\\)\n\nthe columns of \\(A\\) consists of 3 vectors in \\(\\mathbb R ^2\\)\nthis set can never be linearly independent\nhence, one column is a linear combination of the other two\nlet’s say that \\(a_1 = \\alpha a_2 + \\beta a_3\\)\nthen if \\(y = Ax = x_1 a_1 + x_2 a_2 + x_3 a_3\\), we can also write\n\n\n\n\\[\ny\n= x_1 (\\alpha a_2 + \\beta a_3) + x_2 a_2 + x_3 a_3\n= (x_1 \\alpha + x_2) a_2 + (x_1 \\beta + x_3) a_3\n\\]"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#positive-definite-matrices",
    "href": "Linear_Algebra_slimversion.html#positive-definite-matrices",
    "title": "Linear Algebra",
    "section": "Positive Definite Matrices",
    "text": "Positive Definite Matrices\nLet \\(A\\) be a symmetric \\(n \\times n\\) matrix\n\n\\(A\\) is\n\npositive definite if \\(x' A x &gt; 0\\) for every \\(x \\in \\mathbb R ^n \\setminus \\{0\\}\\)\n\npositive semi-definite or nonnegative definite if \\(x' A x \\geq 0\\) for every \\(x \\in \\mathbb R ^n\\)\n\nAnalogous definitions exist for negative definite and negative semi-definite matrices\nif \\(A\\) is positive definite, then all of its eigenvalues are strictly positive\n\nhence \\(A\\) is invertible (with positive definite inverse)"
  },
  {
    "objectID": "Linear_Algebra_slimversion.html#references",
    "href": "Linear_Algebra_slimversion.html#references",
    "title": "Linear Algebra",
    "section": "References",
    "text": "References\n\n\nStachurski, John. 2016. A Primer in Econometric Theory. Cambridge, Massachusetts: The MIT Press."
  },
  {
    "objectID": "Calculus_slimversion.html#outline",
    "href": "Calculus_slimversion.html#outline",
    "title": "Maths - Calculus",
    "section": "Outline",
    "text": "Outline\n\nFunctions\nLimits\nDerivatives\nOptimization\nHigher-order derivatives\nSome common rules\nPartial derivatives\nIntegrals\nConstraint optimization"
  },
  {
    "objectID": "Calculus_slimversion.html#functions",
    "href": "Calculus_slimversion.html#functions",
    "title": "Maths - Calculus",
    "section": "Functions",
    "text": "Functions\n\nWhat is a function?\n\ndomain\nrange\nmapping\n\nWhat is not a function?"
  },
  {
    "objectID": "Calculus_slimversion.html#limits",
    "href": "Calculus_slimversion.html#limits",
    "title": "Maths - Calculus",
    "section": "Limits",
    "text": "Limits\n\nWhat is a limit?\n\nidea of a slope\n\nDoes it always exist?\nIs it unique?"
  },
  {
    "objectID": "Calculus_slimversion.html#derivatives",
    "href": "Calculus_slimversion.html#derivatives",
    "title": "Maths - Calculus",
    "section": "Derivatives",
    "text": "Derivatives\n\nWhat is Derivative?\n\nslope of a function\nrate of change\n\nwhy learning it?\n\noptimization\neconomics\nstatistics\nmachine learning\ndeep learning\n\nreminder about notation\n\n\\(\\frac{df(x)}{dx}\\)\n\\(\\frac{df}{dx}\\)\n\\(f'(x)\\)\n\\(\\frac{d}{dx}f(x)\\)\n\\(\\frac{d}{dx}f\\)"
  },
  {
    "objectID": "Calculus_slimversion.html#optimization",
    "href": "Calculus_slimversion.html#optimization",
    "title": "Maths - Calculus",
    "section": "Optimization",
    "text": "Optimization\n\nHow to find the maximum or minimum of a function?\n\nlet us think about a quadratic function, \\(y=ax^2+bx+c\\)\n\n\n\n\nHow to find out the maximum or minimum of a function?\n\nfirst-order condition\ncritical points"
  },
  {
    "objectID": "Calculus_slimversion.html#higher-order-derviatives",
    "href": "Calculus_slimversion.html#higher-order-derviatives",
    "title": "Maths - Calculus",
    "section": "Higher-order derviatives",
    "text": "Higher-order derviatives\n\nsecond-order derivative\n\nconcave\nconvex\ninflection point\n\nthird-order derivative\nn-th order derivative\nlocal vs global maximum/minimum\n\n\n\nOptimizing functions. Taking the first derivative and setting it equal to 0 gives us either a minimum or maximum. The second derivative allows us to discern between the two.\nhigher-order derivatives can be used to construct useful approximations (i.e. Taylor’s approximation) to complex functions that are important in understanding the properties of various statistical estimators."
  },
  {
    "objectID": "Calculus_slimversion.html#some-common-rules-of-derivatives",
    "href": "Calculus_slimversion.html#some-common-rules-of-derivatives",
    "title": "Maths - Calculus",
    "section": "Some common rules of derivatives",
    "text": "Some common rules of derivatives\n\nHow to calculate Derivative?\n\npower rule\n\n\\(\\frac{dx^n}{dx}=nx^{n-1}\\)\n\nproduct rule\n\n\\(\\frac{d}{dx}f(x)g(x)=f'(x)g(x) +f(x)g'(x)\\)\n\nquotient rule\n\n\\(\\frac{d}{dx}\\frac{f(x)}{g(x)}=\\frac{f'(x)g(x)-f(x)g'(x)}{(g(x))^2}\\)\n\nchain rule\n\n\\(\\frac{d}{dx}f(g(x))=f'(g(x))g'(x)\\)\n\nspecial rules for logs and exponents\n\n\\(\\frac{d}{dx}\\ln(x)=\\frac{1}{x}\\)\n\\(\\frac{d}{dx}e^{x}=e^{x}\\)\n\n\n\n\n\n\\(\\frac{d}{dx}\\ln(f(x))=\\frac{f'(x)}{f(x)}\\)\n\\(\\frac{d}{dx}e^{f(x)}=f'(x)e^{f(x)}\\)"
  },
  {
    "objectID": "Calculus_slimversion.html#exercises",
    "href": "Calculus_slimversion.html#exercises",
    "title": "Maths - Calculus",
    "section": "Exercises:",
    "text": "Exercises:\n\n\\(\\frac{d}{dx}(6x^3+5)\\)\n\\(\\frac{d}{dx}\\sqrt{(5x^3+3x+5)}\\)\nlet \\(h(x)=2x+3; g(x)=5x^2+3x\\), let \\(f(x)=h(x)*g(x)\\), \\(\\frac{df(x)}{dx}\\)\nlet \\(p(x)=\\frac{h(x)}{g(x)}\\), \\(\\frac{dp(x)}{dx}\\)\n\\(\\frac{d(g(h(x)))}{dx}\\)\n\\(\\frac{d}{dx}\\ln(x^6+8)\\)\n\\(\\frac{d}{dx}e^{6x+3}\\)\n\\(\\frac{d}{dx}x^3e^{x}\\)"
  },
  {
    "objectID": "Calculus_slimversion.html#partial-derviatives",
    "href": "Calculus_slimversion.html#partial-derviatives",
    "title": "Maths - Calculus",
    "section": "Partial derviatives",
    "text": "Partial derviatives\n\nWhat is a partial derivative?\n\nLet \\(z=f(x,y)\\)\n\\(\\frac{\\partial f}{\\partial x}\\)\n\\(\\frac{\\partial f}{\\partial y}\\)\n\nExercise:\n\nlet \\(f(x,y)=x^2 y^3+3x+2y\\)\nfind \\(\\frac{\\partial f}{\\partial x}\\) and \\(\\frac{\\partial f}{\\partial y}\\)"
  },
  {
    "objectID": "Calculus_slimversion.html#integrals",
    "href": "Calculus_slimversion.html#integrals",
    "title": "Maths - Calculus",
    "section": "Integrals",
    "text": "Integrals\n\nWhat is an integral?\n\narea under the curve\nanti-derivative\n\nNotation\n\n\\(\\int^b_a f(x)dx\\)\n\\(\\int_X f(x)dx\\)\n\nWe are most interested in the concept rather than actual (hand) calculation of the integrals"
  },
  {
    "objectID": "Calculus_slimversion.html#constraint-optimization",
    "href": "Calculus_slimversion.html#constraint-optimization",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nWhat is constraint optimization?\n\noptimization with constraints\nLagrange multiplier\n\nThe idea is to optimize a function subject to some constraints\nThe problem can be stated as:\n\nmaximize \\(f(x,y)\\) subject to \\(g(x,y)=0\\)\nminimize \\(f(x,y)\\) subject to \\(g(x,y)=0\\)"
  },
  {
    "objectID": "Calculus_slimversion.html#constraint-optimization-1",
    "href": "Calculus_slimversion.html#constraint-optimization-1",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nlet us learn some economics\nin economics, a consumer faces the problem of maximizing her utility subject to the income constraint:\n\n\n\\[\n\\max_{x_1,x_2} u(x_1,x_2) \\quad s.t. \\; p_1x_1 + p_2x_2=y\n\\]\n\nwe can visualize and “solve” the problem using graph"
  },
  {
    "objectID": "Calculus_slimversion.html#constraint-optimization-2",
    "href": "Calculus_slimversion.html#constraint-optimization-2",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe optimal solution is at the point where the budget line is tangent to the indifference curve\n\n\n\\[\n\\frac{MU_1}{MU_2}=\\frac{p_1}{p_2}\n\\]\n\\(\\quad\\) where \\(MU_1\\) and \\(MU_2\\) are the marginal utilities of good 1 and good 2 respectively\n\nwe can solve this problem using the “identity”\n\n\n\n\\[\nu(x_1, x^U_2(x_1))=\\bar{u}\n\\]\n\nwe need to solve two equations simultaneously"
  },
  {
    "objectID": "Calculus_slimversion.html#constraint-optimization-3",
    "href": "Calculus_slimversion.html#constraint-optimization-3",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe Lagrange multiplier is a method to solve the optimization problem with constraints\nthe Lagrange function is defined as:\n\n\n\\[\nL(x_1,x_2,\\lambda)=u(x_1,x_2)+\\lambda(y-(p_1x_1+p_2x_2))\n\\]\n\nthe first-order conditions are\n\n\n\n\\[\n\\begin{align*}\n\\frac{\\partial u}{\\partial x_1} - \\lambda p_1 &=0 \\\\\n\\frac{\\partial u}{\\partial x_2} - \\lambda p_2 &=0 \\\\\ny-(p_1x_1+p_2x_2) &=0\n\\end{align*}\n\\]"
  },
  {
    "objectID": "Calculus_slimversion.html#constraint-optimization-4",
    "href": "Calculus_slimversion.html#constraint-optimization-4",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe Lagrange multiplier could be interpreted as the “marginal utility of income” in our example\nin economics, the Lagrange multiplier could be interpreted as the “shadow price” of the constraint\n\ne.g. the Lagrange multiplier could be interpreted as the “marginal cost” in production optimization\n\nReminder: the Lagrange multiplier could be zero, positive or negative\nthe Lagrange multiplier could be used in very general optimization problems\n\n\n\\[\n\\max_{x_1, \\dots, x_n} f(x_1,\\dots, x_n) \\quad s.t. \\; g_i(x_1,\\dots, x_n)=c_i, \\quad i=1,\\dots,m\n\\]"
  },
  {
    "objectID": "Calculus_slimversion.html#references",
    "href": "Calculus_slimversion.html#references",
    "title": "Maths - Calculus",
    "section": "References",
    "text": "References\n\n\nChiang, Alpha, Chung-i, and Kevin. Wainwright. 2005. Fundamental Methods of Mathematical Economics. 4th ed. / [rev. by] Kevin Wainwright. New York: McGraw-Hill.\n\n\nSimon, Carl P., and Lawrence. Blume. 1994. Mathematics for Economists. 1st ed. New York ; W.W. Norton."
  },
  {
    "objectID": "bootcamp_python/Lib/site-packages/soupsieve-2.7.dist-info/licenses/LICENSE.html",
    "href": "bootcamp_python/Lib/site-packages/soupsieve-2.7.dist-info/licenses/LICENSE.html",
    "title": "Welcome to HKU MSDA Bootcamp 2025",
    "section": "",
    "text": "MIT License\nCopyright (c) 2018 - 2025 Isaac Muse isaacmuse@gmail.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "bootcamp_python/Lib/site-packages/pyzmq-27.0.0.dist-info/licenses/LICENSE.html",
    "href": "bootcamp_python/Lib/site-packages/pyzmq-27.0.0.dist-info/licenses/LICENSE.html",
    "title": "Welcome to HKU MSDA Bootcamp 2025",
    "section": "",
    "text": "BSD 3-Clause License\nCopyright (c) 2009-2012, Brian Granger, Min Ragan-Kelley\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "bootcamp_python/Lib/site-packages/idna-3.10.dist-info/LICENSE.html",
    "href": "bootcamp_python/Lib/site-packages/idna-3.10.dist-info/LICENSE.html",
    "title": "Welcome to HKU MSDA Bootcamp 2025",
    "section": "",
    "text": "BSD 3-Clause License\nCopyright (c) 2013-2024, Kim Davies and contributors. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "bootcamp_python/Lib/site-packages/httpcore-1.0.9.dist-info/licenses/LICENSE.html",
    "href": "bootcamp_python/Lib/site-packages/httpcore-1.0.9.dist-info/licenses/LICENSE.html",
    "title": "Welcome to HKU MSDA Bootcamp 2025",
    "section": "",
    "text": "Copyright © 2020, Encode OSS Ltd. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "bootcamp_python/Lib/site-packages/httpx-0.28.1.dist-info/licenses/LICENSE.html",
    "href": "bootcamp_python/Lib/site-packages/httpx-0.28.1.dist-info/licenses/LICENSE.html",
    "title": "Welcome to HKU MSDA Bootcamp 2025",
    "section": "",
    "text": "Copyright © 2019, Encode OSS Ltd. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "bootcamp_python/Lib/site-packages/seaborn-0.13.2.dist-info/LICENSE.html",
    "href": "bootcamp_python/Lib/site-packages/seaborn-0.13.2.dist-info/LICENSE.html",
    "title": "Welcome to HKU MSDA Bootcamp 2025",
    "section": "",
    "text": "Copyright (c) 2012-2023, Michael L. Waskom All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "R introduction.html#introduction",
    "href": "R introduction.html#introduction",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nR is a programming language and software environment for statistical computing and graphics\n\nwidely used in academia and industry\nfor data analysis, statistical modeling, and visualization\nfor machine learning, data mining, and big data analysis\nfor reproducible research and scientific computing\n\nR is an implementation of the S programming language\n\nS was developed at Bell Laboratories by John Chambers and colleagues\nS was designed for data analysis and graphics\nS was the precursor to the commercial statistical software package S-PLUS"
  },
  {
    "objectID": "R introduction.html#introduction-1",
    "href": "R introduction.html#introduction-1",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand\n\nnamed partly after the first names of the first two R authors and partly as a play on the name of S\na GNU project, a free software movement initiated by Richard Stallman in 1983\nfreely available under the GNU General Public License\na large number of packages available"
  },
  {
    "objectID": "R introduction.html#introduction-2",
    "href": "R introduction.html#introduction-2",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\ntidyverse is a collection of R packages designed for data science\n\ntidyverse packages share an underlying design philosophy, grammar, and data structures\ntidyverse packages are designed to work together\n\nfocus on the tidyverse\n\nmainly because it is easier to understand\ndo most data manipulation we need in social science research with these tools\n\nA good reference for tidyverse is the book by Wickham (2019)\n\nR for Data Science"
  },
  {
    "objectID": "R introduction.html#introduction-3",
    "href": "R introduction.html#introduction-3",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nfor quick reference, visit Posit Primers on Data Science\n\nR Basics\nTransform Tables\nVisualize Data\n\nfor more advanced topics, visit Data Science\n\nData Wrangling\nData Visualization\nModelling\n\nwe use cover some base R functions first, then move on to the tidyverse"
  },
  {
    "objectID": "R introduction.html#loading-data",
    "href": "R introduction.html#loading-data",
    "title": "R - An Introduction",
    "section": "Loading Data",
    "text": "Loading Data\n\nThe first step in any data analysis is to load the data into R\n\nthe data can be in a variety of formats\nthe most common formats are CSV, Excel, and SPSS\nthe readr package is part of the tidyverse and is used to read data into R\n\n\n\n\n\n\n\nCode\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n# check your working directory\ngetwd()\n\n## read data file\n\naddh&lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/addhealthfake.csv\")"
  },
  {
    "objectID": "R introduction.html#add-health-dataset",
    "href": "R introduction.html#add-health-dataset",
    "title": "R - An Introduction",
    "section": "Add health dataset",
    "text": "Add health dataset\n\nHere are some details about the dataset\n\nThe National Longitudinal Study of Adolescent to Adult Health (Add Health)\na longitudinal study of a nationally representative sample of adolescents in grades 7-12 in the United States during the 1994-95 school year (Wave I)\nThe Add Health cohort has been followed into young adulthood with four in-home interviews for Wave I-IV by 2008\n\nthe Wave V conducted during 2016-2018 included a mixed-mode survey\n\nrespondents’ social, economic, psychological, and physical well-being\n\nalong with contextual data on the family, neighborhood, community, school, friendships, peer groups, and romantic relationships\n\nstudy developmental trajectories of health and risk behaviors throughout the life course"
  },
  {
    "objectID": "R introduction.html#explore-data",
    "href": "R introduction.html#explore-data",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nThe dataset used here is a subset of the Add Health dataset\n\n3000 observations and 11 variables\n\nAfter the dataset is loaded in R, it is important to explore the data to understand its structure and content\n\ncheck the data types of each variable\ncheck the dimensions of the data\nlook at a few rows and variables\n\n\n\n\nCode\nclass(addh$age)\n\n\n\n\n[1] \"numeric\"\n\n\nCode\nclass(addh$gender)\n\n\n[1] \"character\"\n\n\nCode\nclass(addh$love)\n\n\n[1] \"numeric\""
  },
  {
    "objectID": "R introduction.html#explore-data-1",
    "href": "R introduction.html#explore-data-1",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nFor more information on the dataset,\n\nsummary(): numeric summaries\nstr(): data types and sample data\ncolnames() or names(): names of columns/variables\ndim(): dimensions\nView(): view all data in RStudio viewer\nhead(): top 10 rows\ntail(): bottom 10 rows"
  },
  {
    "objectID": "R introduction.html#explore-data-2",
    "href": "R introduction.html#explore-data-2",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\n\nCode\nstr(addh)\n\n\n\n\nspc_tbl_ [3,000 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id           : num [1:3000] 1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num [1:3000] 18 22 18 26 27 21 19 27 18 25 ...\n $ gender       : chr [1:3000] \"female\" \"male\" \"female\" \"female\" ...\n $ income       : num [1:3000] 19252 11617 16189 18194 24484 ...\n $ logincome    : num [1:3000] 9.87 9.36 9.69 9.81 10.11 ...\n $ debt         : chr [1:3000] \"yesdebt\" \"nodebt\" \"yesdebt\" \"yesdebt\" ...\n $ love         : num [1:3000] 1 10 10 2 5 10 3 4 1 6 ...\n $ nocheating   : num [1:3000] 7 10 3 1 10 4 10 10 10 3 ...\n $ money        : num [1:3000] 9 3 5 3 9 9 9 7 3 8 ...\n $ paypercent   : num [1:3000] 46 56 42 82 93 42 89 55 43 53 ...\n $ logpaypercent: num [1:3000] 3.83 4.03 3.74 4.41 4.53 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_double(),\n  ..   age = col_double(),\n  ..   gender = col_character(),\n  ..   income = col_double(),\n  ..   logincome = col_double(),\n  ..   debt = col_character(),\n  ..   love = col_double(),\n  ..   nocheating = col_double(),\n  ..   money = col_double(),\n  ..   paypercent = col_double(),\n  ..   logpaypercent = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\nCode\nhead(addh, n=5)\n\n\n\n\n# A tibble: 5 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;\n\n\n\n\n(in dplyr) slice_sample(): randomly select n rows"
  },
  {
    "objectID": "R introduction.html#explore-data-3",
    "href": "R introduction.html#explore-data-3",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nTo get information about one variable, use the following functions:\n\ntable(): get a table summarizing counts\nunique(): get the unique responses for a variable\nsort(): sort the numerically (or alphabetically)\nhist(): produce a histogram\n\n\n\n\nCode\n##| output-location: fragment\n\ntable(addh$gender)\n\n\n\nfemale   male \n  1503   1497 \n\n\n\n\nCode\n##| output-location: fragment\n\ntable(addh$age)\n\n\n\n 18  19  20  21  22  23  24  25  26  27 \n306 299 300 315 303 265 301 278 296 337 \n\n\n\n\nCode\n##| output-location: fragment\n\nsort(unique(addh$age))\n\n\n [1] 18 19 20 21 22 23 24 25 26 27"
  },
  {
    "objectID": "R introduction.html#subset-data",
    "href": "R introduction.html#subset-data",
    "title": "R - An Introduction",
    "section": "Subset data",
    "text": "Subset data\n\nuse the base R subsetting syntax with [row index, column index]\n\n\n\nCode\n##| output-location: fragment\n\n# get first column, rows 1 through 3 \naddh[1:3,1]\n\n\n# A tibble: 3 × 1\n     id\n  &lt;dbl&gt;\n1     1\n2     2\n3     3\n\n\n\nExercise: How would you subset the observation in the third row and the fifth column?\n\n\n\nCode\n##| output-location: fragment\n\n# get everything besides first row\naddh[-1, ]\n\n\n# A tibble: 2,999 × 11\n      id   age gender income logincome debt     love nocheating money paypercent\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1     2    22 male   11617.      9.36 nodebt     10         10     3         56\n 2     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n 3     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n 4     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n 5     6    21 female 22353.     10.0  nodebt     10          4     9         42\n 6     7    19 male   11842.      9.38 yesdebt     3         10     9         89\n 7     8    27 female 19874.      9.90 nodebt      4         10     7         55\n 8     9    18 male   27422.     10.2  nodebt      1         10     3         43\n 9    10    25 female  9968.      9.21 yesdebt     6          3     8         53\n10    11    24 female 26354.     10.2  nodebt     10         10    10         52\n# ℹ 2,989 more rows\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction.html#exercises",
    "href": "R introduction.html#exercises",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nSuppose that you want to know a few things from the dataset:\n\nWhat’s the median income of this sample? What’s the mean age?\nOn average, do the young adults surveyed think money, no cheating, or love is more important in a relationship?\nWhat are the answer choices for debt?\n\nhint: for simple calculations, you can use the base R functions mean(), median(), and table()\n\n\n\nCode\n##| output-location: fragment\n\nmedian(addh$income)\n\n\n[1] 15127.34\n\n\nCode\nmean(addh$age)\n\n\n[1] 22.51133\n\n\nCode\nunique(addh$debt)\n\n\n[1] \"yesdebt\" \"nodebt\" \n\n\n\n\nCode\n# as a precursor to the next section, we can use dplyr to do the same thing\n\nlibrary(dplyr)\nsummary(addh,\n        mean_money = mean(money),\n        mean_nocheating = mean(nocheating),\n        mean_love = mean(love))\n\n\n\n\n       id              age           gender              income     \n Min.   :   1.0   Min.   :18.00   Length:3000        Min.   : 1008  \n 1st Qu.: 750.8   1st Qu.:20.00   Class :character   1st Qu.: 9372  \n Median :1500.5   Median :22.00   Mode  :character   Median :15127  \n Mean   :1500.5   Mean   :22.51                      Mean   :15231  \n 3rd Qu.:2250.2   3rd Qu.:25.00                      3rd Qu.:20518  \n Max.   :3000.0   Max.   :27.00                      Max.   :41700  \n                                                                    \n   logincome          debt                love          nocheating    \n Min.   : 3.292   Length:3000        Min.   : 1.000   Min.   : 1.000  \n 1st Qu.: 9.222   Class :character   1st Qu.: 5.000   1st Qu.: 5.000  \n Median : 9.650   Mode  :character   Median :10.000   Median :10.000  \n Mean   : 9.482                      Mean   : 7.707   Mean   : 7.694  \n 3rd Qu.: 9.939                      3rd Qu.:10.000   3rd Qu.:10.000  \n Max.   :10.638                      Max.   :10.000   Max.   :10.000  \n NA's   :97                                                           \n     money          paypercent     logpaypercent  \n Min.   : 1.000   Min.   :  1.00   Min.   :0.000  \n 1st Qu.: 3.000   1st Qu.: 25.00   1st Qu.:3.219  \n Median : 6.000   Median : 51.00   Median :3.932  \n Mean   : 5.569   Mean   : 50.45   Mean   :3.629  \n 3rd Qu.: 8.000   3rd Qu.: 76.00   3rd Qu.:4.331  \n Max.   :10.000   Max.   :100.00   Max.   :4.605"
  },
  {
    "objectID": "R introduction.html#data-manipulation",
    "href": "R introduction.html#data-manipulation",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\nThe dplyr package is part of the tidyverse and is used for data manipulation\ndplyr functions include:\n\nfilter(): subset rows\nselect(): subset columns\nmutate(): create new variables\nsummarise(): summarize data\narrange(): sort data\ngroup_by(): group data\n\nvery important function: pipe operator %&gt;% from the magrittr package\n\nallows you to chain functions together\n\nbasic structure of the dplyr functions\n\nfunction(dataframe, operation 1 to perform, opertaion 2 to perform,…)"
  },
  {
    "objectID": "R introduction.html#data-manipulation-1",
    "href": "R introduction.html#data-manipulation-1",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - select\n\nit can be used with operations, like\n\nstarts_with()\nends_with()\ncontains()\nmatches()\netc…\n\n\n\n\nCode\npay_variables &lt;- select(addh, contains(\"pay\"))\n\nhead(pay_variables, 5)\n\n\n\n\n# A tibble: 5 × 2\n  paypercent logpaypercent\n       &lt;dbl&gt;         &lt;dbl&gt;\n1         46          3.83\n2         56          4.03\n3         42          3.74\n4         82          4.41\n5         93          4.53"
  },
  {
    "objectID": "R introduction.html#data-manipulation-2",
    "href": "R introduction.html#data-manipulation-2",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - filter\n\nfilter rows based on conditions\n\n\n\nCode\nnodebt_income &lt;- filter(addh, debt == \"nodebt\" & income &gt;= 10000)\n\nnrow(nodebt_income)\n\n\n\n\n[1] 1096\n\n\n\n\nCode\nnomissing_income &lt;- filter(addh, !is.na(income)) # only keep obs that are NOT (!) na\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr\n\nnrow(nomissing_income)\n\n\n\n\n[1] 3000\n\n\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr"
  },
  {
    "objectID": "R introduction.html#data-manipulation-3",
    "href": "R introduction.html#data-manipulation-3",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - arrange\n\nsort data based on one or more columns\ntask: find the two observations who think money is extremely important for a relationship (10 on money) but who pay for the fewest percentage of dates (paypercent)\n\n\n\nCode\naddh %&gt;%\n  filter(money == 10) %&gt;%\n  arrange(paypercent) %&gt;%\n  head(2)\n\n\n\n\n# A tibble: 2 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   811    22 male   34161.     10.4  yesdebt    10          9    10          2\n2  2086    20 male    4816.      8.48 yesdebt    10         10    10          2\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction.html#data-manipulation-4",
    "href": "R introduction.html#data-manipulation-4",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - mutate\n\ncreate new variables added to the dataset\ntask: add a variable with the average rating for nocheating, money, and love’s importance for a relationship (sum divided by 3) and another variable that logs that rating\n\n\n\nCode\naddh&lt;- mutate(addh,\n              rateavg=(love + money + nocheating)/3,\n              rateavglog=log(rateavg))\n\nhead(addh, 5)\n\n\n\n\n# A tibble: 5 × 13\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\nCaution\n\nusing the same column name or same object name, you overwrite the original object or column"
  },
  {
    "objectID": "R introduction.html#data-manipulation-5",
    "href": "R introduction.html#data-manipulation-5",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - group_by and summarise\n\ngroup data by one or more variables and then summarize the data according to the groups\ntask: find the average “not cheating importance” for different gender\n\n\n\nCode\naddh %&gt;% \n  group_by(gender) %&gt;% \n  summarize(mean_nocheating = mean(nocheating))\n\n\n\n\n# A tibble: 2 × 2\n  gender mean_nocheating\n  &lt;chr&gt;            &lt;dbl&gt;\n1 female            7.79\n2 male              7.60\n\n\n\nSummarise has a number of operations for creating summary statistics\n\nmean(), median(), min(), max(), sd(), n(), n_distinct(), first, last, etc…"
  },
  {
    "objectID": "R introduction.html#exercises-1",
    "href": "R introduction.html#exercises-1",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nExercise one\n\nthe number of females and males by debt status\nthe percentage in each (debt x gender) category as a fraction of all observations\nthe number of distinct ratings of love’s importance in each of these debt x gender categories\n\n\n\n\nCode\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(percentage = n()/nrow(addh),\n            n_distinct_love = n_distinct(love))\n\n\n\n\n# A tibble: 4 × 4\n# Groups:   gender [2]\n  gender debt    percentage n_distinct_love\n  &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt;           &lt;int&gt;\n1 female nodebt       0.256              10\n2 female yesdebt      0.245              10\n3 male   nodebt       0.248              10\n4 male   yesdebt      0.251              10"
  },
  {
    "objectID": "R introduction.html#exercises-2",
    "href": "R introduction.html#exercises-2",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nExercise two\n\n\nGroup the data by gender and debt status first\n\nFind the average rating of love, no cheating, and money’s importance for a relationship in each group\nArrange the groups by their rating of money’s importance to a relationship from the highest to rating to the lowest rating\n\n\n\n\nCode\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(mean_love = mean(love),\n            mean_nocheating = mean(nocheating),\n            mean_money = mean(money)) %&gt;%\n  arrange(desc(mean_money))\n\n\n\n\n# A tibble: 4 × 5\n# Groups:   gender [2]\n  gender debt    mean_love mean_nocheating mean_money\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;           &lt;dbl&gt;      &lt;dbl&gt;\n1 male   yesdebt      7.76            7.72       5.66\n2 female yesdebt      7.57            7.75       5.59\n3 female nodebt       7.82            7.83       5.54\n4 male   nodebt       7.68            7.47       5.49"
  },
  {
    "objectID": "R introduction.html#recoding-variables",
    "href": "R introduction.html#recoding-variables",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nRecoding variables is a common task in data analysis for social science research\n\nconvert a variable from one format to another\ncreate a new variable based on the values of an existing variable (or of multiple existing variables)\n\nsome typical recoding tasks\n\nconvert a continuous variable to a categorical variable\nconvert a categorical variable to a continuous variable\ncreate categorical variables based on conditions\n\nOur focus\n\ndata types\nlogical statements\ncase_when() function"
  },
  {
    "objectID": "R introduction.html#recoding-variables-1",
    "href": "R introduction.html#recoding-variables-1",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nchanging data types\n\nuse the mutate() function to change the data type of a variable\n\nas.character()\nas.numeric()\nas.factor()\nas.integer()\nas.logical()\n\n\n\n\nCode\naddh2 &lt;- addh %&gt;% \n            mutate(\n               age = as.character(age),\n               debt = as.factor(debt)\n               )\n\nhead(addh2, 3)\n\n\n\n\n# A tibble: 3 × 13\n     id age   gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1 18    female 19252.      9.87 yesdebt     1          7     9         46\n2     2 22    male   11617.      9.36 nodebt     10         10     3         56\n3     3 18    female 16189.      9.69 yesdebt    10          3     5         42\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction.html#recoding-variables-2",
    "href": "R introduction.html#recoding-variables-2",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ncreate a vector\n\nuse c to string together the elements\n\n\n\nCode\nagevec&lt;- c(18, 21, 23, 25, 27, 30)\n\nagevec\n\n\n\n\n[1] 18 21 23 25 27 30\n\n\n\n\nCode\nclass(agevec)\n\n\n\n\n[1] \"numeric\"\n\n\n\n\nCode\ngendervec &lt;- c(\"male\", \"female\", \"other\", \"female\", \"female\", \"male\")\ngendervec\n\n\n\n\n[1] \"male\"   \"female\" \"other\"  \"female\" \"female\" \"male\"  \n\n\n\n\nCode\nclass(gendervec)\n\n\n\n\n[1] \"character\""
  },
  {
    "objectID": "R introduction.html#recoding-variables-3",
    "href": "R introduction.html#recoding-variables-3",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ncreate a vector\n\nElements in a vector need to be of the same type, otherwise, type coercion happens\n\n\n\nCode\nc(28, \"28\", TRUE)\n\n\n\n\n[1] \"28\"   \"28\"   \"TRUE\"\n\n\n\n\nCode\nc(28, \"28\", TRUE) %&gt;% class()\n\n\n\n\n[1] \"character\"\n\n\n\n\nCode\nc(1,2,3, TRUE, FALSE)\n\n\n\n\n[1] 1 2 3 1 0\n\n\nCode\nc(1,2,3, TRUE, FALSE) %&gt;% class()\n\n\n[1] \"numeric\""
  },
  {
    "objectID": "R introduction.html#recoding-variables-4",
    "href": "R introduction.html#recoding-variables-4",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ndata types\n\nconvert from one type to another using the following functions:\n\nas.numeric()\nas.character()\nas.factor()\n\n\n\n\nCode\nas.character(agevec)\n\n\n\n\n[1] \"18\" \"21\" \"23\" \"25\" \"27\" \"30\"\n\n\n\n\nCode\nas.numeric(gendervec)\n\n\n\n\n[1] NA NA NA NA NA NA"
  },
  {
    "objectID": "R introduction.html#recoding-variables-5",
    "href": "R introduction.html#recoding-variables-5",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ndata types\n\nVectors can have a factor type\n\nlooks like a character vector\nbut is actually a number under the hood (“labelled data”)\n\n\n\n\nCode\ngenderfactorvec&lt;- factor(gendervec,\n                         levels=c(\"male\", \"female\", \"other\"))\n\ngenderfactorvec\n\n\n\n\n[1] male   female other  female female male  \nLevels: male female other\n\n\n\n\nCode\nclass(genderfactorvec)\n\n\n\n\n[1] \"factor\"\n\n\n\n\nCode\nas.numeric(genderfactorvec)\n\n\n\n\n[1] 1 2 3 2 2 1"
  },
  {
    "objectID": "R introduction.html#recoding-variables-6",
    "href": "R introduction.html#recoding-variables-6",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ncreate a vector\n\nthere are functions to help you create the vector more efficiently:\n\nrep: repeat the same thing multiple times\nseq: create a sequence of numbers\npaste: stick together character and numeric info\nsample: for vectors where we want to randomly sample from some larger pool\n\n\n\n\nCode\nrep(1, 5)\n\n\n\n\n[1] 1 1 1 1 1\n\n\n\n\nCode\nseq(from=1997, to=2024, by=5)\n\n\n\n\n[1] 1997 2002 2007 2012 2017 2022\n\n\n\n\nCode\npaste(\"age\", seq(from=22, to=30, by=1),\n      sep=\"_\")\n\n\n\n\n[1] \"age_22\" \"age_23\" \"age_24\" \"age_25\" \"age_26\" \"age_27\" \"age_28\" \"age_29\"\n[9] \"age_30\""
  },
  {
    "objectID": "R introduction.html#recoding-variables-7",
    "href": "R introduction.html#recoding-variables-7",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nfrom vectors to dataframes\n\nOne way to create a dataframe\n\nuse bind_cols() to attach same-length vectors together as columns in a tibble\nVectors can be different types\n\n\n\n\nCode\nbind_cols(age=agevec, gender=gendervec)\n\n\n\n\n# A tibble: 6 × 2\n    age gender\n  &lt;dbl&gt; &lt;chr&gt; \n1    18 male  \n2    21 female\n3    23 other \n4    25 female\n5    27 female\n6    30 male"
  },
  {
    "objectID": "R introduction.html#exercises-3",
    "href": "R introduction.html#exercises-3",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\n\nCode\naddh2&lt;- addh %&gt;% \n            mutate(gender=factor(gender,\n                                 levels=c(\"male\", \"female\")\n                                 )\n               )\n\nstr(addh2$gender)\n\n\n\n\n Factor w/ 2 levels \"male\",\"female\": 2 1 2 2 2 2 1 2 1 2 ...\n\n\nCode\nvec1&lt;- as.character(addh2$gender)\nvec2&lt;- as.numeric(addh2$gender)\n\n\n\nconvert the variable gender in addh to a factor variable\nwhat happens if you try to convert the variable to character by using as.character after the factor conversion\nwhat happens if you try to convert the variable to number by using as.numeric after the factor conversion"
  },
  {
    "objectID": "R introduction.html#recoding-variables-8",
    "href": "R introduction.html#recoding-variables-8",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nMatrices in R\n\nA matrix is a two-dimensional array\n\nall elements must be of the same type\ncan be created using the matrix() function\ncan be created from a vector using the dim() function\n\n\n\n\nCode\nmatrix1&lt;- matrix(1:15, nrow=3, ncol=5)\n\nmatrix1\n\n\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    7   10   13\n[2,]    2    5    8   11   14\n[3,]    3    6    9   12   15"
  },
  {
    "objectID": "R introduction.html#recoding-variables-9",
    "href": "R introduction.html#recoding-variables-9",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nMatrices in R - some basic operations\n\n\nCode\ndim(matrix1)\n\n\n\n\n[1] 3 5\n\n\n\n\nCode\ncolnames(matrix1)&lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrownames(matrix1)&lt;- c(\"X\", \"Y\", \"Z\")\n\nmatrix1\n\n\n\n\n  A B C  D  E\nX 1 4 7 10 13\nY 2 5 8 11 14\nZ 3 6 9 12 15\n\n\n\n\nCode\nmatrix1[2,3]\n\n\n\n\n[1] 8\n\n\n\n\nCode\nmatrix1[2,]\n\n\n\n\n A  B  C  D  E \n 2  5  8 11 14"
  },
  {
    "objectID": "R introduction.html#recoding-variables-10",
    "href": "R introduction.html#recoding-variables-10",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nMatrices in R - some basic operations\n\n\nCode\nA&lt;- matrix(1:6, nrow=2, ncol=3)\nB&lt;- matrix(7:12, nrow=3, ncol=2)\n\n\nprint(A %*% B)\n\n\n\n\n     [,1] [,2]\n[1,]   76  103\n[2,]  100  136\n\n\nCode\nprint(B %*% A)\n\n\n     [,1] [,2] [,3]\n[1,]   27   61   95\n[2,]   30   68  106\n[3,]   33   75  117\n\n\n\n\nCode\nprint(t(A))\n\n\n\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6"
  },
  {
    "objectID": "R introduction.html#recoding-variables-11",
    "href": "R introduction.html#recoding-variables-11",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nMatrices in R - some basic operations\n\n\nCode\nC&lt;- matrix(c(2,5,3,1,3,6,2,9,5), nrow=3, ncol=3)\nprint(solve(C))\n\n\n\n\n            [,1]       [,2]        [,3]\n[1,]  1.14705882 -0.2058824 -0.08823529\n[2,] -0.05882353 -0.1176471  0.23529412\n[3,] -0.61764706  0.2647059 -0.02941176\n\n\n\n\nCode\nprint(det(C))\n\n\n\n\n[1] -34\n\n\n\n\nCode\nprint(eigen(C))\n\n\n\n\neigen() decomposition\n$values\n[1] 12.502029 -3.320941  0.818912\n\n$vectors\n           [,1]        [,2]       [,3]\n[1,] -0.1946720 -0.07646107 -0.8799055\n[2,] -0.7265653 -0.79546586  0.1194865\n[3,] -0.6589428  0.60115536  0.4598796"
  },
  {
    "objectID": "R introduction.html#recoding-variables-12",
    "href": "R introduction.html#recoding-variables-12",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nlogical statements\n\nlet us start from discussing logical operators first\nthe main logical operators used in R are:\n\n\\(==\\) (equal to)\n\\(!=\\) (not equal to)\n\\(!\\) (not)\n\\(&lt;\\) (less than)\n\\(&lt;=\\) (less than or equal to)\n\\(&gt;\\) (greater than)\n\\(&gt;=\\) (greater than or equal to)\n\\(\\&\\) (and)\n\\(|\\) (or)"
  },
  {
    "objectID": "R introduction.html#recoding-variables-13",
    "href": "R introduction.html#recoding-variables-13",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nlogical statements\n\nlogical statements are used to filter data, create new variables, and recode variables\n\nifelse() function\n\n\n\n\nCode\naddh2&lt;- addh %&gt;% \n            mutate(\n               money_over_love = ifelse(money &gt; love, 1, 0),\n               .after = id\n               )\n\nhead(addh2, 5)\n\n\n\n\n# A tibble: 5 × 14\n     id money_over_love   age gender income logincome debt     love nocheating\n  &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n1     1               1    18 female 19252.      9.87 yesdebt     1          7\n2     2               0    22 male   11617.      9.36 nodebt     10         10\n3     3               0    18 female 16189.      9.69 yesdebt    10          3\n4     4               1    26 female 18194.      9.81 yesdebt     2          1\n5     5               1    27 female 24484.     10.1  yesdebt     5         10\n# ℹ 5 more variables: money &lt;dbl&gt;, paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;,\n#   rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\n\nCode\naddh3&lt;- addh %&gt;% \n            mutate(\n               money_or_love = ifelse(money==love, \"same\",\n                                      ifelse(love &gt; money, \"love greater\", \"money greater\")),\n               .after = id\n               )\n\nhead(addh3, 5)\n\n\n\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction.html#recoding-variables-14",
    "href": "R introduction.html#recoding-variables-14",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nlogical statements\n\nuse case_when() if there are 3 or more conditions for creating a variable\nits syntax is the following:\n\ncase_when(logical condition ~ value assigned, logical condition 2 ~ value assigned. . . .default = value if does not fit other logical conditions)\n\n\n\n\nCode\naddh3&lt;- addh %&gt;% \n  mutate(\n    money_or_love = case_when(\n      money==love ~ \"same\",\n      love &gt; money ~ \"love greater\",\n      TRUE ~ \"money greater\"\n    ),\n    .after = id\n  )\n\nhead(addh3, 5)\n\n\n\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction.html#exercises-4",
    "href": "R introduction.html#exercises-4",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\ncreate a new variable called money_or_love in the addh dataset\n\nthe variable should have the following categories:\n\n“extreme” if person either codes love or money as 9 or 10\n“lovegreater” if love &gt; money\n“same” if love == money\n“moneygreater” if money &gt; love\nNA if none of the above"
  },
  {
    "objectID": "R introduction.html#recoding-variables-15",
    "href": "R introduction.html#recoding-variables-15",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ncreate a binary vector\n\n\nCode\nincome_75&lt;- quantile(addh$income)[4]\n\naddh2&lt;- addh %&gt;% \n  mutate(high_income=ifelse(income &gt; income_75, 1, 0))\n\nincome_25 &lt;- quantile(addh$income)[2]\n\naddh2&lt;- addh2 %&gt;% \n  mutate(income_level=case_when(income &lt;= income_25 ~ \"low\",\n                                income &gt;=income_75 ~\"high\", \n                                .default=\"medium\"),\n         .after = id)\n\nhead(addh2, 5)\n\n\n\n\n# A tibble: 5 × 15\n     id income_level   age gender income logincome debt    love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 medium          18 female 19252.      9.87 yesde…     1          7     9\n2     2 medium          22 male   11617.      9.36 nodebt    10         10     3\n3     3 medium          18 female 16189.      9.69 yesde…    10          3     5\n4     4 medium          26 female 18194.      9.81 yesde…     2          1     3\n5     5 high            27 female 24484.     10.1  yesde…     5         10     9\n# ℹ 5 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;, high_income &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction.html#looping",
    "href": "R introduction.html#looping",
    "title": "R - An Introduction",
    "section": "Looping",
    "text": "Looping\n\nLoops are used to repeat a block of code multiple times\n\nfor loop\nwhile loop\nrepeat loop\nbreak and next statements\n\nLoops are useful for:\n\nautomating repetitive tasks\niterating over elements in a list or vector\ncreating new variables or dataframes\nrunning simulations\n\n\n\n\nLoops can be slow in R\n\nuse vectorized functions whenever possible\nuse the apply family of functions\nuse the purrr package"
  },
  {
    "objectID": "R introduction.html#for-loops",
    "href": "R introduction.html#for-loops",
    "title": "R - An Introduction",
    "section": "For loops",
    "text": "For loops\n\nThe for loop is the most common type of loop in R\n\nit repeats a block of code a specified number of times\nit can go through every element of a vector\n\nsyntax: for (i in vector) {code to execute}\n\n\nit can iterate through a set number of elements in a vector\n\nsyntax: for (i in 1:length(vector)) {code to execute}\n\n\nThe for loop is useful for:\n\ncreating new variables\nrunning simulations\niterating over elements in a list or vector\nautomating repetitive tasks\n\n\n\n\nSteps to turn into a for loop:\n\nInitialize a vector to store results- this time it will store an entire vector of results rather than one result. Can either do: 1.1 Initialize a vector of a certain length: vec &lt;- vector(length = desired length) 1.2 Initialize an empty vector: vec &lt;- c()\nUse the for statement to tell the loop what to iterate through.\nCopy and paste the code from the single-observation case into the “meat” part of the for loop sandwich\nFor step three, make sure to add indexing where appropriate"
  },
  {
    "objectID": "R introduction.html#for-loops-sample-means",
    "href": "R introduction.html#for-loops-sample-means",
    "title": "R - An Introduction",
    "section": "For loops — sample means",
    "text": "For loops — sample means\n\n\nCode\nset.seed(123456)\n\nsample_means&lt;- numeric(length=1000)\n\nfor (i in seq_along(sample_means)) {\n  samp&lt;- sample(addh3$money, size = 800, replace=TRUE)\n  sample_means[i]&lt;- mean(samp)\n}\n\nmean(sample_means)\n\n\n\n\n[1] 5.57076\n\n\n\n\nCode\nlibrary(tidyverse)\n\nggplot(as.data.frame(sample_means), aes(sample_means)) +\n  #geom_histogram(bins=30)+\n  geom_density()+\n  geom_vline(xintercept = mean(sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means\",\n       y=\"Frequency\")+\n  theme_minimal()"
  },
  {
    "objectID": "R introduction.html#write-a-function",
    "href": "R introduction.html#write-a-function",
    "title": "R - An Introduction",
    "section": "Write a function",
    "text": "Write a function\n\nFunctions are blocks of code that can be reused\n\nthey take input arguments\nthey return output\nthey can be used in loops, apply functions, and other functions\nthey can be used to create new variables, summarize data, and run simulations\n\nthe basic structure of a function is:\n\nfunction_name &lt;- function(input arguments) {code to execute}\nreturn(output)\n\nwe now touch upon some basics\n\n\n\nWhat problem is the function trying to solve?\nWhat are the function’s arguments in this case? (as a function’s inputs)\nWhat is the function doing with those arguments?\nWhat does the function return? What class is it? (check it using R)"
  },
  {
    "objectID": "R introduction.html#functions---basics",
    "href": "R introduction.html#functions---basics",
    "title": "R - An Introduction",
    "section": "functions - basics",
    "text": "functions - basics\n\nLet us start with a simple function, z-score of a variable\n\n\n\n\nCode\nzscore&lt;- function(x) {\n  zscore&lt;- (x - mean(x))/sd(x)\n  return(zscore)\n}\n\nz_income&lt;- zscore(addh$income)\n\nhead(z_income, 10)\n\n\n\n\n [1]  0.5221372 -0.4693026  0.1243644  0.3847371  1.2013581  0.9246830\n [7] -0.4400798  0.6028251  1.5828892 -0.6833786\n\n\n\n\n\nmore complicated example\n\n\n\nCode\nsample_means&lt;- function(data, n, reps) {\n  sample_means&lt;- numeric(length=reps)\n  \n  for (i in seq_along(sample_means)) {\n    samp&lt;- sample(data, size = n, replace=TRUE)\n    sample_means[i]&lt;- mean(samp)\n  }\n  \n  return(sample_means)\n}\n\n\n\n\n\n\n\n\n\nCode\nage_sample_means&lt;- sample_means(addh$age, 500, 1000)\n\nggplot(as.data.frame(age_sample_means), aes(age_sample_means)) +\n  geom_density()+\n  geom_vline(xintercept = mean(age_sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means of Age\",\n       y=\"Frequency\")+\n  theme_bw()"
  },
  {
    "objectID": "R introduction.html#exercises-5",
    "href": "R introduction.html#exercises-5",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\ncreate a function that incorporate both sample means functions and the density plot as above\nplot the distribution of sample means for the variable love in the addh dataset using the function"
  },
  {
    "objectID": "R introduction.html#lists-and-map-functions-from-purrr-library",
    "href": "R introduction.html#lists-and-map-functions-from-purrr-library",
    "title": "R - An Introduction",
    "section": "Lists and map functions from purrr library",
    "text": "Lists and map functions from purrr library\n\nLists are a way to store multiple objects in R\n\ncan store vectors, dataframes, and other lists\ncan store objects of different classes\n\n\n\n\nCode\nlist1&lt;- list(1, c(8,9,10,11,12), data.frame(x=1:10, y=11:20))\n\nlist1\n\n\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1]  8  9 10 11 12\n\n[[3]]\n    x  y\n1   1 11\n2   2 12\n3   3 13\n4   4 14\n5   5 15\n6   6 16\n7   7 17\n8   8 18\n9   9 19\n10 10 20"
  },
  {
    "objectID": "R introduction.html#lists-and-map-functions-from-purrr-library-1",
    "href": "R introduction.html#lists-and-map-functions-from-purrr-library-1",
    "title": "R - An Introduction",
    "section": "Lists and map functions from purrr library",
    "text": "Lists and map functions from purrr library\n\nThe syntax is map(mylist, myfunction, functionoptions) and can change depending on the type of output for your analysis\n\n\n\nCode\nlibrary(purrr)\n\nmap(list1, length)\n\n\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 5\n\n[[3]]\n[1] 2\n\n\n\n\nCode\nmap(list1, class)\n\n\n\n\n[[1]]\n[1] \"numeric\"\n\n[[2]]\n[1] \"numeric\"\n\n[[3]]\n[1] \"data.frame\"\n\n\n\n\nCode\nmap(list1, summary)\n\n\n\n\n[[1]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\n[[2]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      8       9      10      10      11      12 \n\n[[3]]\n       x               y        \n Min.   : 1.00   Min.   :11.00  \n 1st Qu.: 3.25   1st Qu.:13.25  \n Median : 5.50   Median :15.50  \n Mean   : 5.50   Mean   :15.50  \n 3rd Qu.: 7.75   3rd Qu.:17.75  \n Max.   :10.00   Max.   :20.00"
  },
  {
    "objectID": "R introduction.html#tidy-approach-to-data",
    "href": "R introduction.html#tidy-approach-to-data",
    "title": "R - An Introduction",
    "section": "Tidy approach to data",
    "text": "Tidy approach to data\n\nThe tidy approach (Wickham (2014)) to data is a way to organize data in a consistent format\n\neach variable is a column\neach observation is a row\neach type of observational unit is a table\neach value is a cell\n\n\n\n\nFive common problems for messy data\n\nColumn headers are values, not variable names\nMultiple variables are stored in one column\nVariables are stored in both rows and columns\nMultiple types of observational units are stored in the same table\nA single observational unit is stored in multiple tables"
  },
  {
    "objectID": "R introduction.html#reshape-the-data",
    "href": "R introduction.html#reshape-the-data",
    "title": "R - An Introduction",
    "section": "Reshape the data",
    "text": "Reshape the data"
  },
  {
    "objectID": "R introduction.html#let-us-start-from-a-real-example",
    "href": "R introduction.html#let-us-start-from-a-real-example",
    "title": "R - An Introduction",
    "section": "let us start from a “real” example",
    "text": "let us start from a “real” example\n\n\nCode\nlibrary(tidyr)\n\nsleep_wide&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\"),\n                    day1=c(8, 7, 6),\n                    day2=c(6, 6, 5),\n                    day3=c(5, 4, 4))\n\nsleep_wide\n\n\n\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4\n\n\n\n\nCode\nsleep_long&lt;- sleep_wide %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"sleep_hours\")\n  \n\n\nsleep_long\n\n\n\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     day1            8\n2 KT     day2            6\n3 KT     day3            5\n4 Olivia day1            7\n5 Olivia day2            6\n6 Olivia day3            4\n7 Dean   day1            6\n8 Dean   day2            5\n9 Dean   day3            4\n\n\n\n\nCode\nlibrary(stringr)\n\nsleep_long %&gt;% \n  mutate(day=stringr::str_sub(day,-1, -1))\n\n\n\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     1               8\n2 KT     2               6\n3 KT     3               5\n4 Olivia 1               7\n5 Olivia 2               6\n6 Olivia 3               4\n7 Dean   1               6\n8 Dean   2               5\n9 Dean   3               4\n\n\n\n\nseparate(col = office_housing, into = c(“office”, “housing”), sep = “_“)\nsleep_united &lt;- sleep_pls_unite %&gt;% unite(col = “office”, building, floor, sep = ““)"
  },
  {
    "objectID": "R introduction.html#reshape-the-data-1",
    "href": "R introduction.html#reshape-the-data-1",
    "title": "R - An Introduction",
    "section": "Reshape the data",
    "text": "Reshape the data\nfrom long to wide\n\n\nCode\nsleep_wide2&lt;- sleep_long %&gt;% \n  pivot_wider(names_from=day,\n              values_from=sleep_hours)\n\nsleep_wide2\n\n\n\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4"
  },
  {
    "objectID": "R introduction.html#execises",
    "href": "R introduction.html#execises",
    "title": "R - An Introduction",
    "section": "Execises",
    "text": "Execises\n\n\n\nCode\nsleep_wide2&lt;- tibble(name=c(rep(\"KT\",2), rep(\"Olivia\",2), rep(\"Dean\",2)),\n                     activity=rep(c(\"sleep\", \"play\"),3),\n                     day1=c(8, 2, 7, 2, 5, 3),\n                     day2=c(6, 1, 1, 3, 6, 2),\n                     day3=c(5, 1, 4, 1, 4, 3))\n\nsleep_wide2\n\n\n\n\n# A tibble: 6 × 5\n  name   activity  day1  day2  day3\n  &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     sleep        8     6     5\n2 KT     play         2     1     1\n3 Olivia sleep        7     1     4\n4 Olivia play         2     3     1\n5 Dean   sleep        5     6     4\n6 Dean   play         3     2     3\n\n\n\n\n\nhow to express the data in a tidy format?\n\ni.e. name, day, sleep, play as columns\n\n\n\n\n\n\nCode\nsleep_tidy&lt;- sleep_wide2 %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"hours\") %&gt;% \n  mutate(day=stringr::str_sub(day, -1, -1)) %&gt;% \n  pivot_wider(names_from=activity,\n              values_from=hours)\n\nsleep_tidy\n\n\n\n\n# A tibble: 9 × 4\n  name   day   sleep  play\n  &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     1         8     2\n2 KT     2         6     1\n3 KT     3         5     1\n4 Olivia 1         7     2\n5 Olivia 2         1     3\n6 Olivia 3         4     1\n7 Dean   1         5     3\n8 Dean   2         6     2\n9 Dean   3         4     3"
  },
  {
    "objectID": "R introduction.html#export-data",
    "href": "R introduction.html#export-data",
    "title": "R - An Introduction",
    "section": "Export data",
    "text": "Export data\n\nThe last step in data analysis is to export the data\n\nsave the data in a format that can be shared with others\nsave the data in a format that can be read by other software\nsave the data in a format that can be used in other software\n\nExport command depends on the type of file you are trying to write to\n\nwrite.csv for CSV\nwrite.xslx for Excel\nwrite.dta for Stata file\netc\n\nBy default, the new file will be saved in current working directory\n\nIf you want to save it elsewhere, need to specify the path\n\n\n\n\nCode\nwrite_csv(sleep_tidy, \"sleep_tidy.csv\")\n\nlibrary(haven)\nwrite_dta(sleep_tidy, \"c:/Users/KT/Downloads/sleep_tidy.dta\")"
  },
  {
    "objectID": "R introduction.html#basic-merge",
    "href": "R introduction.html#basic-merge",
    "title": "R - An Introduction",
    "section": "Basic merge",
    "text": "Basic merge\n\nThe typical merge in R is left_join\n\nkeep all rows from “left” table even if observation doesn’t have matching row in “right” table\nthis will drop observations from the joining data when they are not matched to the “left” table\n\n\n\n\nCode\nsleep_tidy&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"May\", \"Mary\"),\n                     sleep=c(8, 7, 6, 5, 5),\n                     play=c(2, 2, 3, 3, 2))\n\nsleep_tidy2&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"Peter\", \"Susan\"),\n                      study=c(3, 4, 5, 2, 3),\n                      work=c(8, 10, 9, 6, 5))\n\nsleep_tidy3&lt;- left_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy3\n\n\n\n\n# A tibble: 5 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n\n\n\n\nCode\nsleep_tidy4&lt;- left_join(sleep_tidy2, sleep_tidy, by=\"name\")\n\nsleep_tidy4\n\n\n# A tibble: 5 × 5\n  name   study  work sleep  play\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         3     8     8     2\n2 Olivia     4    10     7     2\n3 Dean       5     9     6     3\n4 Peter      2     6    NA    NA\n5 Susan      3     5    NA    NA"
  },
  {
    "objectID": "R introduction.html#merge-data",
    "href": "R introduction.html#merge-data",
    "title": "R - An Introduction",
    "section": "Merge data",
    "text": "Merge data\n\ninner join Only keep rows of the first data.frame that have corresponding records in the second data.frame\n\n\n\n\nCode\nsleep_tidy5&lt;- inner_join(sleep_tidy, sleep_tidy2, by=\"name\", suffix=c(\"_sleep\", \"_work\"))\n\nsleep_tidy5\n\n\n\n\n# A tibble: 3 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n\n\n\n\n\nfull join Keep all rows from both dataframes, filling in missing values with NAs\n\n\n\n\n\nCode\nsleep_tidy6&lt;- full_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy6\n\n\n\n\n# A tibble: 7 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n6 Peter     NA    NA     2     6\n7 Susan     NA    NA     3     5"
  },
  {
    "objectID": "R introduction.html#ggplot2",
    "href": "R introduction.html#ggplot2",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nit starts from the grammar of graphics Wickham (2016)\n\n\n\ndata\naesthetics\ngeoms\nfacets\nstats\nscales\ncoordinates\nthemes\n\n\n\n\n\nsource: University of Melbourne"
  },
  {
    "objectID": "R introduction.html#ggplot2-1",
    "href": "R introduction.html#ggplot2-1",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nEvery ggplot2 plot has three key components:\n\ndata\nA set of aesthetic mappings between variables in the data and visual properties\nAt least one layer which describes how to render each observation\n\nLayers are usually created with a geom function"
  },
  {
    "objectID": "R introduction.html#ggplot2-2",
    "href": "R introduction.html#ggplot2-2",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nillustration\n\nUse built-in dataset from ggplot2: mpg\n\ninformation about the fuel economy of popular car models in 1999 and 2008\ncollected by the US Environmental Protection Agency\nhere are some of the variables in the dataset:\n\nmanufacturer, model, year\ndispl (engine displacement in litres)\nhwy (miles per gallon on the highway)\ncty (miles per gallon in the city)\ncyl (number of cylinders)\ndrv (f = front-wheel drive, r = rear wheel drive, 4 = 4wd)\nclass (type of car)\ntrans (type of transmission)\nfl (fuel type)\n\n\n\n\n\nThe mpg dataset is a tibble, a modern version of a data frame\nThe mpg dataset is part of the ggplot2 package\nThe mpg dataset is a tidy dataset\nThis dataset suggests many interesting questions\n\nHow are engine size and fuel economy related?\nDo certain manufacturers care more about fuel economy than others?\nHas fuel economy improved in the last ten years?\n\nList five functions that you could use to get more information about the mpg dataset\nHow can you find out what other datasets are included with ggplot2?\nApart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert cty and hwy into the European standard of l/100km?\nWhich manufacturer has the most models in this dataset?\n\nWhich model has the most variations?\nDoes your answer change if you remove the redundant specification of drive train (e.g. “pathfinder 4wd”, “a4 quattro”) from the model name?"
  },
  {
    "objectID": "R introduction.html#ggplot2-3",
    "href": "R introduction.html#ggplot2-3",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nLet us plot the relationship between engine size and fuel economy\n\n\n\n\nCode\nlibrary(ggplot2)\n\ndata(mpg)\n\nggplot(data=mpg, mapping=aes(x=displ, y=hwy)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow would you describe the relationship between displ and hwy?\n\n\n\nCode\nggplot(mpg, aes(cty, hwy)) + geom_point()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(carat, price)) + geom_point()\n\n\n\n\n\n\n\n\n\nCode\nggplot(economics, aes(date, unemploy)) + geom_line()\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(cty)) + geom_histogram()"
  },
  {
    "objectID": "R introduction.html#ggplot2-4",
    "href": "R introduction.html#ggplot2-4",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nColour, size, shape and other aesthetic attributes\n\nAesthetics are visual properties of the objects in the plot\n\ncolour, size, shape, linetype, fill, alpha\n\nAesthetics can be mapped to variables in the data\n\naes(colour=variable)\naes(size=variable)\naes(shape=variable)\naes(linetype=variable)\naes(fill=variable)\naes(alpha=variable)"
  },
  {
    "objectID": "R introduction.html#ggplot2-5",
    "href": "R introduction.html#ggplot2-5",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nColour, size, shape and other aesthetic attributes\n\n\nCode\nggplot(mpg, aes(displ, hwy, colour=class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(trans, hwy, colour=class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 takes care of the details of converting data (e.g., ‘f’, ‘r’, ‘4’) into aesthetics (e.g., ‘red’, ‘yellow’, ‘green’) with a scale\n\nThere is one scale for each aesthetic mapping in a plot.\nThe scale is also responsible for creating a guide, an axis or legend, that allows you to read the plot, converting aesthetic values back into data values\n\nThe scale functions are:\n\nscale_colour_manual()\nscale_size_manual()\nscale_shape_manual()\nscale_linetype_manual()\nscale_fill_manual()\nscale_alpha_manual()\n\nWhat happens when you map them to continuous values? What about categorical values? What happens when you use more than one aesthetic in a plot?"
  },
  {
    "objectID": "R introduction.html#ggplot2-6",
    "href": "R introduction.html#ggplot2-6",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2"
  },
  {
    "objectID": "R introduction.html#labels",
    "href": "R introduction.html#labels",
    "title": "R - An Introduction",
    "section": "labels",
    "text": "labels\n\nLabels are important for making your plot understandable\n\nxlab() and ylab() functions\nlabs() function\n\n\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(color=class)) +\n  labs(x=\"Engine size (litres)\",\n       y=\"Highway fuel economy (miles per gallon)\",\n       title=\"Relationship between engine size and fuel economy\",\n       color=\"Car type\",\n       caption=\"Source: mpg dataset\")+\n  theme_bw()"
  },
  {
    "objectID": "R introduction.html#ggplot2-7",
    "href": "R introduction.html#ggplot2-7",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nggthemes\n\n\nCode\nlibrary(ggthemes)\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(color=class)) +\n  labs(x=\"Engine size (litres)\",\n       y=\"Highway fuel economy (miles per gallon)\",\n       title=\"Relationship between engine size and fuel economy\",\n       color=\"Car type\",\n       caption=\"Source: mpg dataset\")+\n  theme_economist()+\n  scale_color_tableau()"
  },
  {
    "objectID": "R introduction.html#ggplot2-8",
    "href": "R introduction.html#ggplot2-8",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nFacets\n\nFacets allow you to create multiple plots that each display a subset of the data\n\nfacet_wrap() creates a grid of plots\nfacet_grid() creates a matrix of plots\n\n\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  facet_wrap(~class)"
  },
  {
    "objectID": "R introduction.html#ggplot2-9",
    "href": "R introduction.html#ggplot2-9",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nPlot geoms\n\nGeoms are the geometric objects that represent the data in the plot\n\ngeom_point() creates a scatterplot\ngeom_smooth() creates a smoothed line plot\ngeom_histogram() creates a histogram\ngeom_boxplot() creates a boxplot\ngeom_bar() creates a bar plot\ngeom_line() creates a line plot\ngeom_vline() adds a vertical line to the plot\ngeom_hline() adds a horizontal line to the plot\ngeom_abline() adds a diagonal line to the plot"
  },
  {
    "objectID": "R introduction.html#ggplot2-10",
    "href": "R introduction.html#ggplot2-10",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nAdding a smoother to a plot\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  geom_smooth(span=0.3)"
  },
  {
    "objectID": "R introduction.html#ggplot2-11",
    "href": "R introduction.html#ggplot2-11",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nBoxplots and related plots\n\nBoxplots, violin and jittered points are useful for visualizing the distribution of a continuous variable\n\n\n\nCode\n##| layout-ncol: 3\n##| fig-width: 4\n\nlibrary(ggpubr)\n\njitter&lt;- ggplot(mpg, aes(drv, hwy)) + geom_jitter()\nboxplot&lt;- ggplot(mpg, aes(drv, hwy)) + geom_boxplot()\nviolin&lt;- ggplot(mpg, aes(drv, hwy)) + geom_violin()\n\nggarrange(jitter, boxplot, violin, ncol=3)\n\n\n\n\n\n\n\n\n\n\n\n\n\nA boxplot is a type of visual shorthand for measures of position (percentiles) that describe a distribution\n\nIt is also useful for identifying potential outliers in the data\nVisual points that display observations that fall more than 1.5 times the IQR from either edge of the box\nThese outlying points are unusual so are plotted individually\n\nA violin plot is a combination of a boxplot and a kernel density plot\n\nIt shows the distribution of the data, the median, and the interquartile range\nIt is useful for comparing the distribution of a continuous variable across different categories\n\nA jittered point plot is useful for visualizing the distribution of a continuous variable across different categories\n\nIt is useful for identifying potential outliers in the data"
  },
  {
    "objectID": "R introduction.html#ggplot2-12",
    "href": "R introduction.html#ggplot2-12",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nBoxplots\n\n\nCode\nggplot(mpg, aes(class, hwy)) +\n  geom_boxplot()+\n  labs(title=\"Highway fuel economy by car type\",\n       x=\"Car type\",\n       y=\"Highway fuel economy (miles per gallon)\")+\n  coord_flip()+\n  theme_economist()"
  },
  {
    "objectID": "R introduction.html#ggplot2-13",
    "href": "R introduction.html#ggplot2-13",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nBar plots\n\nBar plots are useful for visualizing the distribution of a categorical variable\n\n\n\n\n\nCode\nggplot(mpg, aes(class)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(class, fill=drv)) +\n  geom_bar()"
  },
  {
    "objectID": "R introduction.html#ggplot2-14",
    "href": "R introduction.html#ggplot2-14",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nHistograms and density plots\n\nHistograms and density plots are useful for visualizing the distribution of a continuous variable\n\n\n\n\n\nCode\nggplot(mpg, aes(hwy)) +\n  geom_histogram() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(hwy)) +\n  geom_density()"
  },
  {
    "objectID": "R introduction.html#ggplot2-15",
    "href": "R introduction.html#ggplot2-15",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nHistograms and density plots\n\n\nCode\nden&lt;- ggplot(mpg, aes(displ, colour = drv)) + \n  geom_density(linewidth=0.8)\n  \nhist&lt;- ggplot(mpg, aes(displ, fill = drv)) + \n  geom_histogram(binwidth = 0.5) + \n  facet_wrap(~drv, ncol = 1)\n\nggarrange(den, hist, ncol=2)"
  },
  {
    "objectID": "R introduction.html#ggplot2-16",
    "href": "R introduction.html#ggplot2-16",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nggsave - save the graph as an image file\n\n\nCode\nggsave(filename=\"mpg_displ.png\",width=6, height=4)"
  },
  {
    "objectID": "R introduction.html#final-example---toy-imports-to-the-us-from-1996-2005",
    "href": "R introduction.html#final-example---toy-imports-to-the-us-from-1996-2005",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\nit is drawn from Scott (2021)\n\n\n\nCode\nlibrary(tidyverse)\n\ntoy_imports &lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/toyimports.csv\")\n\nhead(toy_imports)\n\n\n\n\n# A tibble: 6 × 8\n  partner  year partner_name       product product_name US_report_import pop2000\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;                   &lt;dbl&gt;   &lt;dbl&gt;\n1 ARE      1998 United Arab Emira…  950341 \"Toys repre…             1.06  3.25e6\n2 ARE      2000 United Arab Emira…  950349 \"Toys repre…            12.0   3.25e6\n3 ARE      2003 United Arab Emira…  950349 \"Toys repre…             4.65  3.25e6\n4 ARE      2005 United Arab Emira…  950320 \"Reduced-si…            49.2   3.25e6\n5 ARG      1996 Argentina           950341 \"Toys repre…             0     3.69e7\n6 ARG      1996 Argentina           950310 \"Electric t…            10.8   3.69e7\n# ℹ 1 more variable: region &lt;dbl&gt;\n\n\n\n\nTask: make a graph showing total toy imports over time for the U.S.’s top 5 trading partners by total dollar value of toys imported"
  },
  {
    "objectID": "R introduction.html#final-example---toy-imports-to-the-us-from-1996-2005-1",
    "href": "R introduction.html#final-example---toy-imports-to-the-us-from-1996-2005-1",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\n\nCode\ncountry_total&lt;- toy_imports %&gt;% \n  group_by(partner_name) %&gt;%\n  summarize(total_import=sum(US_report_import)) %&gt;%\n  arrange(desc(total_import)) %&gt;%\n  head(5)\n\ncountry_total\n\n\n\n\n# A tibble: 5 × 2\n  partner_name     total_import\n  &lt;chr&gt;                   &lt;dbl&gt;\n1 China               26842305.\n2 Denmark              1034990.\n3 Canada                572309.\n4 Hong Kong, China      545186.\n5 Switzerland           400969.\n\n\n\n\nthe total dollar value of toys imported to the U.S. (US_report_import, in multiples of $1,000) in a specific product category from a specific country in a specific year\nThe product categories have unique numerical codes (product) as well as product names exciting enough to quicken the heart of any toy-loving child (“Parts and accessories :– Other,” “Toys representing animal or non-human figures,” and so on\nGroup all the observations by trading partner (the partner_name variable)\nFor each partner, calculate total dollar value by summing toy imports (US_report_import) across all categories and years\nArrange the partners by total dollar value"
  },
  {
    "objectID": "R introduction.html#final-example---toy-imports-to-the-us-from-1996-2005-2",
    "href": "R introduction.html#final-example---toy-imports-to-the-us-from-1996-2005-2",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\n\nCode\n#| out-width: 100%\n\ntop5_partners=c(\"China\", \"Denmark\", \"Canada\", \"Hong Kong, China\", \"Switzerland\")\n\noptions(scipen = 999)\n\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(plotly)\n\np &lt;- toy_imports %&gt;% \n  filter(partner_name %in% top5_partners) %&gt;%\n  group_by(year, partner_name) %&gt;%\n  summarize(total_import=sum(US_report_import)) %&gt;% \n  ggplot(aes(year, total_import, color=partner_name)) +\n  geom_line()+\n  labs(title=\"Toy imports from the U.S.'s top-5 partners, 1996-2005\",\n       x=\"Year\",\n       y=\"Dollar value of imports (log scale)\",\n       color=\"Import Region\")+\n  scale_x_continuous(breaks=1996:2005)+\n  theme_economist()+ \n  scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n              labels = trans_format(\"log10\", math_format(10^.x)))\n\nggplotly(p)"
  },
  {
    "objectID": "R introduction.html#extra-gapminder-data",
    "href": "R introduction.html#extra-gapminder-data",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(gapminder)\n\ndata(gapminder)\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;%\n  mutate(median_lifeExp = median(lifeExp)) %&gt;%\n  ggplot(aes(year, median_lifeExp, color=continent)) +\n  geom_line()+\n  labs(title=\"Life expectancy by continent and year\",\n       x=\"Year\",\n       y=\"Life expectancy\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\") +\n  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1 / 4)"
  },
  {
    "objectID": "R introduction.html#extra-gapminder-data-1",
    "href": "R introduction.html#extra-gapminder-data-1",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\nthis is from BBC style\n\n\nCode\n# install.packages('devtools')\n#devtools::install_github('bbc/bbplot'))\n\nlibrary(ggpubr)\n\nsource(\"https://raw.githubusercontent.com/kwan-MSDA/R/main/bbc_style.R\")\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;%\n  summarize(median_lifeExp = median(lifeExp)) %&gt;%\n  ggplot(aes(year, median_lifeExp, color=continent)) +\n  geom_line()+\n  labs(title=\"Life expectancy by continent and year\",\n       x=\"Year\",\n       y=\"Life expectancy\")+\n  bbc_style()\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource 1: https://bbc.github.io/rcookbook/#do_something_else_entirely\nsource 2: https://github.com/bbc/bbplot?tab=readme-ov-file\nsource 3: https://noeliagorod.com/2020/07/23/bbc-visual-and-data-journalism-cookbook-for-r-graphics/"
  },
  {
    "objectID": "R introduction.html#extra-gapminder-data-2",
    "href": "R introduction.html#extra-gapminder-data-2",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(\"ggalt\")\nlibrary(\"tidyr\")\n \nlibrary(gapminder)\n\ndumbbell_df &lt;- gapminder %&gt;%\n  filter(year == 1967 | year == 2007) %&gt;%\n  select(country, year, lifeExp) %&gt;%\n  spread(year, lifeExp) %&gt;%\n  mutate(gap = `2007` - `1967`) %&gt;%\n  arrange(desc(gap)) %&gt;%\n  head(10)\n \n#Make plot\nggplot(dumbbell_df, aes(x = `1967`, xend = `2007`, y = reorder(country, gap), group = country)) + \n  geom_dumbbell(colour = \"#dddddd\",\n                size = 3,\n                colour_x = \"#FAAB18\",\n                colour_xend = \"#1380A1\") +\n  bbc_style() + \n  labs(title=\"We're living longer\",\n       subtitle=\"Biggest life expectancy rise, 1967-2007\")"
  },
  {
    "objectID": "R introduction.html#extra-gapminder-data-3",
    "href": "R introduction.html#extra-gapminder-data-3",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ngapminder %&gt;% \n  filter(year==2007) %&gt;%\n  mutate(country=factor(country, levels=unique(country))) %&gt;%\n  arrange(desc(pop)) %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) +\n  geom_point(alpha=0.6, shape=21, color=\"black\")+\n  scale_size(range=c(.1, 24), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  theme_ipsum()+\n  theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent in 2007\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")"
  },
  {
    "objectID": "R introduction.html#extra-gapminder-data-4",
    "href": "R introduction.html#extra-gapminder-data-4",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(gganimate)\n\ngapminder %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent, frame=year)) +\n  geom_point(alpha=0.6, shape=21, color=\"black\")+\n  scale_size(range=c(.1, 22), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  theme_ipsum()+\n  theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent in {frame_time}\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")+\n  geom_text(data=gapminder %&gt;%  filter(pop &gt;1e+8), aes(label=country), size=5, nudge_x=0.1, nudge_y=0.1)+\n  transition_time(year)+\n  enter_fade()+\n  exit_fade()\n\n\n\n\n\n\n\n\n\n\n\nCode\nanim_save(\"gapminder_gganimate.gif\")"
  },
  {
    "objectID": "R introduction.html#extra-gapminder-data-5",
    "href": "R introduction.html#extra-gapminder-data-5",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\nsource\n\n\nCode\nlibrary(plotly)\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ng&lt;- crosstalk::SharedData$new(gapminder %&gt;% \n                              mutate(country=factor(country, levels=unique(country))) %&gt;%\n                              arrange(desc(pop)),\n                              ~ continent)\ngg&lt;- g %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, fill=continent, frame=year)) +\n  geom_point(aes(size=pop, alpha=0.6, ids=country))+\n  scale_size(range=c(.1, 24), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  scale_alpha(range=c(0.6, 1), guide=FALSE)+\n  theme_ipsum()+\n  # theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent between 1952-2007\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")\n\nggplotly(gg, height = 500, width = 800)"
  },
  {
    "objectID": "R introduction.html#references",
    "href": "R introduction.html#references",
    "title": "R - An Introduction",
    "section": "References",
    "text": "References\n\n\nScott, James. 2021. “Data Science in r: A Gentle Introduction.” 2021. https://bookdown.org/jgscott/DSGI/.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10): 1–23.\n\n\n———. 2016. Ggplot2 : Elegrant Graphics for Data Analysis. Second edition. Use r! Switzerland: Springer.\n\n\n———. 2019. Advanced r. Second edition. The r Series. Boca Raton, FL: CRC Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2023. R for Data Science : Import, Tidy, Transform, Visualize, and Model Data. Second edition. Beijing: O’Reilly."
  },
  {
    "objectID": "R_introduction.html#introduction",
    "href": "R_introduction.html#introduction",
    "title": "R - An Introduction",
    "section": "",
    "text": "R is a programming language and software environment for statistical computing and graphics\n\nwidely used in academia and industry\nfor data analysis, statistical modeling, and visualization\nfor machine learning, data mining, and big data analysis\nfor reproducible research and scientific computing\n\nR is an implementation of the S programming language\n\nS was developed at Bell Laboratories by John Chambers and colleagues\nS was designed for data analysis and graphics\nS was the precursor to the commercial statistical software package S-PLUS"
  },
  {
    "objectID": "R_introduction.html#introduction-1",
    "href": "R_introduction.html#introduction-1",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand\n\nnamed partly after the first names of the first two R authors and partly as a play on the name of S\na GNU project, a free software movement initiated by Richard Stallman in 1983\nfreely available under the GNU General Public License\na large number of packages available"
  },
  {
    "objectID": "R_introduction.html#introduction-2",
    "href": "R_introduction.html#introduction-2",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\ntidyverse is a collection of R packages designed for data science\n\ntidyverse packages share an underlying design philosophy, grammar, and data structures\ntidyverse packages are designed to work together\n\nfocus on the tidyverse\n\nmainly because it is easier to understand\ndo most data manipulation we need in social science research with these tools\n\nA good reference for tidyverse is the book by Wickham (2019)\n\nR for Data Science"
  },
  {
    "objectID": "R_introduction.html#introduction-3",
    "href": "R_introduction.html#introduction-3",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nfor quick reference, visit Posit Primers on Data Science\n\nR Basics\nTransform Tables\nVisualize Data\n\nfor more specific topics, visit Data Science\n\nData Wrangling\nData Visualization\nModelling\n\nwe use cover some base R functions first, then move on to the tidyverse"
  },
  {
    "objectID": "R_introduction.html#loading-data",
    "href": "R_introduction.html#loading-data",
    "title": "R - An Introduction",
    "section": "Loading Data",
    "text": "Loading Data\n\nThe first step in any data analysis is to load the data into R\n\nthe data can be in a variety of formats\nthe most common formats are CSV, Excel, and SPSS\nthe readr package is part of the tidyverse and is used to read data into R\n\n\n\n\n\n\n\nCode\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n# check your working directory\ngetwd()\n\n## read data file\n\naddh&lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/addhealthfake.csv\")"
  },
  {
    "objectID": "R_introduction.html#add-health-dataset",
    "href": "R_introduction.html#add-health-dataset",
    "title": "R - An Introduction",
    "section": "Add health dataset",
    "text": "Add health dataset\n\nHere are some details about the dataset\n\nThe National Longitudinal Study of Adolescent to Adult Health (Add Health)\na longitudinal study of a nationally representative sample of adolescents in grades 7-12 in the United States during the 1994-95 school year (Wave I)\nThe Add Health cohort has been followed into young adulthood with four in-home interviews for Wave I-IV by 2008\n\nthe Wave V conducted during 2016-2018 included a mixed-mode survey\n\nrespondents’ social, economic, psychological, and physical well-being\n\nalong with contextual data on the family, neighborhood, community, school, friendships, peer groups, and romantic relationships\n\nstudy developmental trajectories of health and risk behaviors throughout the life course"
  },
  {
    "objectID": "R_introduction.html#explore-data",
    "href": "R_introduction.html#explore-data",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nThe dataset used here is a subset of the Add Health dataset\n\n3000 observations and 11 variables\n\nAfter the dataset is loaded in R, it is important to explore the data to understand its structure and content\n\ncheck the data types of each variable\ncheck the dimensions of the data\nlook at a few rows and variables\n\n\n\n\nCode\nclass(addh$age)\n\n\n\n\n[1] \"numeric\"\n\n\nCode\nclass(addh$gender)\n\n\n[1] \"character\"\n\n\nCode\nclass(addh$love)\n\n\n[1] \"numeric\""
  },
  {
    "objectID": "R_introduction.html#explore-data-1",
    "href": "R_introduction.html#explore-data-1",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nFor more information on the dataset,\n\nsummary(): numeric summaries\nstr(): data types and sample data\ncolnames() or names(): names of columns/variables\ndim(): dimensions\nView(): view all data in RStudio viewer\nhead(): top 10 rows\ntail(): bottom 10 rows"
  },
  {
    "objectID": "R_introduction.html#explore-data-2",
    "href": "R_introduction.html#explore-data-2",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\n\nCode\nstr(addh)\n\n\n\n\nspc_tbl_ [3,000 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id           : num [1:3000] 1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num [1:3000] 18 22 18 26 27 21 19 27 18 25 ...\n $ gender       : chr [1:3000] \"female\" \"male\" \"female\" \"female\" ...\n $ income       : num [1:3000] 19252 11617 16189 18194 24484 ...\n $ logincome    : num [1:3000] 9.87 9.36 9.69 9.81 10.11 ...\n $ debt         : chr [1:3000] \"yesdebt\" \"nodebt\" \"yesdebt\" \"yesdebt\" ...\n $ love         : num [1:3000] 1 10 10 2 5 10 3 4 1 6 ...\n $ nocheating   : num [1:3000] 7 10 3 1 10 4 10 10 10 3 ...\n $ money        : num [1:3000] 9 3 5 3 9 9 9 7 3 8 ...\n $ paypercent   : num [1:3000] 46 56 42 82 93 42 89 55 43 53 ...\n $ logpaypercent: num [1:3000] 3.83 4.03 3.74 4.41 4.53 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_double(),\n  ..   age = col_double(),\n  ..   gender = col_character(),\n  ..   income = col_double(),\n  ..   logincome = col_double(),\n  ..   debt = col_character(),\n  ..   love = col_double(),\n  ..   nocheating = col_double(),\n  ..   money = col_double(),\n  ..   paypercent = col_double(),\n  ..   logpaypercent = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\nCode\nhead(addh, n=5)\n\n\n\n\n# A tibble: 5 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;\n\n\n\n\n(in dplyr) slice_sample(): randomly select n rows"
  },
  {
    "objectID": "R_introduction.html#explore-data-3",
    "href": "R_introduction.html#explore-data-3",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nTo get information about one variable, use the following functions:\n\ntable(): get a table summarizing counts\nunique(): get the unique responses for a variable\nsort(): sort the numerically (or alphabetically)\nhist(): produce a histogram\n\n\n\n\nCode\n##| output-location: fragment\n\ntable(addh$gender)\n\n\n\nfemale   male \n  1503   1497 \n\n\n\n\nCode\n##| output-location: fragment\n\ntable(addh$age)\n\n\n\n 18  19  20  21  22  23  24  25  26  27 \n306 299 300 315 303 265 301 278 296 337 \n\n\n\n\nCode\n##| output-location: fragment\n\nsort(unique(addh$age))\n\n\n [1] 18 19 20 21 22 23 24 25 26 27"
  },
  {
    "objectID": "R_introduction.html#subset-data",
    "href": "R_introduction.html#subset-data",
    "title": "R - An Introduction",
    "section": "Subset data",
    "text": "Subset data\n\nuse the base R subsetting syntax with [row index, column index]\n\n\n\nCode\n##| output-location: fragment\n\n# get first column, rows 1 through 3 \naddh[1:3,1]\n\n\n# A tibble: 3 × 1\n     id\n  &lt;dbl&gt;\n1     1\n2     2\n3     3\n\n\n\nExercise: How would you subset the observation in the third row and the fifth column?\n\n\n\nCode\n##| output-location: fragment\n\n# get everything besides first row\naddh[-1, ]\n\n\n# A tibble: 2,999 × 11\n      id   age gender income logincome debt     love nocheating money paypercent\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1     2    22 male   11617.      9.36 nodebt     10         10     3         56\n 2     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n 3     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n 4     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n 5     6    21 female 22353.     10.0  nodebt     10          4     9         42\n 6     7    19 male   11842.      9.38 yesdebt     3         10     9         89\n 7     8    27 female 19874.      9.90 nodebt      4         10     7         55\n 8     9    18 male   27422.     10.2  nodebt      1         10     3         43\n 9    10    25 female  9968.      9.21 yesdebt     6          3     8         53\n10    11    24 female 26354.     10.2  nodebt     10         10    10         52\n# ℹ 2,989 more rows\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;"
  },
  {
    "objectID": "R_introduction.html#exercises",
    "href": "R_introduction.html#exercises",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nSuppose that you want to know a few things from the dataset:\n\nWhat’s the median income of this sample? What’s the mean age?\nOn average, do the young adults surveyed think money, no cheating, or love is more important in a relationship?\nWhat are the answer choices for debt?\n\nhint: for simple calculations, you can use the base R functions mean(), median(), and table()\n\n\n\nCode\n##| output-location: fragment\n\nmedian(addh$income)\n\n\n[1] 15127.34\n\n\nCode\nmean(addh$age)\n\n\n[1] 22.51133\n\n\nCode\nunique(addh$debt)\n\n\n[1] \"yesdebt\" \"nodebt\" \n\n\n\n\nCode\n# as a precursor to the next section, we can use dplyr to do the same thing\n\nlibrary(dplyr)\nsummary(addh,\n        mean_money = mean(money),\n        mean_nocheating = mean(nocheating),\n        mean_love = mean(love))\n\n\n\n\n       id              age           gender              income     \n Min.   :   1.0   Min.   :18.00   Length:3000        Min.   : 1008  \n 1st Qu.: 750.8   1st Qu.:20.00   Class :character   1st Qu.: 9372  \n Median :1500.5   Median :22.00   Mode  :character   Median :15127  \n Mean   :1500.5   Mean   :22.51                      Mean   :15231  \n 3rd Qu.:2250.2   3rd Qu.:25.00                      3rd Qu.:20518  \n Max.   :3000.0   Max.   :27.00                      Max.   :41700  \n                                                                    \n   logincome          debt                love          nocheating    \n Min.   : 3.292   Length:3000        Min.   : 1.000   Min.   : 1.000  \n 1st Qu.: 9.222   Class :character   1st Qu.: 5.000   1st Qu.: 5.000  \n Median : 9.650   Mode  :character   Median :10.000   Median :10.000  \n Mean   : 9.482                      Mean   : 7.707   Mean   : 7.694  \n 3rd Qu.: 9.939                      3rd Qu.:10.000   3rd Qu.:10.000  \n Max.   :10.638                      Max.   :10.000   Max.   :10.000  \n NA's   :97                                                           \n     money          paypercent     logpaypercent  \n Min.   : 1.000   Min.   :  1.00   Min.   :0.000  \n 1st Qu.: 3.000   1st Qu.: 25.00   1st Qu.:3.219  \n Median : 6.000   Median : 51.00   Median :3.932  \n Mean   : 5.569   Mean   : 50.45   Mean   :3.629  \n 3rd Qu.: 8.000   3rd Qu.: 76.00   3rd Qu.:4.331  \n Max.   :10.000   Max.   :100.00   Max.   :4.605"
  },
  {
    "objectID": "R_introduction.html#data-manipulation",
    "href": "R_introduction.html#data-manipulation",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\nThe dplyr package is part of the tidyverse and is used for data manipulation\ndplyr functions include:\n\nfilter(): subset rows\nselect(): subset columns\nmutate(): create new variables\nsummarise(): summarize data\narrange(): sort data\ngroup_by(): group data\n\nvery important function: pipe operator %&gt;% from the magrittr package\n\nallows you to chain functions together\n\nbasic structure of the dplyr functions\n\nfunction(dataframe, operation 1 to perform, opertaion 2 to perform,…)"
  },
  {
    "objectID": "R_introduction.html#data-manipulation-1",
    "href": "R_introduction.html#data-manipulation-1",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - select\n\nit can be used with operations, like\n\nstarts_with()\nends_with()\ncontains()\nmatches()\netc…\n\n\n\n\nCode\npay_variables &lt;- select(addh, contains(\"pay\"))\n\nhead(pay_variables, 5)\n\n\n\n\n# A tibble: 5 × 2\n  paypercent logpaypercent\n       &lt;dbl&gt;         &lt;dbl&gt;\n1         46          3.83\n2         56          4.03\n3         42          3.74\n4         82          4.41\n5         93          4.53"
  },
  {
    "objectID": "R_introduction.html#data-manipulation-2",
    "href": "R_introduction.html#data-manipulation-2",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - filter\n\nfilter rows based on conditions\n\n\n\nCode\nnodebt_income &lt;- filter(addh, debt == \"nodebt\" & income &gt;= 10000)\n\nnrow(nodebt_income)\n\n\n\n\n[1] 1096\n\n\n\n\nCode\nnomissing_income &lt;- filter(addh, !is.na(income)) # only keep obs that are NOT (!) na\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr\n\nnrow(nomissing_income)\n\n\n\n\n[1] 3000\n\n\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr"
  },
  {
    "objectID": "R_introduction.html#data-manipulation-3",
    "href": "R_introduction.html#data-manipulation-3",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - arrange\n\nsort data based on one or more columns\ntask: find the two observations who think money is extremely important for a relationship (10 on money) but who pay for the fewest percentage of dates (paypercent)\n\n\n\nCode\naddh %&gt;%\n  filter(money == 10) %&gt;%\n  arrange(paypercent) %&gt;%\n  head(2)\n\n\n\n\n# A tibble: 2 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   811    22 male   34161.     10.4  yesdebt    10          9    10          2\n2  2086    20 male    4816.      8.48 yesdebt    10         10    10          2\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;"
  },
  {
    "objectID": "R_introduction.html#data-manipulation-4",
    "href": "R_introduction.html#data-manipulation-4",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - mutate\n\ncreate new variables added to the dataset\ntask: add a variable with the average rating for nocheating, money, and love’s importance for a relationship (sum divided by 3) and another variable that logs that rating\n\n\n\nCode\naddh&lt;- mutate(addh,\n              rateavg=(love + money + nocheating)/3,\n              rateavglog=log(rateavg))\n\nhead(addh, 5)\n\n\n\n\n# A tibble: 5 × 13\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\nCaution\n\nusing the same column name or same object name, you overwrite the original object or column"
  },
  {
    "objectID": "R_introduction.html#data-manipulation-5",
    "href": "R_introduction.html#data-manipulation-5",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\ndplyr - group_by and summarise\n\ngroup data by one or more variables and then summarize the data according to the groups\ntask: find the average “not cheating importance” for different gender\n\n\n\nCode\naddh %&gt;% \n  group_by(gender) %&gt;% \n  summarize(mean_nocheating = mean(nocheating))\n\n\n\n\n# A tibble: 2 × 2\n  gender mean_nocheating\n  &lt;chr&gt;            &lt;dbl&gt;\n1 female            7.79\n2 male              7.60\n\n\n\nSummarise has a number of operations for creating summary statistics\n\nmean(), median(), min(), max(), sd(), n(), n_distinct(), first, last, etc…"
  },
  {
    "objectID": "R_introduction.html#exercises-1",
    "href": "R_introduction.html#exercises-1",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nExercise one\n\nthe number of females and males by debt status\nthe percentage in each (debt x gender) category as a fraction of all observations\nthe number of distinct ratings of love’s importance in each of these debt x gender categories\n\n\n\n\nCode\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(percentage = n()/nrow(addh),\n            n_distinct_love = n_distinct(love))\n\n\n\n\n# A tibble: 4 × 4\n# Groups:   gender [2]\n  gender debt    percentage n_distinct_love\n  &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt;           &lt;int&gt;\n1 female nodebt       0.256              10\n2 female yesdebt      0.245              10\n3 male   nodebt       0.248              10\n4 male   yesdebt      0.251              10"
  },
  {
    "objectID": "R_introduction.html#exercises-2",
    "href": "R_introduction.html#exercises-2",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nExercise two\n\n\nGroup the data by gender and debt status first\n\nFind the average rating of love, no cheating, and money’s importance for a relationship in each group\nArrange the groups by their rating of money’s importance to a relationship from the highest to rating to the lowest rating\n\n\n\n\nCode\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(mean_love = mean(love),\n            mean_nocheating = mean(nocheating),\n            mean_money = mean(money)) %&gt;%\n  arrange(desc(mean_money))\n\n\n\n\n# A tibble: 4 × 5\n# Groups:   gender [2]\n  gender debt    mean_love mean_nocheating mean_money\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;           &lt;dbl&gt;      &lt;dbl&gt;\n1 male   yesdebt      7.76            7.72       5.66\n2 female yesdebt      7.57            7.75       5.59\n3 female nodebt       7.82            7.83       5.54\n4 male   nodebt       7.68            7.47       5.49"
  },
  {
    "objectID": "R_introduction.html#recoding-variables",
    "href": "R_introduction.html#recoding-variables",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nRecoding variables is a common task in data analysis for social science research\n\nconvert a variable from one format to another\ncreate a new variable based on the values of an existing variable (or of multiple existing variables)\n\nsome typical recoding tasks\n\nconvert a continuous variable to a categorical variable\nconvert a categorical variable to a continuous variable\ncreate categorical variables based on conditions\n\nOur focus\n\ndata types\nlogical statements\ncase_when() function"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-1",
    "href": "R_introduction.html#recoding-variables-1",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nchanging data types\n\nuse the mutate() function to change the data type of a variable\n\nas.character()\nas.numeric()\nas.factor()\nas.integer()\nas.logical()\n\n\n\n\nCode\naddh2 &lt;- addh %&gt;% \n            mutate(\n               age = as.character(age),\n               debt = as.factor(debt)\n               )\n\nhead(addh2, 3)\n\n\n\n\n# A tibble: 3 × 13\n     id age   gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1 18    female 19252.      9.87 yesdebt     1          7     9         46\n2     2 22    male   11617.      9.36 nodebt     10         10     3         56\n3     3 18    female 16189.      9.69 yesdebt    10          3     5         42\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-2",
    "href": "R_introduction.html#recoding-variables-2",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ncreate a vector\n\nuse c to string together the elements\n\n\n\nCode\nagevec&lt;- c(18, 21, 23, 25, 27, 30)\n\nagevec\n\n\n\n\n[1] 18 21 23 25 27 30\n\n\n\n\nCode\nclass(agevec)\n\n\n\n\n[1] \"numeric\"\n\n\n\n\nCode\ngendervec &lt;- c(\"male\", \"female\", \"other\", \"female\", \"female\", \"male\")\ngendervec\n\n\n\n\n[1] \"male\"   \"female\" \"other\"  \"female\" \"female\" \"male\"  \n\n\n\n\nCode\nclass(gendervec)\n\n\n\n\n[1] \"character\""
  },
  {
    "objectID": "R_introduction.html#recoding-variables-3",
    "href": "R_introduction.html#recoding-variables-3",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ncreate a vector\n\nElements in a vector need to be of the same type, otherwise, type coercion happens\n\n\n\nCode\nc(28, \"28\", TRUE)\n\n\n\n\n[1] \"28\"   \"28\"   \"TRUE\"\n\n\n\n\nCode\nc(28, \"28\", TRUE) %&gt;% class()\n\n\n\n\n[1] \"character\"\n\n\n\n\nCode\nc(1,2,3, TRUE, FALSE)\n\n\n\n\n[1] 1 2 3 1 0\n\n\nCode\nc(1,2,3, TRUE, FALSE) %&gt;% class()\n\n\n[1] \"numeric\""
  },
  {
    "objectID": "R_introduction.html#recoding-variables-4",
    "href": "R_introduction.html#recoding-variables-4",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ndata types\n\nconvert from one type to another using the following functions:\n\nas.numeric()\nas.character()\nas.factor()\n\n\n\n\nCode\nas.character(agevec)\n\n\n\n\n[1] \"18\" \"21\" \"23\" \"25\" \"27\" \"30\"\n\n\n\n\nCode\nas.numeric(gendervec)\n\n\n\n\n[1] NA NA NA NA NA NA"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-5",
    "href": "R_introduction.html#recoding-variables-5",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ndata types\n\nVectors can have a factor type\n\nlooks like a character vector\nbut is actually a number under the hood (“labelled data”)\n\n\n\n\nCode\ngenderfactorvec&lt;- factor(gendervec,\n                         levels=c(\"male\", \"female\", \"other\"))\n\ngenderfactorvec\n\n\n\n\n[1] male   female other  female female male  \nLevels: male female other\n\n\n\n\nCode\nclass(genderfactorvec)\n\n\n\n\n[1] \"factor\"\n\n\n\n\nCode\nas.numeric(genderfactorvec)\n\n\n\n\n[1] 1 2 3 2 2 1"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-6",
    "href": "R_introduction.html#recoding-variables-6",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ncreate a vector\n\nthere are functions to help you create the vector more efficiently:\n\nrep: repeat the same thing multiple times\nseq: create a sequence of numbers\npaste: stick together character and numeric info\nsample: for vectors where we want to randomly sample from some larger pool\n\n\n\n\nCode\nrep(1, 5)\n\n\n\n\n[1] 1 1 1 1 1\n\n\n\n\nCode\nseq(from=1997, to=2024, by=5)\n\n\n\n\n[1] 1997 2002 2007 2012 2017 2022\n\n\n\n\nCode\npaste(\"age\", seq(from=22, to=30, by=1),\n      sep=\"_\")\n\n\n\n\n[1] \"age_22\" \"age_23\" \"age_24\" \"age_25\" \"age_26\" \"age_27\" \"age_28\" \"age_29\"\n[9] \"age_30\""
  },
  {
    "objectID": "R_introduction.html#recoding-variables-7",
    "href": "R_introduction.html#recoding-variables-7",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nfrom vectors to dataframes\n\nOne way to create a dataframe\n\nuse bind_cols() to attach same-length vectors together as columns in a tibble\nVectors can be different types\n\n\n\n\nCode\nbind_cols(age=agevec, gender=gendervec)\n\n\n\n\n# A tibble: 6 × 2\n    age gender\n  &lt;dbl&gt; &lt;chr&gt; \n1    18 male  \n2    21 female\n3    23 other \n4    25 female\n5    27 female\n6    30 male"
  },
  {
    "objectID": "R_introduction.html#exercises-3",
    "href": "R_introduction.html#exercises-3",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\n\nCode\naddh2&lt;- addh %&gt;% \n            mutate(gender=factor(gender,\n                                 levels=c(\"male\", \"female\")\n                                 )\n               )\n\nstr(addh2$gender)\n\n\n\n\n Factor w/ 2 levels \"male\",\"female\": 2 1 2 2 2 2 1 2 1 2 ...\n\n\nCode\nvec1&lt;- as.character(addh2$gender)\nvec2&lt;- as.numeric(addh2$gender)\n\n\n\nconvert the variable gender in addh to a factor variable\nwhat happens if you try to convert the variable to character by using as.character after the factor conversion\nwhat happens if you try to convert the variable to number by using as.numeric after the factor conversion"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-8",
    "href": "R_introduction.html#recoding-variables-8",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nMatrices in R\n\nA matrix is a two-dimensional array\n\nall elements must be of the same type\ncan be created using the matrix() function\ncan be created from a vector using the dim() function\n\n\n\n\nCode\nmatrix1&lt;- matrix(1:15, nrow=3, ncol=5)\n\nmatrix1\n\n\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    7   10   13\n[2,]    2    5    8   11   14\n[3,]    3    6    9   12   15"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-9",
    "href": "R_introduction.html#recoding-variables-9",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nMatrices in R - some basic operations\n\n\nCode\ndim(matrix1)\n\n\n\n\n[1] 3 5\n\n\n\n\nCode\ncolnames(matrix1)&lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrownames(matrix1)&lt;- c(\"X\", \"Y\", \"Z\")\n\nmatrix1\n\n\n\n\n  A B C  D  E\nX 1 4 7 10 13\nY 2 5 8 11 14\nZ 3 6 9 12 15\n\n\n\n\nCode\nmatrix1[2,3]\n\n\n\n\n[1] 8\n\n\n\n\nCode\nmatrix1[2,]\n\n\n\n\n A  B  C  D  E \n 2  5  8 11 14"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-10",
    "href": "R_introduction.html#recoding-variables-10",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nMatrices in R - some basic operations\n\n\nCode\nA&lt;- matrix(1:6, nrow=2, ncol=3)\nB&lt;- matrix(7:12, nrow=3, ncol=2)\n\n\nprint(A %*% B)\n\n\n\n\n     [,1] [,2]\n[1,]   76  103\n[2,]  100  136\n\n\nCode\nprint(B %*% A)\n\n\n     [,1] [,2] [,3]\n[1,]   27   61   95\n[2,]   30   68  106\n[3,]   33   75  117\n\n\n\n\nCode\nprint(t(A))\n\n\n\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-11",
    "href": "R_introduction.html#recoding-variables-11",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nMatrices in R - some basic operations\n\n\nCode\nC&lt;- matrix(c(2,5,3,1,3,6,2,9,5), nrow=3, ncol=3)\nprint(solve(C))\n\n\n\n\n            [,1]       [,2]        [,3]\n[1,]  1.14705882 -0.2058824 -0.08823529\n[2,] -0.05882353 -0.1176471  0.23529412\n[3,] -0.61764706  0.2647059 -0.02941176\n\n\n\n\nCode\nprint(det(C))\n\n\n\n\n[1] -34\n\n\n\n\nCode\nprint(eigen(C))\n\n\n\n\neigen() decomposition\n$values\n[1] 12.502029 -3.320941  0.818912\n\n$vectors\n           [,1]        [,2]       [,3]\n[1,] -0.1946720 -0.07646107 -0.8799055\n[2,] -0.7265653 -0.79546586  0.1194865\n[3,] -0.6589428  0.60115536  0.4598796"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-12",
    "href": "R_introduction.html#recoding-variables-12",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nlogical statements\n\nlet us start from discussing logical operators first\nthe main logical operators used in R are:\n\n\\(==\\) (equal to)\n\\(!=\\) (not equal to)\n\\(!\\) (not)\n\\(&lt;\\) (less than)\n\\(&lt;=\\) (less than or equal to)\n\\(&gt;\\) (greater than)\n\\(&gt;=\\) (greater than or equal to)\n\\(\\&\\) (and)\n\\(|\\) (or)"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-13",
    "href": "R_introduction.html#recoding-variables-13",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nlogical statements\n\nlogical statements are used to filter data, create new variables, and recode variables\n\nifelse() function\n\n\n\n\nCode\naddh2&lt;- addh %&gt;% \n            mutate(\n               money_over_love = ifelse(money &gt; love, 1, 0),\n               .after = id\n               )\n\nhead(addh2, 5)\n\n\n\n\n# A tibble: 5 × 14\n     id money_over_love   age gender income logincome debt     love nocheating\n  &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n1     1               1    18 female 19252.      9.87 yesdebt     1          7\n2     2               0    22 male   11617.      9.36 nodebt     10         10\n3     3               0    18 female 16189.      9.69 yesdebt    10          3\n4     4               1    26 female 18194.      9.81 yesdebt     2          1\n5     5               1    27 female 24484.     10.1  yesdebt     5         10\n# ℹ 5 more variables: money &lt;dbl&gt;, paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;,\n#   rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\n\nCode\naddh3&lt;- addh %&gt;% \n            mutate(\n               money_or_love = ifelse(money==love, \"same\",\n                                      ifelse(love &gt; money, \"love greater\", \"money greater\")),\n               .after = id\n               )\n\nhead(addh3, 5)\n\n\n\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-14",
    "href": "R_introduction.html#recoding-variables-14",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\nlogical statements\n\nuse case_when() if there are 3 or more conditions for creating a variable\nits syntax is the following:\n\ncase_when(logical condition ~ value assigned, logical condition 2 ~ value assigned. . . .default = value if does not fit other logical conditions)\n\n\n\n\nCode\naddh3&lt;- addh %&gt;% \n  mutate(\n    money_or_love = case_when(\n      money==love ~ \"same\",\n      love &gt; money ~ \"love greater\",\n      TRUE ~ \"money greater\"\n    ),\n    .after = id\n  )\n\nhead(addh3, 5)\n\n\n\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R_introduction.html#exercises-4",
    "href": "R_introduction.html#exercises-4",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\ncreate a new variable called money_or_love in the addh dataset\n\nthe variable should have the following categories:\n\n“extreme” if person either codes love or money as 9 or 10\n“lovegreater” if love &gt; money\n“same” if love == money\n“moneygreater” if money &gt; love\nNA if none of the above"
  },
  {
    "objectID": "R_introduction.html#recoding-variables-15",
    "href": "R_introduction.html#recoding-variables-15",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\ncreate a binary vector\n\n\nCode\nincome_75&lt;- quantile(addh$income)[4]\n\naddh2&lt;- addh %&gt;% \n  mutate(high_income=ifelse(income &gt; income_75, 1, 0))\n\nincome_25 &lt;- quantile(addh$income)[2]\n\naddh2&lt;- addh2 %&gt;% \n  mutate(income_level=case_when(income &lt;= income_25 ~ \"low\",\n                                income &gt;=income_75 ~\"high\", \n                                .default=\"medium\"),\n         .after = id)\n\nhead(addh2, 5)\n\n\n\n\n# A tibble: 5 × 15\n     id income_level   age gender income logincome debt    love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 medium          18 female 19252.      9.87 yesde…     1          7     9\n2     2 medium          22 male   11617.      9.36 nodebt    10         10     3\n3     3 medium          18 female 16189.      9.69 yesde…    10          3     5\n4     4 medium          26 female 18194.      9.81 yesde…     2          1     3\n5     5 high            27 female 24484.     10.1  yesde…     5         10     9\n# ℹ 5 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;, high_income &lt;dbl&gt;"
  },
  {
    "objectID": "R_introduction.html#looping",
    "href": "R_introduction.html#looping",
    "title": "R - An Introduction",
    "section": "Looping",
    "text": "Looping\n\nLoops are used to repeat a block of code multiple times\n\nfor loop\nwhile loop\nrepeat loop\nbreak and next statements\n\nLoops are useful for:\n\nautomating repetitive tasks\niterating over elements in a list or vector\ncreating new variables or dataframes\nrunning simulations\n\n\n\n\nLoops can be slow in R\n\nuse vectorized functions whenever possible\nuse the apply family of functions\nuse the purrr package"
  },
  {
    "objectID": "R_introduction.html#for-loops",
    "href": "R_introduction.html#for-loops",
    "title": "R - An Introduction",
    "section": "For loops",
    "text": "For loops\n\nThe for loop is the most common type of loop in R\n\nit repeats a block of code a specified number of times\nit can go through every element of a vector\n\nsyntax: for (i in vector) {code to execute}\n\n\nit can iterate through a set number of elements in a vector\n\nsyntax: for (i in 1:length(vector)) {code to execute}\n\n\nThe for loop is useful for:\n\ncreating new variables\nrunning simulations\niterating over elements in a list or vector\nautomating repetitive tasks\n\n\n\n\nSteps to turn into a for loop:\n\nInitialize a vector to store results- this time it will store an entire vector of results rather than one result. Can either do: 1.1 Initialize a vector of a certain length: vec &lt;- vector(length = desired length) 1.2 Initialize an empty vector: vec &lt;- c()\nUse the for statement to tell the loop what to iterate through.\nCopy and paste the code from the single-observation case into the “meat” part of the for loop sandwich\nFor step three, make sure to add indexing where appropriate"
  },
  {
    "objectID": "R_introduction.html#for-loops-sample-means",
    "href": "R_introduction.html#for-loops-sample-means",
    "title": "R - An Introduction",
    "section": "For loops — sample means",
    "text": "For loops — sample means\n\n\nCode\nset.seed(123456)\n\nsample_means&lt;- numeric(length=1000)\n\nfor (i in seq_along(sample_means)) {\n  samp&lt;- sample(addh3$money, size = 800, replace=TRUE)\n  sample_means[i]&lt;- mean(samp)\n}\n\nmean(sample_means)\n\n\n\n\n[1] 5.57076\n\n\n\n\nCode\nlibrary(tidyverse)\n\nggplot(as.data.frame(sample_means), aes(sample_means)) +\n  #geom_histogram(bins=30)+\n  geom_density()+\n  geom_vline(xintercept = mean(sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means\",\n       y=\"Frequency\")+\n  theme_minimal()"
  },
  {
    "objectID": "R_introduction.html#write-a-function",
    "href": "R_introduction.html#write-a-function",
    "title": "R - An Introduction",
    "section": "Write a function",
    "text": "Write a function\n\nFunctions are blocks of code that can be reused\n\nthey take input arguments\nthey return output\nthey can be used in loops, apply functions, and other functions\nthey can be used to create new variables, summarize data, and run simulations\n\nthe basic structure of a function is:\n\nfunction_name &lt;- function(input arguments) {code to execute}\nreturn(output)\n\nwe now touch upon some basics\n\n\n\nWhat problem is the function trying to solve?\nWhat are the function’s arguments in this case? (as a function’s inputs)\nWhat is the function doing with those arguments?\nWhat does the function return? What class is it? (check it using R)"
  },
  {
    "objectID": "R_introduction.html#functions---basics",
    "href": "R_introduction.html#functions---basics",
    "title": "R - An Introduction",
    "section": "functions - basics",
    "text": "functions - basics\n\nLet us start with a simple function, z-score of a variable\n\n\n\n\nCode\nzscore&lt;- function(x) {\n  zscore&lt;- (x - mean(x))/sd(x)\n  return(zscore)\n}\n\nz_income&lt;- zscore(addh$income)\n\nhead(z_income, 10)\n\n\n\n\n [1]  0.5221372 -0.4693026  0.1243644  0.3847371  1.2013581  0.9246830\n [7] -0.4400798  0.6028251  1.5828892 -0.6833786\n\n\n\n\n\nmore complicated example\n\n\n\nCode\nsample_means&lt;- function(data, n, reps) {\n  sample_means&lt;- numeric(length=reps)\n  \n  for (i in seq_along(sample_means)) {\n    samp&lt;- sample(data, size = n, replace=TRUE)\n    sample_means[i]&lt;- mean(samp)\n  }\n  \n  return(sample_means)\n}\n\n\n\n\n\n\n\n\n\nCode\nage_sample_means&lt;- sample_means(addh$age, 500, 1000)\n\nggplot(as.data.frame(age_sample_means), aes(age_sample_means)) +\n  geom_density()+\n  geom_vline(xintercept = mean(age_sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means of Age\",\n       y=\"Frequency\")+\n  theme_bw()"
  },
  {
    "objectID": "R_introduction.html#exercises-5",
    "href": "R_introduction.html#exercises-5",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\ncreate a function that incorporate both sample means functions and the density plot as above\nplot the distribution of sample means for the variable love in the addh dataset using the function"
  },
  {
    "objectID": "R_introduction.html#lists-and-map-functions-from-purrr-library",
    "href": "R_introduction.html#lists-and-map-functions-from-purrr-library",
    "title": "R - An Introduction",
    "section": "Lists and map functions from purrr library",
    "text": "Lists and map functions from purrr library\n\nLists are a way to store multiple objects in R\n\ncan store vectors, dataframes, and other lists\ncan store objects of different classes\n\n\n\n\nCode\nlist1&lt;- list(1, c(8,9,10,11,12), data.frame(x=1:10, y=11:20))\n\nlist1\n\n\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1]  8  9 10 11 12\n\n[[3]]\n    x  y\n1   1 11\n2   2 12\n3   3 13\n4   4 14\n5   5 15\n6   6 16\n7   7 17\n8   8 18\n9   9 19\n10 10 20"
  },
  {
    "objectID": "R_introduction.html#lists-and-map-functions-from-purrr-library-1",
    "href": "R_introduction.html#lists-and-map-functions-from-purrr-library-1",
    "title": "R - An Introduction",
    "section": "Lists and map functions from purrr library",
    "text": "Lists and map functions from purrr library\n\nThe syntax is map(mylist, myfunction, functionoptions) and can change depending on the type of output for your analysis\n\n\n\nCode\nlibrary(purrr)\n\nmap(list1, length)\n\n\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 5\n\n[[3]]\n[1] 2\n\n\n\n\nCode\nmap(list1, class)\n\n\n\n\n[[1]]\n[1] \"numeric\"\n\n[[2]]\n[1] \"numeric\"\n\n[[3]]\n[1] \"data.frame\"\n\n\n\n\nCode\nmap(list1, summary)\n\n\n\n\n[[1]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\n[[2]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      8       9      10      10      11      12 \n\n[[3]]\n       x               y        \n Min.   : 1.00   Min.   :11.00  \n 1st Qu.: 3.25   1st Qu.:13.25  \n Median : 5.50   Median :15.50  \n Mean   : 5.50   Mean   :15.50  \n 3rd Qu.: 7.75   3rd Qu.:17.75  \n Max.   :10.00   Max.   :20.00"
  },
  {
    "objectID": "R_introduction.html#tidy-approach-to-data",
    "href": "R_introduction.html#tidy-approach-to-data",
    "title": "R - An Introduction",
    "section": "Tidy approach to data",
    "text": "Tidy approach to data\n\nThe tidy approach (Wickham (2014)) to data is a way to organize data in a consistent format\n\neach variable is a column\neach observation is a row\neach type of observational unit is a table\neach value is a cell\n\n\n\n\nFive common problems for messy data\n\nColumn headers are values, not variable names\nMultiple variables are stored in one column\nVariables are stored in both rows and columns\nMultiple types of observational units are stored in the same table\nA single observational unit is stored in multiple tables"
  },
  {
    "objectID": "R_introduction.html#reshape-the-data",
    "href": "R_introduction.html#reshape-the-data",
    "title": "R - An Introduction",
    "section": "Reshape the data",
    "text": "Reshape the data"
  },
  {
    "objectID": "R_introduction.html#let-us-start-from-a-real-example",
    "href": "R_introduction.html#let-us-start-from-a-real-example",
    "title": "R - An Introduction",
    "section": "let us start from a “real” example",
    "text": "let us start from a “real” example\n\n\nCode\nlibrary(tidyr)\n\nsleep_wide&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\"),\n                    day1=c(8, 7, 6),\n                    day2=c(6, 6, 5),\n                    day3=c(5, 4, 4))\n\nsleep_wide\n\n\n\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4\n\n\n\n\nCode\nsleep_long&lt;- sleep_wide %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"sleep_hours\")\n  \n\n\nsleep_long\n\n\n\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     day1            8\n2 KT     day2            6\n3 KT     day3            5\n4 Olivia day1            7\n5 Olivia day2            6\n6 Olivia day3            4\n7 Dean   day1            6\n8 Dean   day2            5\n9 Dean   day3            4\n\n\n\n\nCode\nlibrary(stringr)\n\nsleep_long %&gt;% \n  mutate(day=stringr::str_sub(day,-1, -1))\n\n\n\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     1               8\n2 KT     2               6\n3 KT     3               5\n4 Olivia 1               7\n5 Olivia 2               6\n6 Olivia 3               4\n7 Dean   1               6\n8 Dean   2               5\n9 Dean   3               4\n\n\n\n\nseparate(col = office_housing, into = c(“office”, “housing”), sep = “_“)\nsleep_united &lt;- sleep_pls_unite %&gt;% unite(col = “office”, building, floor, sep = ““)"
  },
  {
    "objectID": "R_introduction.html#reshape-the-data-1",
    "href": "R_introduction.html#reshape-the-data-1",
    "title": "R - An Introduction",
    "section": "Reshape the data",
    "text": "Reshape the data\nfrom long to wide\n\n\nCode\nsleep_wide2&lt;- sleep_long %&gt;% \n  pivot_wider(names_from=day,\n              values_from=sleep_hours)\n\nsleep_wide2\n\n\n\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4"
  },
  {
    "objectID": "R_introduction.html#execises",
    "href": "R_introduction.html#execises",
    "title": "R - An Introduction",
    "section": "Execises",
    "text": "Execises\n\n\n\nCode\nsleep_wide2&lt;- tibble(name=c(rep(\"KT\",2), rep(\"Olivia\",2), rep(\"Dean\",2)),\n                     activity=rep(c(\"sleep\", \"play\"),3),\n                     day1=c(8, 2, 7, 2, 5, 3),\n                     day2=c(6, 1, 1, 3, 6, 2),\n                     day3=c(5, 1, 4, 1, 4, 3))\n\nsleep_wide2\n\n\n\n\n# A tibble: 6 × 5\n  name   activity  day1  day2  day3\n  &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     sleep        8     6     5\n2 KT     play         2     1     1\n3 Olivia sleep        7     1     4\n4 Olivia play         2     3     1\n5 Dean   sleep        5     6     4\n6 Dean   play         3     2     3\n\n\n\n\n\nhow to express the data in a tidy format?\n\ni.e. name, day, sleep, play as columns\n\n\n\n\n\n\nCode\nsleep_tidy&lt;- sleep_wide2 %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"hours\") %&gt;% \n  mutate(day=stringr::str_sub(day, -1, -1)) %&gt;% \n  pivot_wider(names_from=activity,\n              values_from=hours)\n\nsleep_tidy\n\n\n\n\n# A tibble: 9 × 4\n  name   day   sleep  play\n  &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     1         8     2\n2 KT     2         6     1\n3 KT     3         5     1\n4 Olivia 1         7     2\n5 Olivia 2         1     3\n6 Olivia 3         4     1\n7 Dean   1         5     3\n8 Dean   2         6     2\n9 Dean   3         4     3"
  },
  {
    "objectID": "R_introduction.html#export-data",
    "href": "R_introduction.html#export-data",
    "title": "R - An Introduction",
    "section": "Export data",
    "text": "Export data\n\nThe last step in data analysis is to export the data\n\nsave the data in a format that can be shared with others\nsave the data in a format that can be read by other software\nsave the data in a format that can be used in other software\n\nExport command depends on the type of file you are trying to write to\n\nwrite.csv for CSV\nwrite.xslx for Excel\nwrite.dta for Stata file\netc\n\nBy default, the new file will be saved in current working directory\n\nIf you want to save it elsewhere, need to specify the path\n\n\n\n\nCode\nwrite_csv(sleep_tidy, \"sleep_tidy.csv\")\n\nlibrary(haven)\nwrite_dta(sleep_tidy, \"c:/Users/KT/Downloads/sleep_tidy.dta\")"
  },
  {
    "objectID": "R_introduction.html#basic-merge",
    "href": "R_introduction.html#basic-merge",
    "title": "R - An Introduction",
    "section": "Basic merge",
    "text": "Basic merge\n\nThe typical merge in R is left_join\n\nkeep all rows from “left” table even if observation doesn’t have matching row in “right” table\nthis will drop observations from the joining data when they are not matched to the “left” table\n\n\n\n\nCode\nsleep_tidy&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"May\", \"Mary\"),\n                     sleep=c(8, 7, 6, 5, 5),\n                     play=c(2, 2, 3, 3, 2))\n\nsleep_tidy2&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"Peter\", \"Susan\"),\n                      study=c(3, 4, 5, 2, 3),\n                      work=c(8, 10, 9, 6, 5))\n\nsleep_tidy3&lt;- left_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy3\n\n\n\n\n# A tibble: 5 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n\n\n\n\nCode\nsleep_tidy4&lt;- left_join(sleep_tidy2, sleep_tidy, by=\"name\")\n\nsleep_tidy4\n\n\n# A tibble: 5 × 5\n  name   study  work sleep  play\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         3     8     8     2\n2 Olivia     4    10     7     2\n3 Dean       5     9     6     3\n4 Peter      2     6    NA    NA\n5 Susan      3     5    NA    NA"
  },
  {
    "objectID": "R_introduction.html#merge-data",
    "href": "R_introduction.html#merge-data",
    "title": "R - An Introduction",
    "section": "Merge data",
    "text": "Merge data\n\ninner join Only keep rows of the first data.frame that have corresponding records in the second data.frame\n\n\n\n\nCode\nsleep_tidy5&lt;- inner_join(sleep_tidy, sleep_tidy2, by=\"name\", suffix=c(\"_sleep\", \"_work\"))\n\nsleep_tidy5\n\n\n\n\n# A tibble: 3 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n\n\n\n\n\nfull join Keep all rows from both dataframes, filling in missing values with NAs\n\n\n\n\n\nCode\nsleep_tidy6&lt;- full_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy6\n\n\n\n\n# A tibble: 7 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n6 Peter     NA    NA     2     6\n7 Susan     NA    NA     3     5"
  },
  {
    "objectID": "R_introduction.html#ggplot2",
    "href": "R_introduction.html#ggplot2",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nit starts from the grammar of graphics Wickham (2016)\n\n\n\ndata\naesthetics\ngeoms\nfacets\nstats\nscales\ncoordinates\nthemes\n\n\n\n\n\nsource: University of Melbourne"
  },
  {
    "objectID": "R_introduction.html#ggplot2-1",
    "href": "R_introduction.html#ggplot2-1",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nEvery ggplot2 plot has three key components:\n\ndata\nA set of aesthetic mappings between variables in the data and visual properties\nAt least one layer which describes how to render each observation\n\nLayers are usually created with a geom function"
  },
  {
    "objectID": "R_introduction.html#ggplot2-2",
    "href": "R_introduction.html#ggplot2-2",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nillustration\n\nUse built-in dataset from ggplot2: mpg\n\ninformation about the fuel economy of popular car models in 1999 and 2008\ncollected by the US Environmental Protection Agency\nhere are some of the variables in the dataset:\n\nmanufacturer, model, year\ndispl (engine displacement in litres)\nhwy (miles per gallon on the highway)\ncty (miles per gallon in the city)\ncyl (number of cylinders)\ndrv (f = front-wheel drive, r = rear wheel drive, 4 = 4wd)\nclass (type of car)\ntrans (type of transmission)\nfl (fuel type)\n\n\n\n\n\nThe mpg dataset is a tibble, a modern version of a data frame\nThe mpg dataset is part of the ggplot2 package\nThe mpg dataset is a tidy dataset\nThis dataset suggests many interesting questions\n\nHow are engine size and fuel economy related?\nDo certain manufacturers care more about fuel economy than others?\nHas fuel economy improved in the last ten years?\n\nList five functions that you could use to get more information about the mpg dataset\nHow can you find out what other datasets are included with ggplot2?\nApart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert cty and hwy into the European standard of l/100km?\nWhich manufacturer has the most models in this dataset?\n\nWhich model has the most variations?\nDoes your answer change if you remove the redundant specification of drive train (e.g. “pathfinder 4wd”, “a4 quattro”) from the model name?"
  },
  {
    "objectID": "R_introduction.html#ggplot2-3",
    "href": "R_introduction.html#ggplot2-3",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nLet us plot the relationship between engine size and fuel economy\n\n\n\n\nCode\nlibrary(ggplot2)\n\ndata(mpg)\n\nggplot(data=mpg, mapping=aes(x=displ, y=hwy)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow would you describe the relationship between displ and hwy?\n\n\n\nCode\nggplot(mpg, aes(cty, hwy)) + geom_point()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(carat, price)) + geom_point()\n\n\n\n\n\n\n\n\n\nCode\nggplot(economics, aes(date, unemploy)) + geom_line()\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(cty)) + geom_histogram()"
  },
  {
    "objectID": "R_introduction.html#ggplot2-4",
    "href": "R_introduction.html#ggplot2-4",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nColour, size, shape and other aesthetic attributes\n\nAesthetics are visual properties of the objects in the plot\n\ncolour, size, shape, linetype, fill, alpha\n\nAesthetics can be mapped to variables in the data\n\naes(colour=variable)\naes(size=variable)\naes(shape=variable)\naes(linetype=variable)\naes(fill=variable)\naes(alpha=variable)"
  },
  {
    "objectID": "R_introduction.html#ggplot2-5",
    "href": "R_introduction.html#ggplot2-5",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nColour, size, shape and other aesthetic attributes\n\n\nCode\nggplot(mpg, aes(displ, hwy, colour=class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(trans, hwy, colour=class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 takes care of the details of converting data (e.g., ‘f’, ‘r’, ‘4’) into aesthetics (e.g., ‘red’, ‘yellow’, ‘green’) with a scale\n\nThere is one scale for each aesthetic mapping in a plot.\nThe scale is also responsible for creating a guide, an axis or legend, that allows you to read the plot, converting aesthetic values back into data values\n\nThe scale functions are:\n\nscale_colour_manual()\nscale_size_manual()\nscale_shape_manual()\nscale_linetype_manual()\nscale_fill_manual()\nscale_alpha_manual()\n\nWhat happens when you map them to continuous values? What about categorical values? What happens when you use more than one aesthetic in a plot?"
  },
  {
    "objectID": "R_introduction.html#ggplot2-6",
    "href": "R_introduction.html#ggplot2-6",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2"
  },
  {
    "objectID": "R_introduction.html#labels",
    "href": "R_introduction.html#labels",
    "title": "R - An Introduction",
    "section": "labels",
    "text": "labels\n\nLabels are important for making your plot understandable\n\nxlab() and ylab() functions\nlabs() function\n\n\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(color=class)) +\n  labs(x=\"Engine size (litres)\",\n       y=\"Highway fuel economy (miles per gallon)\",\n       title=\"Relationship between engine size and fuel economy\",\n       color=\"Car type\",\n       caption=\"Source: mpg dataset\")+\n  theme_bw()"
  },
  {
    "objectID": "R_introduction.html#ggplot2-7",
    "href": "R_introduction.html#ggplot2-7",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nggthemes\n\n\nCode\nlibrary(ggthemes)\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(color=class)) +\n  labs(x=\"Engine size (litres)\",\n       y=\"Highway fuel economy (miles per gallon)\",\n       title=\"Relationship between engine size and fuel economy\",\n       color=\"Car type\",\n       caption=\"Source: mpg dataset\")+\n  theme_economist()+\n  scale_color_tableau()"
  },
  {
    "objectID": "R_introduction.html#ggplot2-8",
    "href": "R_introduction.html#ggplot2-8",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nFacets\n\nFacets allow you to create multiple plots that each display a subset of the data\n\nfacet_wrap() creates a grid of plots\nfacet_grid() creates a matrix of plots\n\n\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  facet_wrap(~class)"
  },
  {
    "objectID": "R_introduction.html#ggplot2-9",
    "href": "R_introduction.html#ggplot2-9",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nPlot geoms\n\nGeoms are the geometric objects that represent the data in the plot\n\ngeom_point() creates a scatterplot\ngeom_smooth() creates a smoothed line plot\ngeom_histogram() creates a histogram\ngeom_boxplot() creates a boxplot\ngeom_bar() creates a bar plot\ngeom_line() creates a line plot\ngeom_vline() adds a vertical line to the plot\ngeom_hline() adds a horizontal line to the plot\ngeom_abline() adds a diagonal line to the plot"
  },
  {
    "objectID": "R_introduction.html#ggplot2-10",
    "href": "R_introduction.html#ggplot2-10",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nAdding a smoother to a plot\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  geom_smooth(span=0.3)"
  },
  {
    "objectID": "R_introduction.html#ggplot2-11",
    "href": "R_introduction.html#ggplot2-11",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nBoxplots and related plots\n\nBoxplots, violin and jittered points are useful for visualizing the distribution of a continuous variable\n\n\n\nCode\n##| layout-ncol: 3\n##| fig-width: 4\n\nlibrary(ggpubr)\n\njitter&lt;- ggplot(mpg, aes(drv, hwy)) + geom_jitter()\nboxplot&lt;- ggplot(mpg, aes(drv, hwy)) + geom_boxplot()\nviolin&lt;- ggplot(mpg, aes(drv, hwy)) + geom_violin()\n\nggarrange(jitter, boxplot, violin, ncol=3)\n\n\n\n\n\n\n\n\n\n\n\n\n\nA boxplot is a type of visual shorthand for measures of position (percentiles) that describe a distribution\n\nIt is also useful for identifying potential outliers in the data\nVisual points that display observations that fall more than 1.5 times the IQR from either edge of the box\nThese outlying points are unusual so are plotted individually\n\nA violin plot is a combination of a boxplot and a kernel density plot\n\nIt shows the distribution of the data, the median, and the interquartile range\nIt is useful for comparing the distribution of a continuous variable across different categories\n\nA jittered point plot is useful for visualizing the distribution of a continuous variable across different categories\n\nIt is useful for identifying potential outliers in the data"
  },
  {
    "objectID": "R_introduction.html#ggplot2-12",
    "href": "R_introduction.html#ggplot2-12",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nBoxplots\n\n\nCode\nggplot(mpg, aes(class, hwy)) +\n  geom_boxplot()+\n  labs(title=\"Highway fuel economy by car type\",\n       x=\"Car type\",\n       y=\"Highway fuel economy (miles per gallon)\")+\n  coord_flip()+\n  theme_economist()"
  },
  {
    "objectID": "R_introduction.html#ggplot2-13",
    "href": "R_introduction.html#ggplot2-13",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nBar plots\n\nBar plots are useful for visualizing the distribution of a categorical variable\n\n\n\n\n\nCode\nggplot(mpg, aes(class)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(class, fill=drv)) +\n  geom_bar()"
  },
  {
    "objectID": "R_introduction.html#ggplot2-14",
    "href": "R_introduction.html#ggplot2-14",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nHistograms and density plots\n\nHistograms and density plots are useful for visualizing the distribution of a continuous variable\n\n\n\n\n\nCode\nggplot(mpg, aes(hwy)) +\n  geom_histogram() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(hwy)) +\n  geom_density()"
  },
  {
    "objectID": "R_introduction.html#ggplot2-15",
    "href": "R_introduction.html#ggplot2-15",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nHistograms and density plots\n\n\nCode\nden&lt;- ggplot(mpg, aes(displ, colour = drv)) + \n  geom_density(linewidth=0.8)\n  \nhist&lt;- ggplot(mpg, aes(displ, fill = drv)) + \n  geom_histogram(binwidth = 0.5) + \n  facet_wrap(~drv, ncol = 1)\n\nggarrange(den, hist, ncol=2)"
  },
  {
    "objectID": "R_introduction.html#ggplot2-16",
    "href": "R_introduction.html#ggplot2-16",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nggsave - save the graph as an image file\n\n\nCode\nggsave(filename=\"mpg_displ.png\",width=6, height=4)"
  },
  {
    "objectID": "R_introduction.html#final-example---toy-imports-to-the-us-from-1996-2005",
    "href": "R_introduction.html#final-example---toy-imports-to-the-us-from-1996-2005",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\nit is drawn from Scott (2021)\n\n\n\nCode\nlibrary(tidyverse)\n\ntoy_imports &lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/toyimports.csv\")\n\nhead(toy_imports)\n\n\n\n\n# A tibble: 6 × 8\n  partner  year partner_name       product product_name US_report_import pop2000\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;                   &lt;dbl&gt;   &lt;dbl&gt;\n1 ARE      1998 United Arab Emira…  950341 \"Toys repre…             1.06  3.25e6\n2 ARE      2000 United Arab Emira…  950349 \"Toys repre…            12.0   3.25e6\n3 ARE      2003 United Arab Emira…  950349 \"Toys repre…             4.65  3.25e6\n4 ARE      2005 United Arab Emira…  950320 \"Reduced-si…            49.2   3.25e6\n5 ARG      1996 Argentina           950341 \"Toys repre…             0     3.69e7\n6 ARG      1996 Argentina           950310 \"Electric t…            10.8   3.69e7\n# ℹ 1 more variable: region &lt;dbl&gt;\n\n\n\n\nTask: make a graph showing total toy imports over time for the U.S.’s top 5 trading partners by total dollar value of toys imported"
  },
  {
    "objectID": "R_introduction.html#final-example---toy-imports-to-the-us-from-1996-2005-1",
    "href": "R_introduction.html#final-example---toy-imports-to-the-us-from-1996-2005-1",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\n\nCode\ncountry_total&lt;- toy_imports %&gt;% \n  group_by(partner_name) %&gt;%\n  summarize(total_import=sum(US_report_import)) %&gt;%\n  arrange(desc(total_import)) %&gt;%\n  head(5)\n\ncountry_total\n\n\n\n\n# A tibble: 5 × 2\n  partner_name     total_import\n  &lt;chr&gt;                   &lt;dbl&gt;\n1 China               26842305.\n2 Denmark              1034990.\n3 Canada                572309.\n4 Hong Kong, China      545186.\n5 Switzerland           400969.\n\n\n\n\nthe total dollar value of toys imported to the U.S. (US_report_import, in multiples of $1,000) in a specific product category from a specific country in a specific year\nThe product categories have unique numerical codes (product) as well as product names exciting enough to quicken the heart of any toy-loving child (“Parts and accessories :– Other,” “Toys representing animal or non-human figures,” and so on\nGroup all the observations by trading partner (the partner_name variable)\nFor each partner, calculate total dollar value by summing toy imports (US_report_import) across all categories and years\nArrange the partners by total dollar value"
  },
  {
    "objectID": "R_introduction.html#final-example---toy-imports-to-the-us-from-1996-2005-2",
    "href": "R_introduction.html#final-example---toy-imports-to-the-us-from-1996-2005-2",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\n\nCode\n#| out-width: 100%\n\ntop5_partners=c(\"China\", \"Denmark\", \"Canada\", \"Hong Kong, China\", \"Switzerland\")\n\noptions(scipen = 999)\n\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(plotly)\n\np &lt;- toy_imports %&gt;% \n  filter(partner_name %in% top5_partners) %&gt;%\n  group_by(year, partner_name) %&gt;%\n  summarize(total_import=sum(US_report_import)) %&gt;% \n  ggplot(aes(year, total_import, color=partner_name)) +\n  geom_line()+\n  labs(title=\"Toy imports from the U.S.'s top-5 partners, 1996-2005\",\n       x=\"Year\",\n       y=\"Dollar value of imports (log scale)\",\n       color=\"Import Region\")+\n  scale_x_continuous(breaks=1996:2005)+\n  theme_economist()+ \n  scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n              labels = trans_format(\"log10\", math_format(10^.x)))\n\nggplotly(p)"
  },
  {
    "objectID": "R_introduction.html#extra-gapminder-data",
    "href": "R_introduction.html#extra-gapminder-data",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(gapminder)\n\ndata(gapminder)\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;%\n  mutate(median_lifeExp = median(lifeExp)) %&gt;%\n  ggplot(aes(year, median_lifeExp, color=continent)) +\n  geom_line()+\n  labs(title=\"Life expectancy by continent and year\",\n       x=\"Year\",\n       y=\"Life expectancy\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\") +\n  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1 / 4)"
  },
  {
    "objectID": "R_introduction.html#extra-gapminder-data-1",
    "href": "R_introduction.html#extra-gapminder-data-1",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\nthis is from BBC style\n\n\nCode\n# install.packages('devtools')\n#devtools::install_github('bbc/bbplot'))\n\nlibrary(ggpubr)\n\nsource(\"https://raw.githubusercontent.com/kwan-MSDA/R/main/bbc_style.R\")\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;%\n  summarize(median_lifeExp = median(lifeExp)) %&gt;%\n  ggplot(aes(year, median_lifeExp, color=continent)) +\n  geom_line()+\n  labs(title=\"Life expectancy by continent and year\",\n       x=\"Year\",\n       y=\"Life expectancy\")+\n  bbc_style()\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource 1: https://bbc.github.io/rcookbook/#do_something_else_entirely\nsource 2: https://github.com/bbc/bbplot?tab=readme-ov-file\nsource 3: https://noeliagorod.com/2020/07/23/bbc-visual-and-data-journalism-cookbook-for-r-graphics/"
  },
  {
    "objectID": "R_introduction.html#extra-gapminder-data-2",
    "href": "R_introduction.html#extra-gapminder-data-2",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(\"ggalt\")\nlibrary(\"tidyr\")\n \nlibrary(gapminder)\n\ndumbbell_df &lt;- gapminder %&gt;%\n  filter(year == 1967 | year == 2007) %&gt;%\n  select(country, year, lifeExp) %&gt;%\n  spread(year, lifeExp) %&gt;%\n  mutate(gap = `2007` - `1967`) %&gt;%\n  arrange(desc(gap)) %&gt;%\n  head(10)\n \n#Make plot\nggplot(dumbbell_df, aes(x = `1967`, xend = `2007`, y = reorder(country, gap), group = country)) + \n  geom_dumbbell(colour = \"#dddddd\",\n                size = 3,\n                colour_x = \"#FAAB18\",\n                colour_xend = \"#1380A1\") +\n  bbc_style() + \n  labs(title=\"We're living longer\",\n       subtitle=\"Biggest life expectancy rise, 1967-2007\")"
  },
  {
    "objectID": "R_introduction.html#extra-gapminder-data-3",
    "href": "R_introduction.html#extra-gapminder-data-3",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ngapminder %&gt;% \n  filter(year==2007) %&gt;%\n  mutate(country=factor(country, levels=unique(country))) %&gt;%\n  arrange(desc(pop)) %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) +\n  geom_point(alpha=0.6, shape=21, color=\"black\")+\n  scale_size(range=c(.1, 24), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  theme_ipsum()+\n  theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent in 2007\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")"
  },
  {
    "objectID": "R_introduction.html#extra-gapminder-data-4",
    "href": "R_introduction.html#extra-gapminder-data-4",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(gganimate)\n\ngapminder %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent, frame=year)) +\n  geom_point(alpha=0.6, shape=21, color=\"black\")+\n  scale_size(range=c(.1, 22), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  theme_ipsum()+\n  theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent in {frame_time}\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")+\n  geom_text(data=gapminder %&gt;%  filter(pop &gt;1e+8), aes(label=country), size=5, nudge_x=0.1, nudge_y=0.1)+\n  transition_time(year)+\n  enter_fade()+\n  exit_fade()\n\n\n\n\n\n\n\n\n\n\n\nCode\nanim_save(\"gapminder_gganimate.gif\")"
  },
  {
    "objectID": "R_introduction.html#extra-gapminder-data-5",
    "href": "R_introduction.html#extra-gapminder-data-5",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\nsource\n\n\nCode\nlibrary(plotly)\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ng&lt;- crosstalk::SharedData$new(gapminder %&gt;% \n                              mutate(country=factor(country, levels=unique(country))) %&gt;%\n                              arrange(desc(pop)),\n                              ~ continent)\ngg&lt;- g %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, fill=continent, frame=year)) +\n  geom_point(aes(size=pop, alpha=0.6, ids=country))+\n  scale_size(range=c(.1, 24), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  scale_alpha(range=c(0.6, 1), guide=FALSE)+\n  theme_ipsum()+\n  # theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent between 1952-2007\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")\n\nggplotly(gg, height = 500, width = 800)"
  },
  {
    "objectID": "R_introduction.html#references",
    "href": "R_introduction.html#references",
    "title": "R - An Introduction",
    "section": "References",
    "text": "References\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social Science : An Introduction in Tidyverse. Princeton, New Jersey: Princeton University Press.\n\n\nWickham, Hadley. 2016. Ggplot2 : Elegrant Graphics for Data Analysis. Second edition. Use r! Switzerland: Springer.\n\n\n———. 2019. Advanced r. Second edition. The r Series. Boca Raton, FL: CRC Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2023. R for Data Science : Import, Tidy, Transform, Visualize, and Model Data. Second edition. Beijing: O’Reilly."
  },
  {
    "objectID": "Probability.html#motivation",
    "href": "Probability.html#motivation",
    "title": "Probabilities and Statistics",
    "section": "Motivation",
    "text": "Motivation\n\nSocial processes are not deterministic\n\nthe “effects” of social causes are difficult to isolate and estimate\n\nneed a framework for communicating our uncertainty about the inferences we draw in our empirical work\nprobability theory\n\nhelp us do inference on modeling\nthe root of social statistics\n\nit might be even helpful for case selection and small-n inference in qualitative research"
  },
  {
    "objectID": "Probability.html#basic-concepts",
    "href": "Probability.html#basic-concepts",
    "title": "Probabilities and Statistics",
    "section": "Basic Concepts",
    "text": "Basic Concepts\nsome elements of set theory\n\nset: a collection of elements\nsubset: set that is composed entirely of elements of another set\n\ne.g. Set A is subset of Set B if every element of A was also an element of B\n\ni.e. Set B contains Set A\n\n\nunion: the union of two sets contains all the elements that belong to either sets\nintersection: the intersection of two sets contains only those elements found in both sets\ncomplement: the complement of a given set is the set that contains all elements not in the original set\ndisjoint: Two sets are disjoint when their intersection is empty\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nintersection\n\n\n\n\n\n\n\n\n\n\n\nunion\n\n\n\n\n\n\n\n\n\n\n\ncomplement\n\n\n\n\n\n\n\n\ncomplements are by definition disjoint"
  },
  {
    "objectID": "Probability.html#basic-concepts-1",
    "href": "Probability.html#basic-concepts-1",
    "title": "Probabilities and Statistics",
    "section": "Basic Concepts",
    "text": "Basic Concepts\nprobability space\n\nLet \\(\\Omega\\) be a set of possible underlying outcomes - sample space\nLet \\(\\omega \\in \\Omega\\) be a particular underlying outcomes\nLet \\(\\mathcal{G} \\subset \\Omega\\) be a subset of \\(\\Omega\\) - event\n\\(\\mathcal{F}\\) be a collection of such subsets \\(\\mathcal{G} \\subset \\Omega\\)\nthe pair \\((\\Omega,\\mathcal{F})\\) forms probability space\n\n\n\nEvents and occurrences sample space \\(S\\)\n\n\\(s\\) is a possible outcome \\(s \\in S\\)\n\\(A\\) is an event \\(A ⊆ S\\)"
  },
  {
    "objectID": "Probability.html#exercises",
    "href": "Probability.html#exercises",
    "title": "Probabilities and Statistics",
    "section": "Exercises",
    "text": "Exercises\nConsider the universal set \\(\\Omega = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\}\\)\nGiven the sets \\(A = \\{2, 4, 6, 8, 10\\}\\) and \\(B = \\{3, 6, 9\\}\\)\n\nFind the complement of set A\nFind the complement of set B\nCalculate the intersection of sets A and B\nCompute the union of the complements of sets A and B\nFind the intersection of the complement of set A and B"
  },
  {
    "objectID": "Probability.html#basic-concepts-2",
    "href": "Probability.html#basic-concepts-2",
    "title": "Probabilities and Statistics",
    "section": "Basic Concepts",
    "text": "Basic Concepts\nprobability measure\n\nA probability measure \\(\\textrm{P}\\) maps a set of event(s) \\(\\mathcal{G} \\in \\mathcal{F}\\) into a scalar number between \\(0\\) and \\(1\\)\n\nthis is the “probability” that event \\(A\\) happens, denoted by \\(\\textrm{P}(A)\\)\n\nThe probability measure must satisfy the following properties:\n\n\\(\\textrm{P}(\\emptyset) = 0\\)\n\\(\\textrm{P}(\\Omega) = 1\\)\nIf \\(A_1, A_2, \\ldots\\) are disjoint, then \\(\\textrm{P}(\\cup_{i=1}^\\infty A_i) = \\sum_{i=1}^\\infty \\textrm{P}(A_i)\\)"
  },
  {
    "objectID": "Probability.html#basic-concepts-3",
    "href": "Probability.html#basic-concepts-3",
    "title": "Probabilities and Statistics",
    "section": "Basic Concepts",
    "text": "Basic Concepts\nLaw of Total Probability\n\nThe probability of event \\(A\\) can be decomposed into \\(n\\) parts\n\none part that intersects with \\(B_1\\), another part that intersects with \\(B_2\\), and so on\n\n\n\n\n\n\n\n\n\n\nwe can state the probability formally\n\n\n\\[\n\\textrm{P}(A) = \\textrm{P}(A \\cap B_1) + \\textrm{P}(A \\cap B_2) + \\ldots + \\textrm{P}(A \\cap B_n)\n\\]"
  },
  {
    "objectID": "Probability.html#basic-concepts-4",
    "href": "Probability.html#basic-concepts-4",
    "title": "Probabilities and Statistics",
    "section": "Basic Concepts",
    "text": "Basic Concepts\nConditional Probability\n\nConditional probability statements recognize that some prior information bears on the determination of subsequent probabilities\nThe conditional probability of event \\(A\\) given event \\(B\\) is denoted by \\(\\textrm{P}(A|B)\\) and is defined as\n\n\n\\[\n\\textrm{P}(A|B) = \\frac{\\textrm{P}(A \\cap B)}{\\textrm{P}(B)}\n\\]\n\n\nwe can use conditional probability statements to derive the law of total probability\n\n\n\\[\n\\textrm{P}(A) = \\textrm{P}(A|B_1)\\textrm{P}(B_1) + \\textrm{P}(A|B_2)\\textrm{P}(B_2) + \\ldots + \\textrm{P}(A|B_n)\\textrm{P}(B_n)\n\\]\n\n\nwhere \\(B_1, B_2, \\ldots, B_n\\) form a partition of the sample space"
  },
  {
    "objectID": "Probability.html#basic-concepts-5",
    "href": "Probability.html#basic-concepts-5",
    "title": "Probabilities and Statistics",
    "section": "Basic Concepts",
    "text": "Basic Concepts\nBayes’s rule\n\nBayes’ rule can be regarded as a way to reverse conditional probabilities\nlet \\(A\\) and \\(B\\) be two events with \\(\\textrm{P}(B) &gt; 0\\)\n\nthen the Bayes’ rule states that\n\n\n\n\\[ \\textrm{P}(A|B) = \\frac{\\textrm{P}(B|A)\\textrm{P}(A)}{\\textrm{P}(B|A)\\textrm{P}(A) + \\textrm{P}(B|A^C)\\textrm{P}(A^C)}\\]"
  },
  {
    "objectID": "Probability.html#exercises-1",
    "href": "Probability.html#exercises-1",
    "title": "Probabilities and Statistics",
    "section": "Exercises",
    "text": "Exercises\nSuppose you work in a building that has a fire alarm system. The fire alarm is designed to go off when there is a fire, and it’s also known that sometimes the alarm can go off due to smoke from a malfunctioning HVAC system.\n\nthere is a 1% chance that there is a fire: \\(P(Fire) = 0.01\\)\nthe alarm system works pretty well and there is a 95% chance it goes off when there is an actual fire\n\n\\(P(\\text{Alarm goes off | Fire}) = 0.95\\)\n\nthere is a 10% chance that the alarm goes off due to smoke without a fire\n\n\\(P(\\text{Alarm goes off | No Fire}) = 0.1\\)\n\nwhat’s the probability of actually there being a dangerous fire given that alarm goes off?"
  },
  {
    "objectID": "Probability.html#basic-concepts-6",
    "href": "Probability.html#basic-concepts-6",
    "title": "Probabilities and Statistics",
    "section": "Basic Concepts",
    "text": "Basic Concepts\nIndependence\nIntuition: Information about the outcome of event A doesn’t change the probability of event B happening\n\nTwo events \\(A\\) and \\(B\\) are independent if\n\n\n\\[\nP(A \\cap B)=P(A)P(B)\n\\]\n\n\nwe can deduce that if \\(A\\) and \\(B\\) are independent, then\n\n\\(P(A) = P(A|B)\\)\n\\(P(B) = P(B|A)\\)\n\nWhen there are more than two events, we say that they are mutually independent if every subset of the events is independent\nReminder:\n\npairwise independence does not imply mutual independence\n\n\n\n\nIndependence is completely different from disjointness\n\nIf A and B are disjoint, then P (A  B) = 0, so disjoint events can be independent only if P (A) = 0 or P (B) = 0\nKnowing that A occurs tells us that B definitely did not occur, so A clearly conveys information about B, meaning the two events are not independent (except if A or B already has zero probability)\n\nConsider two fair, independent coin tosses, and let A be the event that the first is Heads, B the event that the second is Heads, and C the event that both tosses have the same result\n\nThen A, B, and C are pairwise independent but not independent\nsince P (A ∩ B ∩ C) = 1/4 while P (A)P (B)P (C) = 1/8\nThe point is that just knowing about A or just knowing about B tells us nothing about C\nbut knowing what happened with both A and B gives us information about C\nin fact, in this case it gives us perfect information about C)\n\n(Conditional independence given E vs. given Ec)\n\nSuppose there are two types of classes: good classes and bad classes\nIn good classes, if you work hard, you are very likely to get an A\nIn bad classes, the professor randomly assigns grades to students regardless of their effort\nLet G be the event that a class is good, W be the event that you work hard, and A be the event that you receive an A\nThen W and A are conditionally independent given Gc, but they are not conditionally independent given G\n\nConditional independence doesn’t imply independence + fair coin vs biased coin + let F be the event that we’ve chosen the fair coin, and let A1 and A2 be the events that the first and second coin tosses land Heads + Conditional on F , A1 and A2 are independent + but A1 and A2 are not unconditionally independent because A1 provides information about A2\n(Independence doesn’t imply conditional independence)\n\nMy friends Alice and Bob are the only two people who ever call me on the phone\nEach day, they decide independently whether to call me that day.\nLet A be the event that Alice calls me next Friday and B be the event that Bob calls me next Friday.\nAssume A and B are unconditionally independent with P (A) &gt; 0 and P (B) &gt; 0.\nHowever, given that I receive exactly one call next Friday, A and B are no longer independent:\n\nthe call is from Alice if and only if it is not from Bob\nIn other words, letting C be the event that I receive exactly one call next Friday, P (B|C) &gt; 0 while P (B|A, C) = 0\nso A and B are not conditionally independent given C\n\n\nWhy is the baby crying?\n\nA certain baby cries if and only if she is hungry, tired, or both\n\n\nDisjoint events are not independent\n\nIf A and B are disjoint, then P (A ∩ B) = 0, so P (A ∩ B) = P (A)P (B) is violated\n\nLet’s define event A as “the result is an even number” and event B as “the result is a 5”. These two events are disjoint because they cannot both occur simultaneously. If the die shows an even number, it can’t show a 5, and vice versa.\n\nIndependent events are not necessarily disjoint\n\nIndependent events are those where the occurrence of one event doesn’t affect the probability of the other event\nFor example, if you flip a coin (event A) and roll a die (event B), these two events are independent\nbecause the outcome of the coin flip doesn’t affect the outcome of the die roll, and vice versa.\nHowever, these events are not disjoint\nDisjoint events can’t occur at the same time, but in this case, you can have a heads on the coin flip and a 6 on the die roll at the same time. So while the events are independent, they are not disjoint."
  },
  {
    "objectID": "Probability.html#basic-concepts-7",
    "href": "Probability.html#basic-concepts-7",
    "title": "Probabilities and Statistics",
    "section": "Basic Concepts",
    "text": "Basic Concepts\nrandom variable\n\nA random variable \\(X(\\omega)\\) is a function of the underlying outcome \\(\\omega \\in \\Omega\\)\n\n\\(X(\\omega)\\) has a probability distribution that is induced by the underlying probability measure \\(P\\) and the function \\(X(\\omega)\\):\n\n\n\n\\[\n\\textrm{Prob} (X \\in A ) = \\int_{\\mathcal{G}} P(\\omega) d \\omega\n\\]\n\\(\\qquad\\) where \\({\\mathcal G}\\) is the subset of \\(\\Omega\\) for which \\(X(\\omega) \\in A\\)"
  },
  {
    "objectID": "Probability.html#probability-distributions",
    "href": "Probability.html#probability-distributions",
    "title": "Probabilities and Statistics",
    "section": "Probability Distributions",
    "text": "Probability Distributions\nA probability distribution \\(\\textrm{Prob} (X \\in A)\\) can be described by its cumulative distribution function (CDF)\n\\[\nF_{X}(x) = \\textrm{Prob}\\{X\\leq x\\}.\n\\]\n\nA continuous-valued random variable can be described by density function \\(f(x)\\) that is related to its CDF by\n\\[\n\\textrm{Prob} \\{X\\in B\\} = \\int_{t\\in B}f(t)dt\n\\]\n\\[\nF(x) = \\int_{-\\infty}^{x}f(t)dt\n\\]"
  },
  {
    "objectID": "Probability.html#probability-distributions-1",
    "href": "Probability.html#probability-distributions-1",
    "title": "Probabilities and Statistics",
    "section": "Probability Distributions",
    "text": "Probability Distributions\n\nFor a discrete-valued random variable\nthe number of possible values of \\(X\\) is finite or countably infinite\n\nwe replace a density with a probability mass function (pmf), a non-negative sequence that sums to one\n\nwe replace integration with summation in the formula that relates a CDF to a probability mass function (pmf)\nlet us discuss some common distributions for illustrations"
  },
  {
    "objectID": "Probability.html#common-distributions",
    "href": "Probability.html#common-distributions",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nDiscrete distributions\nA discrete distribution is defined by a set of numbers \\(S = \\{x_1, \\ldots, x_n\\}\\) and a probability mass function (pmf) on \\(S\\), which is a function \\(p\\) from \\(S\\) to \\([0,1]\\) with the property\n\n\\[\n\\sum_{i=1}^n p(x_i) = 1\n\\]\n\n\na random variable \\(X\\) has distribution \\(p\\) if \\(X\\) takes value \\(x_i\\) with probability \\(p(x_i)\\)\n\n\n\\[\n\\mathbb P\\{X = x_i\\} = p(x_i) \\quad \\text{for } i= 1, \\ldots, n\n\\]"
  },
  {
    "objectID": "Probability.html#common-distributions-1",
    "href": "Probability.html#common-distributions-1",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nDiscrete distributions\n\nThe mean or expected value of a random variable \\(X\\) with distribution \\(p\\) is\n\n\n\\[\n\\mathbb{E}[X] = \\sum_{i=1}^n x_i p(x_i)\n\\]\n\n\nExpectation is often called the first moment of the distribution in statistics\n\nwe call it the mean of the distribution (represented by) \\(\\mu\\)\n\nThe variance of \\(X\\) is defined as\n\n\n\\[\n\\mathbb{V}[X] = \\sum_{i=1}^n (x_i - \\mathbb{E}[X])^2 p(x_i)\n\\]\n\n\nVariance is often called the second central moment of the distribution in statistics"
  },
  {
    "objectID": "Probability.html#common-distributions-2",
    "href": "Probability.html#common-distributions-2",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nDiscrete distributions\n\nThe cumulative distribution function (CDF) of \\(X\\) is defined by\n\n\n\\[\nF(x) = \\mathbb{P}\\{X \\leq x\\}\n        = \\sum_{i=1}^n \\mathbb 1\\{x_i \\leq x\\} p(x_i)\n\\]\n\nHere \\(\\mathbb 1\\{ \\textrm{statement} \\} = 1\\) if “statement” is true and zero otherwise\nHence the second term takes all \\(x_i \\leq x\\) and sums their probabilities"
  },
  {
    "objectID": "Probability.html#common-distributions-3",
    "href": "Probability.html#common-distributions-3",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nthe uniform distribution\n\n\\(p(x_i) = 1/n\\) for all \\(i\\)\n\nthe mean is \\((n+1)/2\\)\nthe variance is \\((n^2 - 1)/12\\)\n\n\nBernoulli distribution\n\nthe Bernoulli distribution on \\(S = \\{0,1\\}\\), which has pmf:\n\n\n\\[\np(i) = \\theta^i (1 - \\theta)^{1-i}\n\\qquad (i = 0, 1)\n\\]\n\n\n\\(\\theta \\in [0,1]\\) is a parameter\n\n\\(p(1) = \\theta\\) means that the trial succeeds (takes value 1) with probability \\(\\theta\\)\n\nthe mean is \\(\\theta\\); the variance is \\(\\theta(1-\\theta)\\)"
  },
  {
    "objectID": "Probability.html#common-distributions-4",
    "href": "Probability.html#common-distributions-4",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nBinomial distribution\nthe binomial distribution on \\(X=\\{0, \\ldots, n\\}\\), which has pmf\n\\[\np(x) = \\binom{n}{x} \\theta^x (1-\\theta)^{n-x}\n\\]\n\n\n\n\\(\\theta \\in [0,1]\\) is a parameter\n\nthe mean is \\(n \\theta\\)\nthe variance is \\(n \\theta (1-\\theta)\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe interpretation of \\(p(x)\\) is: the probability of \\(x\\) successes in \\(n\\) independent trials with success probability \\(\\theta\\)\nFor example, if \\(\\theta=0.5\\), then \\(p(x)\\) is the probability of \\(x\\) heads in \\(n\\) flips of a fair coin"
  },
  {
    "objectID": "Probability.html#common-distributions-5",
    "href": "Probability.html#common-distributions-5",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nPoisson distribution\nThe Poisson distribution on \\(X = \\{0, 1, \\ldots\\}\\) with parameter \\(\\lambda &gt; 0\\) has pmf\n\\[\np(x) = \\frac{\\lambda^x}{x!} e^{-\\lambda}\n\\]\n\n\n\nThe interpretation of \\(p(x)\\) is: the probability of \\(i\\) events in a fixed time interval, where the events occur independently at a constant rate \\(\\lambda\\).\n\nthe mean is \\(\\lambda\\) and the variance is \\(\\lambda\\)"
  },
  {
    "objectID": "Probability.html#common-distributions-6",
    "href": "Probability.html#common-distributions-6",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nNormal distribution\nthe most famous distribution is the normal distribution, which has density\n\\[\np(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma}\n            \\exp\\left(-\\frac{(x-\\mu)^2}{2\\sigma^2}\\right)\n\\]\n\n\n\nit has two parameters, \\(\\mu \\in \\mathbb R\\) and \\(\\sigma \\in (0, \\infty)\\)\n\nthe mean is \\(\\mu\\) and the variance is \\(\\sigma^2\\)"
  },
  {
    "objectID": "Probability.html#common-distributions-7",
    "href": "Probability.html#common-distributions-7",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nContinuous distributions\nA continuous distribution is represented by a probability density function (pdf), which is a function \\(p\\) over \\(\\mathbb R\\) such that \\(p(x) \\geq 0\\) for all \\(x\\) and\n\\[\n\\int_{-\\infty}^\\infty p(x) dx = 1\n\\]\nWe say that random variable \\(X\\) has distribution \\(p\\) if\n\\[\n\\mathbb P\\{a &lt; X &lt; b\\} = \\int_a^b p(x) dx\n\\]\nfor all \\(a \\leq b\\)\n\nThe definition of the mean and variance of a random variable \\(X\\) with distribution \\(p\\) are the same as the discrete case, after replacing the sum with an integral\nFor example, the mean of \\(X\\) is\n\\[\n\\mathbb{E}[X] = \\int_{-\\infty}^\\infty x p(x) dx\n\\]\nThe cumulative distribution function (cdf) of \\(X\\) is defined by\n\\[\nF(x) = \\mathbb P\\{X \\leq x\\}\n        = \\int_{-\\infty}^x p(x) dx\n\\]"
  },
  {
    "objectID": "Probability.html#common-distributions-8",
    "href": "Probability.html#common-distributions-8",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nLognormal distribution\nThe lognormal distribution is a distribution on \\(\\left(0, \\infty\\right)\\) with density\n\\[\np(x) = \\frac{1}{\\sigma x \\sqrt{2\\pi}}\n    \\exp \\left(- \\frac{\\left(\\log x - \\mu\\right)^2}{2 \\sigma^2} \\right)\n\\]\n\n\n\nIt has two parameters, \\(\\mu\\) and \\(\\sigma\\)\n\nthe mean is \\(\\exp\\left(\\mu + \\sigma^2/2\\right)\\)\nthe variance is \\(\\left[\\exp\\left(\\sigma^2\\right) - 1\\right] \\exp\\left(2\\mu + \\sigma^2\\right)\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt can be proved that\n\nif \\(X\\) is lognormally distributed, then \\(\\log X\\) is normally distributed\n\nif \\(X\\) is normally distributed, then \\(\\exp X\\) is lognormally distributed"
  },
  {
    "objectID": "Probability.html#common-distributions-9",
    "href": "Probability.html#common-distributions-9",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nGamma distribution\nThe gamma distribution is a distribution on \\(\\left(0, \\infty\\right)\\) with density\n\\[\np(x) = \\frac{\\beta^\\alpha}{\\Gamma(\\alpha)}\n    x^{\\alpha - 1} \\exp(-\\beta x)\n\\]\n\n\n\nIt has two parameters, \\(\\alpha &gt; 0\\) and \\(\\beta &gt; 0\\)\n\nthe mean is \\(\\alpha / \\beta\\)\nthe variance is \\(\\alpha / \\beta^2\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne interpretation is that if \\(X\\) is gamma distributed and \\(\\alpha\\) is an integer, then \\(X\\) is the sum of \\(\\alpha\\) independent exponentially distributed random variables with mean \\(1/\\beta\\)"
  },
  {
    "objectID": "Probability.html#common-distributions-10",
    "href": "Probability.html#common-distributions-10",
    "title": "Probabilities and Statistics",
    "section": "Common distributions",
    "text": "Common distributions\nBeta distribution\nThe beta distribution is a distribution on \\((0, 1)\\) with density\n\n\\[\np(x) = \\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha) \\Gamma(\\beta)}\n    x^{\\alpha - 1} (1 - x)^{\\beta - 1}\n\\]\nwhere \\(\\Gamma\\) is the gamma function\n\n\n\n\nit has two parameters, \\(\\alpha &gt; 0\\) and \\(\\beta &gt; 0\\)\n\nthe mean is \\(\\alpha / (\\alpha + \\beta)\\)\nthe variance is \\(\\alpha \\beta / (\\alpha + \\beta)^2 (\\alpha + \\beta + 1)\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe role of the gamma function is just to normalize the density, so that it integrates to one"
  },
  {
    "objectID": "Probability.html#bivariate-probability-distribution",
    "href": "Probability.html#bivariate-probability-distribution",
    "title": "Probabilities and Statistics",
    "section": "Bivariate Probability Distribution",
    "text": "Bivariate Probability Distribution\nTwo discrete random variables\n\nLet \\(X,Y\\) be two discrete random variables that take values:\n\n\n\\[\nX\\in\\{0,\\ldots,I-1\\} \\qquad Y\\in\\{0,\\ldots,J-1\\}\n\\]\n\n\ntheir joint distribution is described by a matrix\n\n\n\\[\nF_{I\\times J}=[f_{ij}]_{i\\in\\{0,\\ldots,I-1\\}, j\\in\\{0,\\ldots,J-1\\}}\n\\]\n\n\nwhose elements are\n\n\n\n\n\\[\nf_{ij}=\\textrm{P}\\{X=i,Y=j\\} \\geq 0\n\\]\n\n\nwhere \\(\\sum_{i}\\sum_{j}f_{ij}=1\\)"
  },
  {
    "objectID": "Probability.html#bivariate-probability-distribution-1",
    "href": "Probability.html#bivariate-probability-distribution-1",
    "title": "Probabilities and Statistics",
    "section": "Bivariate Probability Distribution",
    "text": "Bivariate Probability Distribution\nTwo discrete random variables\nThe joint distribution induce marginal distributions\n\\[\n\\textrm{P}\\{X=i\\}= \\sum_{j=0}^{J-1}f_{ij} = \\mu_i, \\quad i=0,\\ldots,I-1\n\\]\n\\[\n\\textrm{P}\\{Y=j\\}= \\sum_{i=0}^{I-1}f_{ij} = \\nu_j, \\quad j=0,\\ldots,J-1\n\\]"
  },
  {
    "objectID": "Probability.html#bivariate-probability-distribution-2",
    "href": "Probability.html#bivariate-probability-distribution-2",
    "title": "Probabilities and Statistics",
    "section": "Bivariate Probability Distribution",
    "text": "Bivariate Probability Distribution\nTwo discrete random variables\n\nfor example, let a joint distribution over \\((X,Y)\\) be\n\n\n\\[\nF_{X,Y} = \\left[\n   \\begin{matrix}\n   P(X=0, Y=0) & P(X=0, Y=1)\\\\\n   P(X=1, Y=0) & P(X=1, Y=1)\n  \\end{matrix}\n\\right] = \\left[\n   \\begin{matrix}\n   .25 & .1\\\\\n   .15 & .5\n  \\end{matrix}\n\\right]\n\\]\n\n\nthe marginal distributions are:\n\n\n\\[\\begin{aligned}\n\\textrm{P} \\{X=0\\}&=\\\\\n\\textrm{P}\\{X=1\\}&=\\\\\n\\textrm{P}\\{Y=0\\}&=\\\\\n\\textrm{P}\\{Y=1\\}&=\n\\end{aligned}\\]\n\n\n\\[\\begin{aligned}\n\\textrm{P} \\{X=0\\}&=.25+.1=.35\\\\\n\\textrm{P}\\{X=1\\}& =.15+.5=.65\\\\\n\\textrm{P}\\{Y=0\\}&=.25+.15=.4\\\\\n\\textrm{P}\\{Y=1\\}&=.1+.5=.6\n\\end{aligned}\\]\n\n\nDigression: If two random variables \\(X,Y\\) are continuous and have joint density \\(f(x,y)\\), then marginal distributions can be computed by\n\\[\n\\begin{aligned}\nf(x)& = \\int_{\\mathbb{R}} f(x,y) dy\\\\\nf(y)& = \\int_{\\mathbb{R}} f(x,y) dx\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "Probability.html#summary-statistics",
    "href": "Probability.html#summary-statistics",
    "title": "Probabilities and Statistics",
    "section": "Summary Statistics",
    "text": "Summary Statistics\nSuppose we have an observed distribution with values \\(\\{x_1, \\ldots, x_n\\}\\)\n\nThe sample mean of this distribution is defined as\n\n\n\\[\n\\bar x = \\frac{1}{n} \\sum_{i=1}^n x_i\n\\]\n\n\nThe sample variance is defined as\n\n\n\\[\n\\frac{1}{n} \\sum_{i=1}^n (x_i - \\bar x)^2\n\\]"
  },
  {
    "objectID": "Probability.html#lln-and-clt",
    "href": "Probability.html#lln-and-clt",
    "title": "Probabilities and Statistics",
    "section": "LLN and CLT",
    "text": "LLN and CLT\n\ntwo of the most important results in probability and statistics\n\nthe law of large numbers (LLN)\nthe central limit theorem (CLT)\n\nLet \\(X_1, .\\dots, X_n\\) be independent and identically distributed scalar random variables, with common distribution \\(F\\) and common mean \\(\\mu\\) and variance \\(\\sigma^2\\)\nLaw of large numbers\n\n\n\\[\nP(|\\bar{X}_n- \\mu | \\geq \\varepsilon) \\rightarrow 0 \\text{ as } n \\rightarrow \\infty, \\quad \\forall \\varepsilon &gt; 0\n\\]\n\n\n\nuse the Chebyshev inequality to prove the LLN\n\n\\[\nP(|\\bar{X}_n- \\mu | \\geq \\varepsilon) \\leq \\frac{\\sigma^2}{n \\varepsilon^2}\n\\]\n\n\nCentral limit theorem\n\n\n\\[\n\\sqrt{n}(\\bar{X}_n- \\mu) \\stackrel{d}{\\to} N(0, \\sigma^2)\\quad  \\text{ as } \\quad n \\to \\infty\n\\]\n\n\n\nthe central limit theorem (CLT) tells us about the distribution of the deviation between sample averages and population means"
  },
  {
    "objectID": "Probability.html#references",
    "href": "Probability.html#references",
    "title": "Probabilities and Statistics",
    "section": "References",
    "text": "References\n\n\nStachurski, John. 2016. A Primer in Econometric Theory. Cambridge, Massachusetts: The MIT Press."
  },
  {
    "objectID": "R introduction_draft_student.html",
    "href": "R introduction_draft_student.html",
    "title": "R - An Introduction",
    "section": "",
    "text": "R is a programming language and software environment for statistical computing and graphics\n\nwidely used in academia and industry\nfor data analysis, statistical modeling, and visualization\nfor machine learning, data mining, and big data analysis\nfor reproducible research and scientific computing\n\nR is an implementation of the S programming language\n\nS was developed at Bell Laboratories by John Chambers and colleagues\nS was designed for data analysis and graphics\nS was the precursor to the commercial statistical software package S-PLUS"
  },
  {
    "objectID": "R introduction_draft_student.html#introduction",
    "href": "R introduction_draft_student.html#introduction",
    "title": "R - An Introduction",
    "section": "",
    "text": "R is a programming language and software environment for statistical computing and graphics\n\nwidely used in academia and industry\nfor data analysis, statistical modeling, and visualization\nfor machine learning, data mining, and big data analysis\nfor reproducible research and scientific computing\n\nR is an implementation of the S programming language\n\nS was developed at Bell Laboratories by John Chambers and colleagues\nS was designed for data analysis and graphics\nS was the precursor to the commercial statistical software package S-PLUS"
  },
  {
    "objectID": "R introduction_draft_student.html#introduction-1",
    "href": "R introduction_draft_student.html#introduction-1",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand\n\nnamed partly after the first names of the first two R authors and partly as a play on the name of S\na GNU project, a free software movement initiated by Richard Stallman in 1983\nfreely available under the GNU General Public License\na large number of packages available"
  },
  {
    "objectID": "R introduction_draft_student.html#introduction-2",
    "href": "R introduction_draft_student.html#introduction-2",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\ntidyverse is a collection of R packages designed for data science\n\ntidyverse packages share an underlying design philosophy, grammar, and data structures\ntidyverse packages are designed to work together\n\nfocus on the tidyverse\n\nmainly because it is easier to understand\ndo most data manipulation we need in social science research with these tools\n\nA good reference for tidyverse is the book by Wickham (2019)\n\nR for Data Science"
  },
  {
    "objectID": "R introduction_draft_student.html#introduction-3",
    "href": "R introduction_draft_student.html#introduction-3",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nfor quick reference, visit Posit Primers on Data Science\n\nR Basics\nTransform Tables\nVisualize Data\n\nfor more advanced topics, visit Data Science\n\nData Wrangling\nData Visualization\nModelling\n\nwe use cover some base R functions first, then move on to the tidyverse"
  },
  {
    "objectID": "R introduction_draft_student.html#loading-data",
    "href": "R introduction_draft_student.html#loading-data",
    "title": "R - An Introduction",
    "section": "Loading Data",
    "text": "Loading Data\n\nThe first step in any data analysis is to load the data into R\n\nthe data can be in a variety of formats\nthe most common formats are CSV, Excel, and SPSS\nthe readr package is part of the tidyverse and is used to read data into R\n\n\n\n\n\n\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n# check your working directory\ngetwd()\n\n## read data file\n\naddh&lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/addhealthfake.csv\")"
  },
  {
    "objectID": "R introduction_draft_student.html#add-health-dataset",
    "href": "R introduction_draft_student.html#add-health-dataset",
    "title": "R - An Introduction",
    "section": "Add health dataset",
    "text": "Add health dataset\n\nHere are some details about the dataset\n\nThe National Longitudinal Study of Adolescent to Adult Health (Add Health)\na longitudinal study of a nationally representative sample of adolescents in grades 7-12 in the United States during the 1994-95 school year (Wave I)\nThe Add Health cohort has been followed into young adulthood with four in-home interviews for Wave I-IV by 2008\n\nthe Wave V conducted during 2016-2018 included a mixed-mode survey\n\nrespondents’ social, economic, psychological, and physical well-being\n\nalong with contextual data on the family, neighborhood, community, school, friendships, peer groups, and romantic relationships\n\nstudy developmental trajectories of health and risk behaviors throughout the life course"
  },
  {
    "objectID": "R introduction_draft_student.html#explore-data",
    "href": "R introduction_draft_student.html#explore-data",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nThe dataset used here is a subset of the Add Health dataset\n\n3000 observations and 11 variables\n\nAfter the dataset is loaded in R, it is important to explore the data to understand its structure and content\n\ncheck the data types of each variable\ncheck the dimensions of the data\nlook at a few rows and variables\n\n\n\nclass(addh$age)\n\n[1] \"numeric\"\n\nclass(addh$gender)\n\n[1] \"character\"\n\nclass(addh$love)\n\n[1] \"numeric\""
  },
  {
    "objectID": "R introduction_draft_student.html#explore-data-1",
    "href": "R introduction_draft_student.html#explore-data-1",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nFor more information on the dataset,\n\nsummary(): numeric summaries\nstr(): data types and sample data\ncolnames() or names(): names of columns/variables\ndim(): dimensions\nView(): view all data in RStudio viewer\nhead(): top 10 rows\ntail(): bottom 10 rows"
  },
  {
    "objectID": "R introduction_draft_student.html#explore-data-2",
    "href": "R introduction_draft_student.html#explore-data-2",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nstr(addh)\n\nspc_tbl_ [3,000 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id           : num [1:3000] 1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num [1:3000] 18 22 18 26 27 21 19 27 18 25 ...\n $ gender       : chr [1:3000] \"female\" \"male\" \"female\" \"female\" ...\n $ income       : num [1:3000] 19252 11617 16189 18194 24484 ...\n $ logincome    : num [1:3000] 9.87 9.36 9.69 9.81 10.11 ...\n $ debt         : chr [1:3000] \"yesdebt\" \"nodebt\" \"yesdebt\" \"yesdebt\" ...\n $ love         : num [1:3000] 1 10 10 2 5 10 3 4 1 6 ...\n $ nocheating   : num [1:3000] 7 10 3 1 10 4 10 10 10 3 ...\n $ money        : num [1:3000] 9 3 5 3 9 9 9 7 3 8 ...\n $ paypercent   : num [1:3000] 46 56 42 82 93 42 89 55 43 53 ...\n $ logpaypercent: num [1:3000] 3.83 4.03 3.74 4.41 4.53 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_double(),\n  ..   age = col_double(),\n  ..   gender = col_character(),\n  ..   income = col_double(),\n  ..   logincome = col_double(),\n  ..   debt = col_character(),\n  ..   love = col_double(),\n  ..   nocheating = col_double(),\n  ..   money = col_double(),\n  ..   paypercent = col_double(),\n  ..   logpaypercent = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\nhead(addh, n=5)\n\n# A tibble: 5 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;\n\n\n\n\n(in dplyr) slice_sample(): randomly select n rows"
  },
  {
    "objectID": "R introduction_draft_student.html#explore-data-3",
    "href": "R introduction_draft_student.html#explore-data-3",
    "title": "R - An Introduction",
    "section": "Explore data",
    "text": "Explore data\n\nTo get information about one variable, use the following functions:\n\ntable(): get a table summarizing counts\nunique(): get the unique responses for a variable\nsort(): sort the numerically (or alphabetically)\nhist(): produce a histogram\n\n\n\n##| output-location: fragment\n\ntable(addh$gender)\n\n\nfemale   male \n  1503   1497 \n\n\n\n##| output-location: fragment\n\ntable(addh$age)\n\n\n 18  19  20  21  22  23  24  25  26  27 \n306 299 300 315 303 265 301 278 296 337 \n\n\n\n##| output-location: fragment\n\nsort(unique(addh$age))\n\n [1] 18 19 20 21 22 23 24 25 26 27"
  },
  {
    "objectID": "R introduction_draft_student.html#subset-data",
    "href": "R introduction_draft_student.html#subset-data",
    "title": "R - An Introduction",
    "section": "Subset data",
    "text": "Subset data\n\nuse the base R subsetting syntax with [row index, column index]\n\n\n##| output-location: fragment\n\n# get first column, rows 1 through 3 \naddh[1:3,1]\n\n# A tibble: 3 × 1\n     id\n  &lt;dbl&gt;\n1     1\n2     2\n3     3\n\n\n\nExercise: How would you subset the observation in the third row and the fifth column?\n\n\n##| output-location: fragment\n\n# get everything besides first row\naddh[-1, ]\n\n# A tibble: 2,999 × 11\n      id   age gender income logincome debt     love nocheating money paypercent\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1     2    22 male   11617.      9.36 nodebt     10         10     3         56\n 2     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n 3     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n 4     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n 5     6    21 female 22353.     10.0  nodebt     10          4     9         42\n 6     7    19 male   11842.      9.38 yesdebt     3         10     9         89\n 7     8    27 female 19874.      9.90 nodebt      4         10     7         55\n 8     9    18 male   27422.     10.2  nodebt      1         10     3         43\n 9    10    25 female  9968.      9.21 yesdebt     6          3     8         53\n10    11    24 female 26354.     10.2  nodebt     10         10    10         52\n# ℹ 2,989 more rows\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction_draft_student.html#exercises",
    "href": "R introduction_draft_student.html#exercises",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nSuppose that you want to know a few things from the dataset:\n\nWhat’s the median income of this sample? What’s the mean age?\nOn average, do the young adults surveyed think money, no cheating, or love is more important in a relationship?\nWhat are the answer choices for debt?\n\nhint: for simple calculations, you can use the base R functions mean(), median(), and table()\n\n\n##| output-location: fragment\n\nmedian(addh$income)\n\n[1] 15127.34\n\nmean(addh$age)\n\n[1] 22.51133\n\nunique(addh$debt)\n\n[1] \"yesdebt\" \"nodebt\" \n\n\n\n# as a precursor to the next section, we can use dplyr to do the same thing\n\nlibrary(dplyr)\nsummary(addh,\n        mean_money = mean(money),\n        mean_nocheating = mean(nocheating),\n        mean_love = mean(love))\n\n       id              age           gender              income     \n Min.   :   1.0   Min.   :18.00   Length:3000        Min.   : 1008  \n 1st Qu.: 750.8   1st Qu.:20.00   Class :character   1st Qu.: 9372  \n Median :1500.5   Median :22.00   Mode  :character   Median :15127  \n Mean   :1500.5   Mean   :22.51                      Mean   :15231  \n 3rd Qu.:2250.2   3rd Qu.:25.00                      3rd Qu.:20518  \n Max.   :3000.0   Max.   :27.00                      Max.   :41700  \n                                                                    \n   logincome          debt                love          nocheating    \n Min.   : 3.292   Length:3000        Min.   : 1.000   Min.   : 1.000  \n 1st Qu.: 9.222   Class :character   1st Qu.: 5.000   1st Qu.: 5.000  \n Median : 9.650   Mode  :character   Median :10.000   Median :10.000  \n Mean   : 9.482                      Mean   : 7.707   Mean   : 7.694  \n 3rd Qu.: 9.939                      3rd Qu.:10.000   3rd Qu.:10.000  \n Max.   :10.638                      Max.   :10.000   Max.   :10.000  \n NA's   :97                                                           \n     money          paypercent     logpaypercent  \n Min.   : 1.000   Min.   :  1.00   Min.   :0.000  \n 1st Qu.: 3.000   1st Qu.: 25.00   1st Qu.:3.219  \n Median : 6.000   Median : 51.00   Median :3.932  \n Mean   : 5.569   Mean   : 50.45   Mean   :3.629  \n 3rd Qu.: 8.000   3rd Qu.: 76.00   3rd Qu.:4.331  \n Max.   :10.000   Max.   :100.00   Max.   :4.605"
  },
  {
    "objectID": "R introduction_draft_student.html#data-manipulation",
    "href": "R introduction_draft_student.html#data-manipulation",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\nThe dplyr package is part of the tidyverse and is used for data manipulation\ndplyr functions include:\n\nfilter(): subset rows\nselect(): subset columns\nmutate(): create new variables\nsummarise(): summarize data\narrange(): sort data\ngroup_by(): group data\n\nvery important function: pipe operator %&gt;% from the magrittr package\n\nallows you to chain functions together\n\nbasic structure of the dplyr functions\n\nfunction(dataframe, operation 1 to perform, opertaion 2 to perform,…)"
  },
  {
    "objectID": "R introduction_draft_student.html#data-manipulation-1",
    "href": "R introduction_draft_student.html#data-manipulation-1",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\ndplyr - select\n\nit can be used with operations, like\n\nstarts_with()\nends_with()\ncontains()\nmatches()\netc…\n\n\n\npay_variables &lt;- select(addh, contains(\"pay\"))\n\nhead(pay_variables, 5)\n\n# A tibble: 5 × 2\n  paypercent logpaypercent\n       &lt;dbl&gt;         &lt;dbl&gt;\n1         46          3.83\n2         56          4.03\n3         42          3.74\n4         82          4.41\n5         93          4.53"
  },
  {
    "objectID": "R introduction_draft_student.html#data-manipulation-2",
    "href": "R introduction_draft_student.html#data-manipulation-2",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\ndplyr - filter\n\nfilter rows based on conditions\n\n\nnodebt_income &lt;- filter(addh, debt == \"nodebt\" & income &gt;= 10000)\n\nnrow(nodebt_income)\n\n[1] 1096\n\n\n\nnomissing_income &lt;- filter(addh, !is.na(income)) # only keep obs that are NOT (!) na\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr\n\nnrow(nomissing_income)\n\n[1] 3000\n\n\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr"
  },
  {
    "objectID": "R introduction_draft_student.html#data-manipulation-3",
    "href": "R introduction_draft_student.html#data-manipulation-3",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\ndplyr - arrange\n\nsort data based on one or more columns\ntask: find the two observations who think money is extremely important for a relationship (10 on money) but who pay for the fewest percentage of dates (paypercent)\n\n\naddh %&gt;%\n  filter(money == 10) %&gt;%\n  arrange(paypercent) %&gt;%\n  head(2)\n\n# A tibble: 2 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   811    22 male   34161.     10.4  yesdebt    10          9    10          2\n2  2086    20 male    4816.      8.48 yesdebt    10         10    10          2\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction_draft_student.html#data-manipulation-4",
    "href": "R introduction_draft_student.html#data-manipulation-4",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\ndplyr - mutate\n\ncreate new variables added to the dataset\ntask: add a variable with the average rating for nocheating, money, and love’s importance for a relationship (sum divided by 3) and another variable that logs that rating\n\n\naddh&lt;- mutate(addh,\n              rateavg=(love + money + nocheating)/3,\n              rateavglog=log(rateavg))\n\nhead(addh, 5)\n\n# A tibble: 5 × 13\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\nCaution\n\nusing the same column name or same object name, you overwrite the original object or column"
  },
  {
    "objectID": "R introduction_draft_student.html#data-manipulation-5",
    "href": "R introduction_draft_student.html#data-manipulation-5",
    "title": "R - An Introduction",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\ndplyr - group_by and summarise\n\ngroup data by one or more variables and then summarize the data according to the groups\ntask: find the average “not cheating importance” for different gender\n\n\naddh %&gt;% \n  group_by(gender) %&gt;% \n  summarize(mean_nocheating = mean(nocheating))\n\n# A tibble: 2 × 2\n  gender mean_nocheating\n  &lt;chr&gt;            &lt;dbl&gt;\n1 female            7.79\n2 male              7.60\n\n\n\nSummarise has a number of operations for creating summary statistics\n\nmean(), median(), min(), max(), sd(), n(), n_distinct(), first, last, etc…"
  },
  {
    "objectID": "R introduction_draft_student.html#exercises-1",
    "href": "R introduction_draft_student.html#exercises-1",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nExercise one\n\nthe number of females and males by debt status\nthe percentage in each (debt x gender) category as a fraction of all observations\nthe number of distinct ratings of love’s importance in each of these debt x gender categories\n\n\n\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(percentage = n()/nrow(addh),\n            n_distinct_love = n_distinct(love))\n\n# A tibble: 4 × 4\n# Groups:   gender [2]\n  gender debt    percentage n_distinct_love\n  &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt;           &lt;int&gt;\n1 female nodebt       0.256              10\n2 female yesdebt      0.245              10\n3 male   nodebt       0.248              10\n4 male   yesdebt      0.251              10"
  },
  {
    "objectID": "R introduction_draft_student.html#exercises-2",
    "href": "R introduction_draft_student.html#exercises-2",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\nExercise two\n\n\nGroup the data by gender and debt status first\n\nFind the average rating of love, no cheating, and money’s importance for a relationship in each group\nArrange the groups by their rating of money’s importance to a relationship from the highest to rating to the lowest rating\n\n\n\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(mean_love = mean(love),\n            mean_nocheating = mean(nocheating),\n            mean_money = mean(money)) %&gt;%\n  arrange(desc(mean_money))\n\n# A tibble: 4 × 5\n# Groups:   gender [2]\n  gender debt    mean_love mean_nocheating mean_money\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;           &lt;dbl&gt;      &lt;dbl&gt;\n1 male   yesdebt      7.76            7.72       5.66\n2 female yesdebt      7.57            7.75       5.59\n3 female nodebt       7.82            7.83       5.54\n4 male   nodebt       7.68            7.47       5.49"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables",
    "href": "R introduction_draft_student.html#recoding-variables",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nRecoding variables is a common task in data analysis for social science research\n\nconvert a variable from one format to another\ncreate a new variable based on the values of an existing variable (or of multiple existing variables)\n\nsome typical recoding tasks\n\nconvert a continuous variable to a categorical variable\nconvert a categorical variable to a continuous variable\ncreate categorical variables based on conditions\n\nOur focus\n\ndata types\nlogical statements\ncase_when() function"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-1",
    "href": "R introduction_draft_student.html#recoding-variables-1",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nchanging data types\n\nuse the mutate() function to change the data type of a variable\n\nas.character()\nas.numeric()\nas.factor()\nas.integer()\nas.logical()\n\n\n\naddh2 &lt;- addh %&gt;% \n            mutate(\n               age = as.character(age),\n               debt = as.factor(debt)\n               )\n\nhead(addh2, 3)\n\n# A tibble: 3 × 13\n     id age   gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1 18    female 19252.      9.87 yesdebt     1          7     9         46\n2     2 22    male   11617.      9.36 nodebt     10         10     3         56\n3     3 18    female 16189.      9.69 yesdebt    10          3     5         42\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-2",
    "href": "R introduction_draft_student.html#recoding-variables-2",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\ncreate a vector\n\nuse c to string together the elements\n\n\nagevec&lt;- c(18, 21, 23, 25, 27, 30)\n\nagevec\n\n[1] 18 21 23 25 27 30\n\n\n\nclass(agevec)\n\n[1] \"numeric\"\n\n\n\ngendervec &lt;- c(\"male\", \"female\", \"other\", \"female\", \"female\", \"male\")\ngendervec\n\n[1] \"male\"   \"female\" \"other\"  \"female\" \"female\" \"male\"  \n\n\n\nclass(gendervec)\n\n[1] \"character\""
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-3",
    "href": "R introduction_draft_student.html#recoding-variables-3",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\ncreate a vector\n\nElements in a vector need to be of the same type, otherwise, type coercion happens\n\n\nc(28, \"28\", TRUE)\n\n[1] \"28\"   \"28\"   \"TRUE\"\n\n\n\nc(28, \"28\", TRUE) %&gt;% class()\n\n[1] \"character\"\n\n\n\nc(1,2,3, TRUE, FALSE)\n\n[1] 1 2 3 1 0\n\nc(1,2,3, TRUE, FALSE) %&gt;% class()\n\n[1] \"numeric\""
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-4",
    "href": "R introduction_draft_student.html#recoding-variables-4",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\ndata types\n\nconvert from one type to another using the following functions:\n\nas.numeric()\nas.character()\nas.factor()\n\n\n\nas.character(agevec)\n\n[1] \"18\" \"21\" \"23\" \"25\" \"27\" \"30\"\n\n\n\nas.numeric(gendervec)\n\n[1] NA NA NA NA NA NA"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-5",
    "href": "R introduction_draft_student.html#recoding-variables-5",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\ndata types\n\nVectors can have a factor type\n\nlooks like a character vector\nbut is actually a number under the hood (“labelled data”)\n\n\n\ngenderfactorvec&lt;- factor(gendervec,\n                         levels=c(\"male\", \"female\", \"other\"))\n\ngenderfactorvec\n\n[1] male   female other  female female male  \nLevels: male female other\n\n\n\nclass(genderfactorvec)\n\n[1] \"factor\"\n\n\n\nas.numeric(genderfactorvec)\n\n[1] 1 2 3 2 2 1"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-6",
    "href": "R introduction_draft_student.html#recoding-variables-6",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\ncreate a vector\n\nthere are functions to help you create the vector more efficiently:\n\nrep: repeat the same thing multiple times\nseq: create a sequence of numbers\npaste: stick together character and numeric info\nsample: for vectors where we want to randomly sample from some larger pool\n\n\n\nrep(1, 5)\n\n[1] 1 1 1 1 1\n\n\n\nseq(from=1997, to=2024, by=5)\n\n[1] 1997 2002 2007 2012 2017 2022\n\n\n\npaste(\"age\", seq(from=22, to=30, by=1),\n      sep=\"_\")\n\n[1] \"age_22\" \"age_23\" \"age_24\" \"age_25\" \"age_26\" \"age_27\" \"age_28\" \"age_29\"\n[9] \"age_30\""
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-7",
    "href": "R introduction_draft_student.html#recoding-variables-7",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nfrom vectors to dataframes\n\nOne way to create a dataframe\n\nuse bind_cols() to attach same-length vectors together as columns in a tibble\nVectors can be different types\n\n\n\nbind_cols(age=agevec, gender=gendervec)\n\n# A tibble: 6 × 2\n    age gender\n  &lt;dbl&gt; &lt;chr&gt; \n1    18 male  \n2    21 female\n3    23 other \n4    25 female\n5    27 female\n6    30 male"
  },
  {
    "objectID": "R introduction_draft_student.html#exercises-3",
    "href": "R introduction_draft_student.html#exercises-3",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\naddh2&lt;- addh %&gt;% \n            mutate(gender=factor(gender,\n                                 levels=c(\"male\", \"female\")\n                                 )\n               )\n\nstr(addh2$gender)\n\n Factor w/ 2 levels \"male\",\"female\": 2 1 2 2 2 2 1 2 1 2 ...\n\nvec1&lt;- as.character(addh2$gender)\nvec2&lt;- as.numeric(addh2$gender)\n\n\nconvert the variable gender in addh to a factor variable\nwhat happens if you try to convert the variable to character by using as.character after the factor conversion\nwhat happens if you try to convert the variable to number by using as.numeric after the factor conversion"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-8",
    "href": "R introduction_draft_student.html#recoding-variables-8",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nMatrices in R\n\nA matrix is a two-dimensional array\n\nall elements must be of the same type\ncan be created using the matrix() function\ncan be created from a vector using the dim() function\n\n\n\nmatrix1&lt;- matrix(1:15, nrow=3, ncol=5)\n\nmatrix1\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    7   10   13\n[2,]    2    5    8   11   14\n[3,]    3    6    9   12   15"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-9",
    "href": "R introduction_draft_student.html#recoding-variables-9",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nMatrices in R - some basic operations\n\ndim(matrix1)\n\n[1] 3 5\n\n\n\ncolnames(matrix1)&lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrownames(matrix1)&lt;- c(\"X\", \"Y\", \"Z\")\n\nmatrix1\n\n  A B C  D  E\nX 1 4 7 10 13\nY 2 5 8 11 14\nZ 3 6 9 12 15\n\n\n\nmatrix1[2,3]\n\n[1] 8\n\n\n\nmatrix1[2,]\n\n A  B  C  D  E \n 2  5  8 11 14"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-10",
    "href": "R introduction_draft_student.html#recoding-variables-10",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nMatrices in R - some basic operations\n\nA&lt;- matrix(1:6, nrow=2, ncol=3)\nB&lt;- matrix(7:12, nrow=3, ncol=2)\n\n\nprint(A %*% B)\n\n     [,1] [,2]\n[1,]   76  103\n[2,]  100  136\n\nprint(B %*% A)\n\n     [,1] [,2] [,3]\n[1,]   27   61   95\n[2,]   30   68  106\n[3,]   33   75  117\n\n\n\nprint(t(A))\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-11",
    "href": "R introduction_draft_student.html#recoding-variables-11",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nMatrices in R - some basic operations\n\nC&lt;- matrix(c(2,5,3,1,3,6,2,9,5), nrow=3, ncol=3)\nprint(solve(C))\n\n            [,1]       [,2]        [,3]\n[1,]  1.14705882 -0.2058824 -0.08823529\n[2,] -0.05882353 -0.1176471  0.23529412\n[3,] -0.61764706  0.2647059 -0.02941176\n\n\n\nprint(det(C))\n\n[1] -34\n\n\n\nprint(eigen(C))\n\neigen() decomposition\n$values\n[1] 12.502029 -3.320941  0.818912\n\n$vectors\n           [,1]        [,2]       [,3]\n[1,] -0.1946720 -0.07646107 -0.8799055\n[2,] -0.7265653 -0.79546586  0.1194865\n[3,] -0.6589428  0.60115536  0.4598796"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-12",
    "href": "R introduction_draft_student.html#recoding-variables-12",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nlogical statements\n\nlet us start from discussing logical operators first\nthe main logical operators used in R are:\n\n\\(==\\) (equal to)\n\\(!=\\) (not equal to)\n\\(!\\) (not)\n\\(&lt;\\) (less than)\n\\(&lt;=\\) (less than or equal to)\n\\(&gt;\\) (greater than)\n\\(&gt;=\\) (greater than or equal to)\n\\(\\&\\) (and)\n\\(|\\) (or)"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-13",
    "href": "R introduction_draft_student.html#recoding-variables-13",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nlogical statements\n\nlogical statements are used to filter data, create new variables, and recode variables\n\nifelse() function\n\n\n\naddh2&lt;- addh %&gt;% \n            mutate(\n               money_over_love = ifelse(money &gt; love, 1, 0),\n               .after = id\n               )\n\nhead(addh2, 5)\n\n# A tibble: 5 × 14\n     id money_over_love   age gender income logincome debt     love nocheating\n  &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n1     1               1    18 female 19252.      9.87 yesdebt     1          7\n2     2               0    22 male   11617.      9.36 nodebt     10         10\n3     3               0    18 female 16189.      9.69 yesdebt    10          3\n4     4               1    26 female 18194.      9.81 yesdebt     2          1\n5     5               1    27 female 24484.     10.1  yesdebt     5         10\n# ℹ 5 more variables: money &lt;dbl&gt;, paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;,\n#   rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\naddh3&lt;- addh %&gt;% \n            mutate(\n               money_or_love = ifelse(money==love, \"same\",\n                                      ifelse(love &gt; money, \"love greater\", \"money greater\")),\n               .after = id\n               )\n\nhead(addh3, 5)\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-14",
    "href": "R introduction_draft_student.html#recoding-variables-14",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\nlogical statements\n\nuse case_when() if there are 3 or more conditions for creating a variable\nits syntax is the following:\n\ncase_when(logical condition ~ value assigned, logical condition 2 ~ value assigned. . . .default = value if does not fit other logical conditions)\n\n\n\naddh3&lt;- addh %&gt;% \n  mutate(\n    money_or_love = case_when(\n      money==love ~ \"same\",\n      love &gt; money ~ \"love greater\",\n      TRUE ~ \"money greater\"\n    ),\n    .after = id\n  )\n\nhead(addh3, 5)\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction_draft_student.html#exercises-4",
    "href": "R introduction_draft_student.html#exercises-4",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\ncreate a new variable called money_or_love in the addh dataset\n\nthe variable should have the following categories:\n\n“extreme” if person either codes love or money as 9 or 10\n“lovegreater” if love &gt; money\n“same” if love == money\n“moneygreater” if money &gt; love\nNA if none of the above"
  },
  {
    "objectID": "R introduction_draft_student.html#recoding-variables-15",
    "href": "R introduction_draft_student.html#recoding-variables-15",
    "title": "R - An Introduction",
    "section": "Recoding Variables",
    "text": "Recoding Variables\n\ncreate a binary vector\n\nincome_75&lt;- quantile(addh$income)[4]\n\naddh2&lt;- addh %&gt;% \n  mutate(high_income=ifelse(income &gt; income_75, 1, 0))\n\nincome_25 &lt;- quantile(addh$income)[2]\n\naddh2&lt;- addh2 %&gt;% \n  mutate(income_level=case_when(income &lt;= income_25 ~ \"low\",\n                                income &gt;=income_75 ~\"high\", \n                                .default=\"medium\"),\n         .after = id)\n\nhead(addh2, 5)\n\n# A tibble: 5 × 15\n     id income_level   age gender income logincome debt    love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 medium          18 female 19252.      9.87 yesde…     1          7     9\n2     2 medium          22 male   11617.      9.36 nodebt    10         10     3\n3     3 medium          18 female 16189.      9.69 yesde…    10          3     5\n4     4 medium          26 female 18194.      9.81 yesde…     2          1     3\n5     5 high            27 female 24484.     10.1  yesde…     5         10     9\n# ℹ 5 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;, high_income &lt;dbl&gt;"
  },
  {
    "objectID": "R introduction_draft_student.html#looping",
    "href": "R introduction_draft_student.html#looping",
    "title": "R - An Introduction",
    "section": "Looping",
    "text": "Looping\n\nLoops are used to repeat a block of code multiple times\n\nfor loop\nwhile loop\nrepeat loop\nbreak and next statements\n\nLoops are useful for:\n\nautomating repetitive tasks\niterating over elements in a list or vector\ncreating new variables or dataframes\nrunning simulations\n\n\n\n\nLoops can be slow in R\n\nuse vectorized functions whenever possible\nuse the apply family of functions\nuse the purrr package"
  },
  {
    "objectID": "R introduction_draft_student.html#for-loops",
    "href": "R introduction_draft_student.html#for-loops",
    "title": "R - An Introduction",
    "section": "For loops",
    "text": "For loops\n\nThe for loop is the most common type of loop in R\n\nit repeats a block of code a specified number of times\nit can go through every element of a vector\n\nsyntax: for (i in vector) {code to execute}\n\n\nit can iterate through a set number of elements in a vector\n\nsyntax: for (i in 1:length(vector)) {code to execute}\n\n\nThe for loop is useful for:\n\ncreating new variables\nrunning simulations\niterating over elements in a list or vector\nautomating repetitive tasks\n\n\n\n\nSteps to turn into a for loop:\n\nInitialize a vector to store results- this time it will store an entire vector of results rather than one result. Can either do: 1.1 Initialize a vector of a certain length: vec &lt;- vector(length = desired length) 1.2 Initialize an empty vector: vec &lt;- c()\nUse the for statement to tell the loop what to iterate through.\nCopy and paste the code from the single-observation case into the “meat” part of the for loop sandwich\nFor step three, make sure to add indexing where appropriate"
  },
  {
    "objectID": "R introduction_draft_student.html#for-loops-sample-means",
    "href": "R introduction_draft_student.html#for-loops-sample-means",
    "title": "R - An Introduction",
    "section": "For loops — sample means",
    "text": "For loops — sample means\n\nset.seed(123456)\n\nsample_means&lt;- numeric(length=1000)\n\nfor (i in seq_along(sample_means)) {\n  samp&lt;- sample(addh3$money, size = 800, replace=TRUE)\n  sample_means[i]&lt;- mean(samp)\n}\n\nmean(sample_means)\n\n[1] 5.57076\n\n\n\nlibrary(tidyverse)\n\nggplot(as.data.frame(sample_means), aes(sample_means)) +\n  #geom_histogram(bins=30)+\n  geom_density()+\n  geom_vline(xintercept = mean(sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means\",\n       y=\"Frequency\")+\n  theme_minimal()"
  },
  {
    "objectID": "R introduction_draft_student.html#write-a-function",
    "href": "R introduction_draft_student.html#write-a-function",
    "title": "R - An Introduction",
    "section": "Write a function",
    "text": "Write a function\n\nFunctions are blocks of code that can be reused\n\nthey take input arguments\nthey return output\nthey can be used in loops, apply functions, and other functions\nthey can be used to create new variables, summarize data, and run simulations\n\nthe basic structure of a function is:\n\nfunction_name &lt;- function(input arguments) {code to execute}\nreturn(output)\n\nwe now touch upon some basics\n\n\n\nWhat problem is the function trying to solve?\nWhat are the function’s arguments in this case? (as a function’s inputs)\nWhat is the function doing with those arguments?\nWhat does the function return? What class is it? (check it using R)"
  },
  {
    "objectID": "R introduction_draft_student.html#functions---basics",
    "href": "R introduction_draft_student.html#functions---basics",
    "title": "R - An Introduction",
    "section": "functions - basics",
    "text": "functions - basics\n\nLet us start with a simple function, z-score of a variable\n\n. . .\n\nzscore&lt;- function(x) {\n  zscore&lt;- (x - mean(x))/sd(x)\n  return(zscore)\n}\n\nz_income&lt;- zscore(addh$income)\n\nhead(z_income, 10)\n\n [1]  0.5221372 -0.4693026  0.1243644  0.3847371  1.2013581  0.9246830\n [7] -0.4400798  0.6028251  1.5828892 -0.6833786\n\n\n. . .\n\nmore complicated example\n\n\nsample_means&lt;- function(data, n, reps) {\n  sample_means&lt;- numeric(length=reps)\n  \n  for (i in seq_along(sample_means)) {\n    samp&lt;- sample(data, size = n, replace=TRUE)\n    sample_means[i]&lt;- mean(samp)\n  }\n  \n  return(sample_means)\n}\n\n. . .\n\nage_sample_means&lt;- sample_means(addh$age, 500, 1000)\n\nggplot(as.data.frame(age_sample_means), aes(age_sample_means)) +\n  geom_density()+\n  geom_vline(xintercept = mean(age_sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means of Age\",\n       y=\"Frequency\")+\n  theme_bw()"
  },
  {
    "objectID": "R introduction_draft_student.html#exercises-5",
    "href": "R introduction_draft_student.html#exercises-5",
    "title": "R - An Introduction",
    "section": "Exercises",
    "text": "Exercises\n\ncreate a function that incorporate both sample means functions and the density plot as above\nplot the distribution of sample means for the variable love in the addh dataset using the function"
  },
  {
    "objectID": "R introduction_draft_student.html#lists-and-map-functions-from-purrr-library",
    "href": "R introduction_draft_student.html#lists-and-map-functions-from-purrr-library",
    "title": "R - An Introduction",
    "section": "Lists and map functions from purrr library",
    "text": "Lists and map functions from purrr library\n\nLists are a way to store multiple objects in R\n\ncan store vectors, dataframes, and other lists\ncan store objects of different classes\n\n\n\nlist1&lt;- list(1, c(8,9,10,11,12), data.frame(x=1:10, y=11:20))\n\nlist1\n\n[[1]]\n[1] 1\n\n[[2]]\n[1]  8  9 10 11 12\n\n[[3]]\n    x  y\n1   1 11\n2   2 12\n3   3 13\n4   4 14\n5   5 15\n6   6 16\n7   7 17\n8   8 18\n9   9 19\n10 10 20"
  },
  {
    "objectID": "R introduction_draft_student.html#lists-and-map-functions-from-purrr-library-1",
    "href": "R introduction_draft_student.html#lists-and-map-functions-from-purrr-library-1",
    "title": "R - An Introduction",
    "section": "Lists and map functions from purrr library",
    "text": "Lists and map functions from purrr library\n\nThe syntax is map(mylist, myfunction, functionoptions) and can change depending on the type of output for your analysis\n\n\nlibrary(purrr)\n\nmap(list1, length)\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 5\n\n[[3]]\n[1] 2\n\n\n\nmap(list1, class)\n\n[[1]]\n[1] \"numeric\"\n\n[[2]]\n[1] \"numeric\"\n\n[[3]]\n[1] \"data.frame\"\n\n\n\nmap(list1, summary)\n\n[[1]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\n[[2]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      8       9      10      10      11      12 \n\n[[3]]\n       x               y        \n Min.   : 1.00   Min.   :11.00  \n 1st Qu.: 3.25   1st Qu.:13.25  \n Median : 5.50   Median :15.50  \n Mean   : 5.50   Mean   :15.50  \n 3rd Qu.: 7.75   3rd Qu.:17.75  \n Max.   :10.00   Max.   :20.00"
  },
  {
    "objectID": "R introduction_draft_student.html#tidy-approach-to-data",
    "href": "R introduction_draft_student.html#tidy-approach-to-data",
    "title": "R - An Introduction",
    "section": "Tidy approach to data",
    "text": "Tidy approach to data\n\nThe tidy approach (Wickham (2014)) to data is a way to organize data in a consistent format\n\neach variable is a column\neach observation is a row\neach type of observational unit is a table\neach value is a cell\n\n\n\n\nFive common problems for messy data\n\nColumn headers are values, not variable names\nMultiple variables are stored in one column\nVariables are stored in both rows and columns\nMultiple types of observational units are stored in the same table\nA single observational unit is stored in multiple tables"
  },
  {
    "objectID": "R introduction_draft_student.html#reshape-the-data",
    "href": "R introduction_draft_student.html#reshape-the-data",
    "title": "R - An Introduction",
    "section": "Reshape the data",
    "text": "Reshape the data"
  },
  {
    "objectID": "R introduction_draft_student.html#let-us-start-from-a-real-example",
    "href": "R introduction_draft_student.html#let-us-start-from-a-real-example",
    "title": "R - An Introduction",
    "section": "let us start from a “real” example",
    "text": "let us start from a “real” example\n\nlibrary(tidyr)\n\nsleep_wide&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\"),\n                    day1=c(8, 7, 6),\n                    day2=c(6, 6, 5),\n                    day3=c(5, 4, 4))\n\nsleep_wide\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4\n\n\n\nsleep_long&lt;- sleep_wide %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"sleep_hours\")\n  \n\n\nsleep_long\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     day1            8\n2 KT     day2            6\n3 KT     day3            5\n4 Olivia day1            7\n5 Olivia day2            6\n6 Olivia day3            4\n7 Dean   day1            6\n8 Dean   day2            5\n9 Dean   day3            4\n\n\n\nlibrary(stringr)\n\nsleep_long %&gt;% \n  mutate(day=stringr::str_sub(day,-1, -1))\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     1               8\n2 KT     2               6\n3 KT     3               5\n4 Olivia 1               7\n5 Olivia 2               6\n6 Olivia 3               4\n7 Dean   1               6\n8 Dean   2               5\n9 Dean   3               4\n\n\n\n\nseparate(col = office_housing, into = c(“office”, “housing”), sep = “_“)\nsleep_united &lt;- sleep_pls_unite %&gt;% unite(col = “office”, building, floor, sep = ““)"
  },
  {
    "objectID": "R introduction_draft_student.html#reshape-the-data-1",
    "href": "R introduction_draft_student.html#reshape-the-data-1",
    "title": "R - An Introduction",
    "section": "Reshape the data",
    "text": "Reshape the data\n\nfrom long to wide\n\nsleep_wide2&lt;- sleep_long %&gt;% \n  pivot_wider(names_from=day,\n              values_from=sleep_hours)\n\nsleep_wide2\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4"
  },
  {
    "objectID": "R introduction_draft_student.html#execises",
    "href": "R introduction_draft_student.html#execises",
    "title": "R - An Introduction",
    "section": "Execises",
    "text": "Execises\n. . .\n\nsleep_wide2&lt;- tibble(name=c(rep(\"KT\",2), rep(\"Olivia\",2), rep(\"Dean\",2)),\n                     activity=rep(c(\"sleep\", \"play\"),3),\n                     day1=c(8, 2, 7, 2, 5, 3),\n                     day2=c(6, 1, 1, 3, 6, 2),\n                     day3=c(5, 1, 4, 1, 4, 3))\n\nsleep_wide2\n\n# A tibble: 6 × 5\n  name   activity  day1  day2  day3\n  &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     sleep        8     6     5\n2 KT     play         2     1     1\n3 Olivia sleep        7     1     4\n4 Olivia play         2     3     1\n5 Dean   sleep        5     6     4\n6 Dean   play         3     2     3\n\n\n. . .\n\nhow to express the data in a tidy format?\n\ni.e. name, day, sleep, play as columns\n\n\n. . .\n\nsleep_tidy&lt;- sleep_wide2 %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"hours\") %&gt;% \n  mutate(day=stringr::str_sub(day, -1, -1)) %&gt;% \n  pivot_wider(names_from=activity,\n              values_from=hours)\n\nsleep_tidy\n\n# A tibble: 9 × 4\n  name   day   sleep  play\n  &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     1         8     2\n2 KT     2         6     1\n3 KT     3         5     1\n4 Olivia 1         7     2\n5 Olivia 2         1     3\n6 Olivia 3         4     1\n7 Dean   1         5     3\n8 Dean   2         6     2\n9 Dean   3         4     3"
  },
  {
    "objectID": "R introduction_draft_student.html#export-data",
    "href": "R introduction_draft_student.html#export-data",
    "title": "R - An Introduction",
    "section": "Export data",
    "text": "Export data\n\nThe last step in data analysis is to export the data\n\nsave the data in a format that can be shared with others\nsave the data in a format that can be read by other software\nsave the data in a format that can be used in other software\n\nExport command depends on the type of file you are trying to write to\n\nwrite.csv for CSV\nwrite.xslx for Excel\nwrite.dta for Stata file\netc\n\nBy default, the new file will be saved in current working directory\n\nIf you want to save it elsewhere, need to specify the path\n\n\n\nwrite_csv(sleep_tidy, \"sleep_tidy.csv\")\n\nlibrary(haven)\nwrite_dta(sleep_tidy, \"c:/Users/KT/Downloads/sleep_tidy.dta\")"
  },
  {
    "objectID": "R introduction_draft_student.html#basic-merge",
    "href": "R introduction_draft_student.html#basic-merge",
    "title": "R - An Introduction",
    "section": "Basic merge",
    "text": "Basic merge\n\nThe typical merge in R is left_join\n\nkeep all rows from “left” table even if observation doesn’t have matching row in “right” table\nthis will drop observations from the joining data when they are not matched to the “left” table\n\n\n\nsleep_tidy&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"May\", \"Mary\"),\n                     sleep=c(8, 7, 6, 5, 5),\n                     play=c(2, 2, 3, 3, 2))\n\nsleep_tidy2&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"Peter\", \"Susan\"),\n                      study=c(3, 4, 5, 2, 3),\n                      work=c(8, 10, 9, 6, 5))\n\nsleep_tidy3&lt;- left_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy3\n\n# A tibble: 5 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n\n\n\nsleep_tidy4&lt;- left_join(sleep_tidy2, sleep_tidy, by=\"name\")\n\nsleep_tidy4\n\n# A tibble: 5 × 5\n  name   study  work sleep  play\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         3     8     8     2\n2 Olivia     4    10     7     2\n3 Dean       5     9     6     3\n4 Peter      2     6    NA    NA\n5 Susan      3     5    NA    NA"
  },
  {
    "objectID": "R introduction_draft_student.html#merge-data",
    "href": "R introduction_draft_student.html#merge-data",
    "title": "R - An Introduction",
    "section": "Merge data",
    "text": "Merge data\n\ninner join Only keep rows of the first data.frame that have corresponding records in the second data.frame\n\n. . .\n\nsleep_tidy5&lt;- inner_join(sleep_tidy, sleep_tidy2, by=\"name\", suffix=c(\"_sleep\", \"_work\"))\n\nsleep_tidy5\n\n# A tibble: 3 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n\n\n. . .\n\nfull join Keep all rows from both dataframes, filling in missing values with NAs\n\n. . .\n\nsleep_tidy6&lt;- full_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy6\n\n# A tibble: 7 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n6 Peter     NA    NA     2     6\n7 Susan     NA    NA     3     5"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2",
    "href": "R introduction_draft_student.html#ggplot2",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\nit starts from the grammar of graphics Wickham (2016)\n\n\n\ndata\naesthetics\ngeoms\nfacets\nstats\nscales\ncoordinates\nthemes\n\n\n\n\n\nsource: University of Melbourne"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-1",
    "href": "R introduction_draft_student.html#ggplot2-1",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nEvery ggplot2 plot has three key components:\n\ndata\nA set of aesthetic mappings between variables in the data and visual properties\nAt least one layer which describes how to render each observation\n\nLayers are usually created with a geom function"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-2",
    "href": "R introduction_draft_student.html#ggplot2-2",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nillustration\n\nUse built-in dataset from ggplot2: mpg\n\ninformation about the fuel economy of popular car models in 1999 and 2008\ncollected by the US Environmental Protection Agency\nhere are some of the variables in the dataset:\n\nmanufacturer, model, year\ndispl (engine displacement in litres)\nhwy (miles per gallon on the highway)\ncty (miles per gallon in the city)\ncyl (number of cylinders)\ndrv (f = front-wheel drive, r = rear wheel drive, 4 = 4wd)\nclass (type of car)\ntrans (type of transmission)\nfl (fuel type)\n\n\n\n\n\nThe mpg dataset is a tibble, a modern version of a data frame\nThe mpg dataset is part of the ggplot2 package\nThe mpg dataset is a tidy dataset\nThis dataset suggests many interesting questions\n\nHow are engine size and fuel economy related?\nDo certain manufacturers care more about fuel economy than others?\nHas fuel economy improved in the last ten years?\n\nList five functions that you could use to get more information about the mpg dataset\nHow can you find out what other datasets are included with ggplot2?\nApart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert cty and hwy into the European standard of l/100km?\nWhich manufacturer has the most models in this dataset?\n\nWhich model has the most variations?\nDoes your answer change if you remove the redundant specification of drive train (e.g. “pathfinder 4wd”, “a4 quattro”) from the model name?"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-3",
    "href": "R introduction_draft_student.html#ggplot2-3",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nLet us plot the relationship between engine size and fuel economy\n\n. . .\n\nlibrary(ggplot2)\n\ndata(mpg)\n\nggplot(data=mpg, mapping=aes(x=displ, y=hwy)) +\n  geom_point()\n\n\n\n\n\n\n\n\n. . .\n\nHow would you describe the relationship between displ and hwy?\n\n\nggplot(mpg, aes(cty, hwy)) + geom_point()\n\n\n\n\n\n\n\nggplot(diamonds, aes(carat, price)) + geom_point()\n\n\n\n\n\n\n\nggplot(economics, aes(date, unemploy)) + geom_line()\n\n\n\n\n\n\n\nggplot(mpg, aes(cty)) + geom_histogram()"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-4",
    "href": "R introduction_draft_student.html#ggplot2-4",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nColour, size, shape and other aesthetic attributes\n\nAesthetics are visual properties of the objects in the plot\n\ncolour, size, shape, linetype, fill, alpha\n\nAesthetics can be mapped to variables in the data\n\naes(colour=variable)\naes(size=variable)\naes(shape=variable)\naes(linetype=variable)\naes(fill=variable)\naes(alpha=variable)"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-5",
    "href": "R introduction_draft_student.html#ggplot2-5",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nColour, size, shape and other aesthetic attributes\n\nggplot(mpg, aes(displ, hwy, colour=class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nggplot(mpg, aes(trans, hwy, colour=class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nggplot2 takes care of the details of converting data (e.g., ‘f’, ‘r’, ‘4’) into aesthetics (e.g., ‘red’, ‘yellow’, ‘green’) with a scale\n\nThere is one scale for each aesthetic mapping in a plot.\nThe scale is also responsible for creating a guide, an axis or legend, that allows you to read the plot, converting aesthetic values back into data values\n\nThe scale functions are:\n\nscale_colour_manual()\nscale_size_manual()\nscale_shape_manual()\nscale_linetype_manual()\nscale_fill_manual()\nscale_alpha_manual()\n\nWhat happens when you map them to continuous values? What about categorical values? What happens when you use more than one aesthetic in a plot?"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-6",
    "href": "R introduction_draft_student.html#ggplot2-6",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2"
  },
  {
    "objectID": "R introduction_draft_student.html#labels",
    "href": "R introduction_draft_student.html#labels",
    "title": "R - An Introduction",
    "section": "labels",
    "text": "labels\n\nLabels are important for making your plot understandable\n\nxlab() and ylab() functions\nlabs() function\n\n\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(color=class)) +\n  labs(x=\"Engine size (litres)\",\n       y=\"Highway fuel economy (miles per gallon)\",\n       title=\"Relationship between engine size and fuel economy\",\n       color=\"Car type\",\n       caption=\"Source: mpg dataset\")+\n  theme_bw()"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-7",
    "href": "R introduction_draft_student.html#ggplot2-7",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nggthemes\n\nlibrary(ggthemes)\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(color=class)) +\n  labs(x=\"Engine size (litres)\",\n       y=\"Highway fuel economy (miles per gallon)\",\n       title=\"Relationship between engine size and fuel economy\",\n       color=\"Car type\",\n       caption=\"Source: mpg dataset\")+\n  theme_economist()+\n  scale_color_tableau()"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-8",
    "href": "R introduction_draft_student.html#ggplot2-8",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nFacets\n\nFacets allow you to create multiple plots that each display a subset of the data\n\nfacet_wrap() creates a grid of plots\nfacet_grid() creates a matrix of plots\n\n\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  facet_wrap(~class)"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-9",
    "href": "R introduction_draft_student.html#ggplot2-9",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nPlot geoms\n\nGeoms are the geometric objects that represent the data in the plot\n\ngeom_point() creates a scatterplot\ngeom_smooth() creates a smoothed line plot\ngeom_histogram() creates a histogram\ngeom_boxplot() creates a boxplot\ngeom_bar() creates a bar plot\ngeom_line() creates a line plot\ngeom_vline() adds a vertical line to the plot\ngeom_hline() adds a horizontal line to the plot\ngeom_abline() adds a diagonal line to the plot"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-10",
    "href": "R introduction_draft_student.html#ggplot2-10",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nAdding a smoother to a plot\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  geom_smooth(span=0.3)"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-11",
    "href": "R introduction_draft_student.html#ggplot2-11",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nBoxplots and related plots\n\nBoxplots, violin and jittered points are useful for visualizing the distribution of a continuous variable\n\n\n##| layout-ncol: 3\n##| fig-width: 4\n\nlibrary(ggpubr)\n\njitter&lt;- ggplot(mpg, aes(drv, hwy)) + geom_jitter()\nboxplot&lt;- ggplot(mpg, aes(drv, hwy)) + geom_boxplot()\nviolin&lt;- ggplot(mpg, aes(drv, hwy)) + geom_violin()\n\nggarrange(jitter, boxplot, violin, ncol=3)\n\n\n\n\n\n\n\n\n\n\nA boxplot is a type of visual shorthand for measures of position (percentiles) that describe a distribution\n\nIt is also useful for identifying potential outliers in the data\nVisual points that display observations that fall more than 1.5 times the IQR from either edge of the box\nThese outlying points are unusual so are plotted individually\n\nA violin plot is a combination of a boxplot and a kernel density plot\n\nIt shows the distribution of the data, the median, and the interquartile range\nIt is useful for comparing the distribution of a continuous variable across different categories\n\nA jittered point plot is useful for visualizing the distribution of a continuous variable across different categories\n\nIt is useful for identifying potential outliers in the data"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-12",
    "href": "R introduction_draft_student.html#ggplot2-12",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nBoxplots\n\nggplot(mpg, aes(class, hwy)) +\n  geom_boxplot()+\n  labs(title=\"Highway fuel economy by car type\",\n       x=\"Car type\",\n       y=\"Highway fuel economy (miles per gallon)\")+\n  coord_flip()+\n  theme_economist()"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-13",
    "href": "R introduction_draft_student.html#ggplot2-13",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nBar plots\n\nBar plots are useful for visualizing the distribution of a categorical variable\n\n\n\n\nggplot(mpg, aes(class)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nggplot(mpg, aes(class, fill=drv)) +\n  geom_bar()"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-14",
    "href": "R introduction_draft_student.html#ggplot2-14",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nHistograms and density plots\n\nHistograms and density plots are useful for visualizing the distribution of a continuous variable\n\n\n\n\nggplot(mpg, aes(hwy)) +\n  geom_histogram() \n\n\n\n\n\n\n\n\n\n\nggplot(mpg, aes(hwy)) +\n  geom_density()"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-15",
    "href": "R introduction_draft_student.html#ggplot2-15",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nHistograms and density plots\n\nden&lt;- ggplot(mpg, aes(displ, colour = drv)) + \n  geom_density(linewidth=0.8)\n  \nhist&lt;- ggplot(mpg, aes(displ, fill = drv)) + \n  geom_histogram(binwidth = 0.5) + \n  facet_wrap(~drv, ncol = 1)\n\nggarrange(den, hist, ncol=2)"
  },
  {
    "objectID": "R introduction_draft_student.html#ggplot2-16",
    "href": "R introduction_draft_student.html#ggplot2-16",
    "title": "R - An Introduction",
    "section": "ggplot2",
    "text": "ggplot2\n\nggsave - save the graph as an image file\n\nggsave(filename=\"mpg_displ.png\",width=6, height=4)"
  },
  {
    "objectID": "R introduction_draft_student.html#final-example---toy-imports-to-the-us-from-1996-2005",
    "href": "R introduction_draft_student.html#final-example---toy-imports-to-the-us-from-1996-2005",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\nit is drawn from Scott (2021)\n\n\nlibrary(tidyverse)\n\ntoy_imports &lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/toyimports.csv\")\n\nhead(toy_imports)\n\n# A tibble: 6 × 8\n  partner  year partner_name       product product_name US_report_import pop2000\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;                   &lt;dbl&gt;   &lt;dbl&gt;\n1 ARE      1998 United Arab Emira…  950341 \"Toys repre…             1.06  3.25e6\n2 ARE      2000 United Arab Emira…  950349 \"Toys repre…            12.0   3.25e6\n3 ARE      2003 United Arab Emira…  950349 \"Toys repre…             4.65  3.25e6\n4 ARE      2005 United Arab Emira…  950320 \"Reduced-si…            49.2   3.25e6\n5 ARG      1996 Argentina           950341 \"Toys repre…             0     3.69e7\n6 ARG      1996 Argentina           950310 \"Electric t…            10.8   3.69e7\n# ℹ 1 more variable: region &lt;dbl&gt;\n\n\n. . .\n\nTask: make a graph showing total toy imports over time for the U.S.’s top 5 trading partners by total dollar value of toys imported"
  },
  {
    "objectID": "R introduction_draft_student.html#final-example---toy-imports-to-the-us-from-1996-2005-1",
    "href": "R introduction_draft_student.html#final-example---toy-imports-to-the-us-from-1996-2005-1",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\ncountry_total&lt;- toy_imports %&gt;% \n  group_by(partner_name) %&gt;%\n  summarize(total_import=sum(US_report_import)) %&gt;%\n  arrange(desc(total_import)) %&gt;%\n  head(5)\n\ncountry_total\n\n# A tibble: 5 × 2\n  partner_name     total_import\n  &lt;chr&gt;                   &lt;dbl&gt;\n1 China               26842305.\n2 Denmark              1034990.\n3 Canada                572309.\n4 Hong Kong, China      545186.\n5 Switzerland           400969.\n\n\n\n\nthe total dollar value of toys imported to the U.S. (US_report_import, in multiples of $1,000) in a specific product category from a specific country in a specific year\nThe product categories have unique numerical codes (product) as well as product names exciting enough to quicken the heart of any toy-loving child (“Parts and accessories :– Other,” “Toys representing animal or non-human figures,” and so on\nGroup all the observations by trading partner (the partner_name variable)\nFor each partner, calculate total dollar value by summing toy imports (US_report_import) across all categories and years\nArrange the partners by total dollar value"
  },
  {
    "objectID": "R introduction_draft_student.html#final-example---toy-imports-to-the-us-from-1996-2005-2",
    "href": "R introduction_draft_student.html#final-example---toy-imports-to-the-us-from-1996-2005-2",
    "title": "R - An Introduction",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\n#| out-width: 100%\n\ntop5_partners=c(\"China\", \"Denmark\", \"Canada\", \"Hong Kong, China\", \"Switzerland\")\n\noptions(scipen = 999)\n\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(plotly)\n\np &lt;- toy_imports %&gt;% \n  filter(partner_name %in% top5_partners) %&gt;%\n  group_by(year, partner_name) %&gt;%\n  summarize(total_import=sum(US_report_import)) %&gt;% \n  ggplot(aes(year, total_import, color=partner_name)) +\n  geom_line()+\n  labs(title=\"Toy imports from the U.S.'s top-5 partners, 1996-2005\",\n       x=\"Year\",\n       y=\"Dollar value of imports (log scale)\",\n       color=\"Import Region\")+\n  scale_x_continuous(breaks=1996:2005)+\n  theme_economist()+ \n  scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n              labels = trans_format(\"log10\", math_format(10^.x)))\n\nggplotly(p)"
  },
  {
    "objectID": "R introduction_draft_student.html#the-five-coldest-months-in-rapid-city-from-1995-to-2011",
    "href": "R introduction_draft_student.html#the-five-coldest-months-in-rapid-city-from-1995-to-2011",
    "title": "R - An Introduction",
    "section": "the five coldest months in Rapid City from 1995 to 2011",
    "text": "the five coldest months in Rapid City from 1995 to 2011\n\nlibrary(tidyverse)\n\nrapidcity &lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/rapidcity.csv\")\n\nrapidcity %&gt;% \n  group_by(Year, Month) %&gt;%\n  summarize(avg_Temp = mean(Temp),\n            lowest_temp = min(Temp),\n            hightest_temp = max(Temp)) %&gt;%\n  arrange(avg_Temp) %&gt;%\n  head(5) %&gt;% \n  round(1)\n\n# A tibble: 5 × 5\n# Groups:   Year [4]\n   Year Month avg_Temp lowest_temp hightest_temp\n  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n1  1996     1     14.9       -11            46.1\n2  2009    12     16.4        -2.6          35.6\n3  2000    12     17.3        -9            38.8\n4  1996    12     17.5       -10.8          40.4\n5  2001     2     17.6        -3.9          40.8\n\n\n\n\nImport the data set (we’ve done this already).\nSplit the data set into individual months in individual years: January 1995, February 1995, March 1995, and so on, all the way through December 2011.\nFor each individual month, calculate the average of the Temp variable (along with any other summaries we might find interesting).\nSort the individual months according to their average temperatures.\nMake a table of the five coldest months"
  },
  {
    "objectID": "R introduction_draft_student.html#survival-on-the-titanic",
    "href": "R introduction_draft_student.html#survival-on-the-titanic",
    "title": "R - An Introduction",
    "section": "survival on the Titanic",
    "text": "survival on the Titanic\nQ: how did survival among adult passengers vary by sex and cabin class?\n\ntitanic &lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/titanic.csv\")\n\nhead(titanic)\n\n# A tibble: 6 × 5\n  name                            survived sex       age passengerClass\n  &lt;chr&gt;                           &lt;chr&gt;    &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;         \n1 Allen, Miss. Elisabeth Walton   yes      female 29     1st           \n2 Allison, Master. Hudson Trevor  yes      male    0.917 1st           \n3 Allison, Miss. Helen Loraine    no       female  2     1st           \n4 Allison, Mr. Hudson Joshua Crei no       male   30     1st           \n5 Allison, Mrs. Hudson J C (Bessi no       female 25     1st           \n6 Anderson, Mr. Harry             yes      male   48     1st           \n\n\n\nsurv_adults&lt;- titanic %&gt;% \n  mutate(Adult = age &gt;= 18) %&gt;%\n  filter(Adult) %&gt;%\n  group_by(sex, passengerClass) %&gt;%\n  summarize(total_count=n(),\n            survived = sum(survived==\"yes\"),\n            survival_rate = survived/total_count)\n\n\nsurv_adults\n\n# A tibble: 6 × 5\n# Groups:   sex [2]\n  sex    passengerClass total_count survived survival_rate\n  &lt;chr&gt;  &lt;chr&gt;                &lt;int&gt;    &lt;int&gt;         &lt;dbl&gt;\n1 female 1st                    125      121        0.968 \n2 female 2nd                     85       74        0.871 \n3 female 3rd                    106       47        0.443 \n4 male   1st                    144       47        0.326 \n5 male   2nd                    143       12        0.0839\n6 male   3rd                    289       45        0.156 \n\n\n\nlibrary(ggthemes)\n\nggplot(surv_adults) +\n  geom_col(aes(x=sex, y=survival_rate)) +\n  facet_wrap(~passengerClass, nrow=1)+\n  labs(title=\"Survival rate by gender and passenger class\",\n       y=\"Survival rate\",\n       x=\"gender\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\ncreate a new variable, which we’ll call Adult, that determines whether a passenger is at least 18 years old.\nfilter the data set down to adults only.\ngroup the filtered data set by sex and cabin class (2 sexes× × 3 classes = 6 groups).\ncalculate the survival percentage for each group."
  },
  {
    "objectID": "R introduction_draft_student.html#extra-gapminder-data",
    "href": "R introduction_draft_student.html#extra-gapminder-data",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\nlibrary(gapminder)\n\ndata(gapminder)\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;%\n  mutate(median_lifeExp = median(lifeExp)) %&gt;%\n  ggplot(aes(year, median_lifeExp, color=continent)) +\n  geom_line()+\n  labs(title=\"Life expectancy by continent and year\",\n       x=\"Year\",\n       y=\"Life expectancy\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\") +\n  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1 / 4)"
  },
  {
    "objectID": "R introduction_draft_student.html#extra-gapminder-data-1",
    "href": "R introduction_draft_student.html#extra-gapminder-data-1",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\nthis is from BBC style\n\n# install.packages('devtools')\n#devtools::install_github('bbc/bbplot'))\n\nlibrary(ggpubr)\n\nsource(\"https://raw.githubusercontent.com/kwan-MSDA/R/main/bbc_style.R\")\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;%\n  summarize(median_lifeExp = median(lifeExp)) %&gt;%\n  ggplot(aes(year, median_lifeExp, color=continent)) +\n  geom_line()+\n  labs(title=\"Life expectancy by continent and year\",\n       x=\"Year\",\n       y=\"Life expectancy\")+\n  bbc_style()\n\n\n\n\n\n\n\n\n\n\nsource 1: https://bbc.github.io/rcookbook/#do_something_else_entirely\nsource 2: https://github.com/bbc/bbplot?tab=readme-ov-file\nsource 3: https://noeliagorod.com/2020/07/23/bbc-visual-and-data-journalism-cookbook-for-r-graphics/"
  },
  {
    "objectID": "R introduction_draft_student.html#extra-gapminder-data-2",
    "href": "R introduction_draft_student.html#extra-gapminder-data-2",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\nlibrary(\"ggalt\")\nlibrary(\"tidyr\")\n \nlibrary(gapminder)\n\ndumbbell_df &lt;- gapminder %&gt;%\n  filter(year == 1967 | year == 2007) %&gt;%\n  select(country, year, lifeExp) %&gt;%\n  spread(year, lifeExp) %&gt;%\n  mutate(gap = `2007` - `1967`) %&gt;%\n  arrange(desc(gap)) %&gt;%\n  head(10)\n \n#Make plot\nggplot(dumbbell_df, aes(x = `1967`, xend = `2007`, y = reorder(country, gap), group = country)) + \n  geom_dumbbell(colour = \"#dddddd\",\n                size = 3,\n                colour_x = \"#FAAB18\",\n                colour_xend = \"#1380A1\") +\n  bbc_style() + \n  labs(title=\"We're living longer\",\n       subtitle=\"Biggest life expectancy rise, 1967-2007\")"
  },
  {
    "objectID": "R introduction_draft_student.html#extra-gapminder-data-3",
    "href": "R introduction_draft_student.html#extra-gapminder-data-3",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ngapminder %&gt;% \n  filter(year==2007) %&gt;%\n  mutate(country=factor(country, levels=unique(country))) %&gt;%\n  arrange(desc(pop)) %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) +\n  geom_point(alpha=0.6, shape=21, color=\"black\")+\n  scale_size(range=c(.1, 24), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  theme_ipsum()+\n  theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent in 2007\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")"
  },
  {
    "objectID": "R introduction_draft_student.html#extra-gapminder-data-4",
    "href": "R introduction_draft_student.html#extra-gapminder-data-4",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\nlibrary(gganimate)\n\ngapminder %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent, frame=year)) +\n  geom_point(alpha=0.6, shape=21, color=\"black\")+\n  scale_size(range=c(.1, 22), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  theme_ipsum()+\n  theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent in {frame_time}\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")+\n  geom_text(data=gapminder %&gt;%  filter(pop &gt;1e+8), aes(label=country), size=5, nudge_x=0.1, nudge_y=0.1)+\n  transition_time(year)+\n  enter_fade()+\n  exit_fade()\n\n\n\n\n\n\n\nanim_save(\"gapminder_gganimate.gif\")"
  },
  {
    "objectID": "R introduction_draft_student.html#extra-gapminder-data-5",
    "href": "R introduction_draft_student.html#extra-gapminder-data-5",
    "title": "R - An Introduction",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\nsource\n\nlibrary(plotly)\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ng&lt;- crosstalk::SharedData$new(gapminder %&gt;% \n                              mutate(country=factor(country, levels=unique(country))) %&gt;%\n                              arrange(desc(pop)),\n                              ~ continent)\ngg&lt;- g %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, fill=continent, frame=year)) +\n  geom_point(aes(size=pop, alpha=0.6, ids=country))+\n  scale_size(range=c(.1, 24), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  scale_alpha(range=c(0.6, 1), guide=FALSE)+\n  theme_ipsum()+\n  # theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent between 1952-2007\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")\n\nggplotly(gg, height = 500, width = 800)"
  },
  {
    "objectID": "R introduction_draft_student.html#references",
    "href": "R introduction_draft_student.html#references",
    "title": "R - An Introduction",
    "section": "References",
    "text": "References\n\n\nScott, James. 2021. “Data Science in r: A Gentle Introduction.” 2021. https://bookdown.org/jgscott/DSGI/.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10): 1–23.\n\n\n———. 2016. Ggplot2 : Elegrant Graphics for Data Analysis. Second edition. Use r! Switzerland: Springer.\n\n\n———. 2019. Advanced r. Second edition. The r Series. Boca Raton, FL: CRC Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2023. R for Data Science : Import, Tidy, Transform, Visualize, and Model Data. Second edition. Beijing: O’Reilly."
  },
  {
    "objectID": "calculus_reader.html#outline",
    "href": "calculus_reader.html#outline",
    "title": "Maths - Calculus",
    "section": "Outline",
    "text": "Outline\n\nFunctions\nLimits\nDerivatives\nOptimization\nHigher-order derivatives\nSome common rules\nPartial derivatives\nIntegrals\nConstraint optimization"
  },
  {
    "objectID": "calculus_reader.html#functions",
    "href": "calculus_reader.html#functions",
    "title": "Maths - Calculus",
    "section": "Functions",
    "text": "Functions\n\nWhat is a function?\n\ndomain\nrange\nmapping\n\nWhat is not a function?"
  },
  {
    "objectID": "calculus_reader.html#limits",
    "href": "calculus_reader.html#limits",
    "title": "Maths - Calculus",
    "section": "Limits",
    "text": "Limits\n\nWhat is a limit?\n\nidea of a slope\n\nDoes it always exist?\nIs it unique?"
  },
  {
    "objectID": "calculus_reader.html#derivatives",
    "href": "calculus_reader.html#derivatives",
    "title": "Maths - Calculus",
    "section": "Derivatives",
    "text": "Derivatives\n\nWhat is Derivative?\n\nslope of a function\nrate of change\n\nwhy learning it?\n\noptimization\neconomics\nstatistics\nmachine learning\ndeep learning\n\nreminder about notation\n\n\\(\\frac{df(x)}{dx}\\)\n\\(\\frac{df}{dx}\\)\n\\(f'(x)\\)\n\\(\\frac{d}{dx}f(x)\\)\n\\(\\frac{d}{dx}f\\)"
  },
  {
    "objectID": "calculus_reader.html#optimization",
    "href": "calculus_reader.html#optimization",
    "title": "Maths - Calculus",
    "section": "Optimization",
    "text": "Optimization\n\nHow to find the maximum or minimum of a function?\n\nlet us think about a quadratic function, \\(y=ax^2+bx+c\\)\n\n\n\n\nHow to find out the maximum or minimum of a function?\n\nfirst-order condition\ncritical points"
  },
  {
    "objectID": "calculus_reader.html#higher-order-derviatives",
    "href": "calculus_reader.html#higher-order-derviatives",
    "title": "Maths - Calculus",
    "section": "Higher-order derviatives",
    "text": "Higher-order derviatives\n\nsecond-order derivative\n\nconcave\nconvex\ninflection point\n\nthird-order derivative\nn-th order derivative\nlocal vs global maximum/minimum"
  },
  {
    "objectID": "calculus_reader.html#some-common-rules-of-derivatives",
    "href": "calculus_reader.html#some-common-rules-of-derivatives",
    "title": "Maths - Calculus",
    "section": "Some common rules of derivatives",
    "text": "Some common rules of derivatives\n\nHow to calculate Derivative?\n\npower rule\n\n\\(\\frac{dx^n}{dx}=nx^{n-1}\\)\n\nproduct rule\n\n\\(\\frac{d}{dx}f(x)g(x)=f'(x)g(x) +f(x)g'(x)\\)\n\nquotient rule\n\n\\(\\frac{d}{dx}\\frac{f(x)}{g(x)}=\\frac{f'(x)g(x)-f(x)g'(x)}{(g(x))^2}\\)\n\nchain rule\n\n\\(\\frac{d}{dx}f(g(x))=f'(g(x))g'(x)\\)\n\nspecial rules for logs and exponents\n\n\\(\\frac{d}{dx}\\ln(x)=\\frac{1}{x}\\)\n\\(\\frac{d}{dx}e^{x}=e^{x}\\)"
  },
  {
    "objectID": "calculus_reader.html#exercises",
    "href": "calculus_reader.html#exercises",
    "title": "Maths - Calculus",
    "section": "Exercises:",
    "text": "Exercises:\n\n\\(\\frac{d}{dx}(6x^3+5)\\)\n\\(\\frac{d}{dx}\\sqrt{(5x^3+3x+5)}\\)\nlet \\(h(x)=2x+3; g(x)=5x^2+3x\\), let \\(f(x)=h(x)*g(x)\\), \\(\\frac{df(x)}{dx}\\)\nlet \\(p(x)=\\frac{h(x)}{g(x)}\\), \\(\\frac{dp(x)}{dx}\\)\n\\(\\frac{d(g(h(x)))}{dx}\\)\n\\(\\frac{d}{dx}\\ln(x^6+8)\\)\n\\(\\frac{d}{dx}e^{6x+3}\\)\n\\(\\frac{d}{dx}x^3e^{x}\\)"
  },
  {
    "objectID": "calculus_reader.html#partial-derviatives",
    "href": "calculus_reader.html#partial-derviatives",
    "title": "Maths - Calculus",
    "section": "Partial derviatives",
    "text": "Partial derviatives\n\nWhat is a partial derivative?\n\nLet \\(z=f(x,y)\\)\n\\(\\frac{\\partial f}{\\partial x}\\)\n\\(\\frac{\\partial f}{\\partial y}\\)\n\nExercise:\n\nlet \\(f(x,y)=x^2 y^3+3x+2y\\)\nfind \\(\\frac{\\partial f}{\\partial x}\\) and \\(\\frac{\\partial f}{\\partial y}\\)"
  },
  {
    "objectID": "calculus_reader.html#integrals",
    "href": "calculus_reader.html#integrals",
    "title": "Maths - Calculus",
    "section": "Integrals",
    "text": "Integrals\n\nWhat is an integral?\n\narea under the curve\nanti-derivative\n\nNotation\n\n\\(\\int^b_a f(x)dx\\)\n\\(\\int_X f(x)dx\\)\n\nWe are most interested in the concept rather than actual (hand) calculation of the integrals"
  },
  {
    "objectID": "calculus_reader.html#constraint-optimization",
    "href": "calculus_reader.html#constraint-optimization",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nWhat is constraint optimization?\n\noptimization with constraints\nLagrange multiplier\n\nThe idea is to optimize a function subject to some constraints\nThe problem can be stated as:\n\nmaximize \\(f(x,y)\\) subject to \\(g(x,y)=0\\)\nminimize \\(f(x,y)\\) subject to \\(g(x,y)=0\\)"
  },
  {
    "objectID": "calculus_reader.html#constraint-optimization-1",
    "href": "calculus_reader.html#constraint-optimization-1",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nlet us learn some economics\nin economics, a consumer faces the problem of maximizing her utility subject to the income constraint:\n\n\n\\[\n\\max_{x_1,x_2} u(x_1,x_2) \\quad s.t. \\; p_1x_1 + p_2x_2=y\n\\]\n\nwe can visualize and “solve” the problem using graph"
  },
  {
    "objectID": "calculus_reader.html#constraint-optimization-2",
    "href": "calculus_reader.html#constraint-optimization-2",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe optimal solution is at the point where the budget line is tangent to the indifference curve\n\n\n\\[\n\\frac{MU_1}{MU_2}=\\frac{p_1}{p_2}\n\\]\n\\(\\quad\\) where \\(MU_1\\) and \\(MU_2\\) are the marginal utilities of good 1 and good 2 respectively\n\nwe can solve this problem using the “identity”\n\n\n\n\\[\nu(x_1, x^U_2(x_1))=\\bar{u}\n\\]\n\nwe need to solve two equations simultaneously"
  },
  {
    "objectID": "calculus_reader.html#constraint-optimization-3",
    "href": "calculus_reader.html#constraint-optimization-3",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe Lagrange multiplier is a method to solve the optimization problem with constraints\nthe Lagrange function is defined as:\n\n\n\\[\nL(x_1,x_2,\\lambda)=u(x_1,x_2)+\\lambda(y-(p_1x_1+p_2x_2))\n\\]\n\nthe first-order conditions are\n\n\n\n\\[\n\\begin{align*}\n\\frac{\\partial u}{\\partial x_1} - \\lambda p_1 &=0 \\\\\n\\frac{\\partial u}{\\partial x_2} - \\lambda p_2 &=0 \\\\\ny-(p_1x_1+p_2x_2) &=0\n\\end{align*}\n\\]"
  },
  {
    "objectID": "calculus_reader.html#constraint-optimization-4",
    "href": "calculus_reader.html#constraint-optimization-4",
    "title": "Maths - Calculus",
    "section": "Constraint optimization",
    "text": "Constraint optimization\n\nthe Lagrange multiplier could be interpreted as the “marginal utility of income” in our example\nin economics, the Lagrange multiplier could be interpreted as the “shadow price” of the constraint\n\ne.g. the Lagrange multiplier could be interpreted as the “marginal cost” in production optimization\n\nReminder: the Lagrange multiplier could be zero, positive or negative\nthe Lagrange multiplier could be used in very general optimization problems\n\n\n\\[\n\\max_{x_1, \\dots, x_n} f(x_1,\\dots, x_n) \\quad s.t. \\; g_i(x_1,\\dots, x_n)=c_i, \\quad i=1,\\dots,m\n\\]"
  },
  {
    "objectID": "calculus_reader.html#references",
    "href": "calculus_reader.html#references",
    "title": "Maths - Calculus",
    "section": "References",
    "text": "References\n\n\nChiang, Alpha, Chung-i, and Kevin. Wainwright. 2005. Fundamental Methods of Mathematical Economics. 4th ed. / [rev. by] Kevin Wainwright. New York: McGraw-Hill.\n\n\nSimon, Carl P., and Lawrence. Blume. 1994. Mathematics for Economists. 1st ed. New York ; W.W. Norton."
  },
  {
    "objectID": "index.html#welcome-to-msda-bootcamp",
    "href": "index.html#welcome-to-msda-bootcamp",
    "title": "MSDA Bootcamp 2025",
    "section": "",
    "text": "This course covers essential mathematical foundations for data analytics, including Calculus and Linear Algebra. Explore the materials below to get started."
  },
  {
    "objectID": "R_introduction.html#basic-arithmetic",
    "href": "R_introduction.html#basic-arithmetic",
    "title": "R - An Introduction",
    "section": "Basic Arithmetic",
    "text": "Basic Arithmetic\n\nR can be regarded as a calculator\n\nit recognizes all of the standard arithmetic operators\n\n\n. . .\n\n\nCode\n# Basic arithmetic operations in R\n\n1+2 \n\n6-7 \n\n5/2 \n\n2^3\n\n2+5*2^3\n\n3*(4+5) \n\n(3+4)*5\n\nsqrt(4)\n\n\n\nmodulo operators (integer division & remainder)\n\n. . .\n\n\nCode\n# Modulo operators in R\n\n5 %/% 2  # integer division\n5 %% 2   # remainder\n\n100 %/% 60 ## How many whole hours in 100 minutes?\n\n100 %% 60 ## How many minutes are left over?\n\n\n\n\nIn RStudio, you can start a new script using the dropdown menu File &gt; New File &gt; R Script\nuse your R script to save finalized commands\n\ntype in the console to practice and debug, then use the script to save what worked\n\nR scripts allow you to save comments, or annotations, to your code\n\nanything following the # symbol in a script will not be treated like an R command—essentially, R will skip over it"
  },
  {
    "objectID": "R_introduction.html#logic",
    "href": "R_introduction.html#logic",
    "title": "R - An Introduction",
    "section": "Logic",
    "text": "Logic\n\nR can also be used for logical operations\n\nit recognizes the standard logical operators\n\n\n. . .\n\n\nCode\n1 &gt; 2\n\n1 &gt; 2 & 1 &gt; 0.5 # The \"&\" stands for \"and\"\n\n1 &gt; 2 | 1 &gt; 0.5 # The \"|\" stands for \"or\" (not a pipe a la the shell)\n\nisTRUE (1 &lt; 2)\n\n\n\nHere are the detailed list of logical operators in R\n\n& and | are used for element-wise logical operations\n&& and || are used for short-circuit logical operations\n\ne.g. 1 &gt; 2 && 1 &gt; 0.5 will return FALSE without evaluating the second condition\n\n! is used for negation (i.e. “not”)\n==, !=, &lt;, &lt;=, &gt;, and &gt;= are used for comparison\n\nHere is further information about logical vectors in R\n\nLogical vectors are vectors that contain only TRUE, FALSE, or NA values\nLogical vectors are often used for subsetting data frames or matrices"
  },
  {
    "objectID": "R_introduction.html#logical-operators",
    "href": "R_introduction.html#logical-operators",
    "title": "R - An Introduction",
    "section": "logical operators",
    "text": "logical operators\n\nValue matching: %in%\n\nwhether an object is contained within (i.e. matches one of) a list of items, use %in%\n\n\n. . .\n\n\nCode\n4 %in% 1:10\n\n4 %in% 5:10\n\n\n\nThere’s no equivalent “not in” command\n\nbut we can create one\n\n\n. . .\n\n\nCode\n`%ni%` = Negate(`%in%`) ## The backticks (`) help to specify functions.\n\n4 %ni% 5:10\n\n\n\nEvaluation\n\nuse two equal signs for logical evaluation\n\n\n. . .\n\n\nCode\n1 == 1 ## This does.\n\n1 != 2 ## Note the single equal sign when combined with a negation\n\n\n\n\nEvaluation caveat: Floating-point numbers\nWhat do you think will happen if we evaluate 0.1 + 0.2 == 0.3?\n0.1 + 0.2 == 0.3\nProblem: Computers represent numbers as binary (i.e. base 2) floating-points\n\nMore here.\n\nFast and memory efficient, but can lead to unexpected behaviour.\n\n\nSimilar to the way that standard decimal (i.e. base 10) representation can’t precisely capture certain fractions\n\ne.g. \\(\\frac{1}{3} = 0.3333...\\)\n\nSolution: Use all.equal() for evaluating floats (i.e fractions)\n\nall.equal(0.1 + 0.2, 0.3)"
  },
  {
    "objectID": "R_introduction.html#assignment",
    "href": "R_introduction.html#assignment",
    "title": "R - An Introduction",
    "section": "Assignment",
    "text": "Assignment\n\nAssignment: &lt;- or =\n\nuse &lt;- for assignment, but = is also acceptable\n&lt;- is the preferred operator in R, but = is more common in other programming languages\n\n\n\n\n\nCode\na &lt;- 10 + 5\na\n\n\n\nnevertheless, we can use = for assignment\n\n\n\n\n\nCode\nb = 10 + 10 \n\nb\n\n\n\n\nan arrow can point in the other direction too (i.e. -&gt;)\nthe following code chunk is equivalent to the previous one, although used much less frequently\n\n\n\nCode\n10 + 5 -&gt; a\n\n\n\nNote that the assigned object must be on the left with “=”"
  },
  {
    "objectID": "R_introduction.html#help",
    "href": "R_introduction.html#help",
    "title": "R - An Introduction",
    "section": "Help",
    "text": "Help\n\nUse help or ? to get help on a function\n\ne.g. ?mean will give you the documentation for the mean() function\n\nFor more information on a (named) function or object in R, consult the “help” documentation. For example:\n\n. . .\n\n\nCode\nhelp(plot)\n\n?plot \n\n\n\nComments in R are demarcated by #.\nHit Ctrl+Shift+c in RStudio to (un)comment whole sections of highlighted code\nVignettes\n\nfor many packages, you can also try the vignette() function, which will provide an introduction to a package and it’s purpose through a series of helpful examples\n\ne.g. vignette(\"ggplot2\") will give you a detailed introduction to the ggplot2 package\n\n\n\n\n\nsee the Examples section at the bottom of the help file?\n\nYou can run them with the example() function\nTry it: example(plot)"
  },
  {
    "objectID": "R_introduction.html#object-oriented-programming-in-r",
    "href": "R_introduction.html#object-oriented-programming-in-r",
    "title": "R - An Introduction",
    "section": "Object-oriented programming in R",
    "text": "Object-oriented programming in R\n\nR is an object-oriented programming language\n\neverything in R is an object\nobjects can be manipulated and transformed using functions\nfunctions are also objects in R\n\nR has three main object classes\n\nvectors\nlists\ndata frames\n\nR also has other object classes, such as matrices, arrays, and factors\nEach object class has its own set of rules (“methods”) for determining valid operations\n\ne.g. you can perform many of the same operations on matrices and data frames\nBut there are some operations that only work on a matrix, and vice versa.\nAt the same time, you can (usually) convert an object from one type to another\n\n\n\n\n\nCode\n## Create a small data frame called \"d\".\n\nd = data.frame(x = 1:2, y = 3:4) \n\nd\n\n\n\n\n\n\nCode\n## Convert it to (i.e. create) a matrix call \"m\".\n\nm = as.matrix(d)\n\nm\n\n\n\n\nthere are many different types (or classes) of objects\nMost obviously, there are actually multiple OOP frameworks in R\n\nS3, S4, R6…\nHadley Wickham’s “Advanced R” provides a very thorough overview of the main ones\n\nBut for our purposes, it is much more helpful to think about\n\nthe shared characteristics of these different systems and\nthe broad implications of OOP in R.\n\n\nWhat we lose in detail, we hopefully gain in perspective\nBut do read Hadley’s book if you get the chance + It’s incredibly helpful (as are all his books)"
  },
  {
    "objectID": "R_introduction.html#object-class-type-and-structure",
    "href": "R_introduction.html#object-class-type-and-structure",
    "title": "R - An Introduction",
    "section": "Object class, type, and structure",
    "text": "Object class, type, and structure\n\nUse the class, typeof, and str commands if you want understand more about a particular object\n\n. . .\n\n\nCode\nd = data.frame(x = 1:2, y = 3:4) \n\nclass(d) ## Evaluate its class\n\ntypeof(d) ## Evaluate its type\n\nstr(d) ## Show its structure\n\n\n\nwe can inspect/print an object directly in the console\n\ne.g. Type d\n\nThe View() function is also very helpful\n\nthis is the same as clicking on the object in the RStudio Environment pane\ne.g. View(d)\n\n\n\n\nPS — Confused by the fact that typeof(d) returns “list”? See here."
  },
  {
    "objectID": "R_introduction.html#global-environment",
    "href": "R_introduction.html#global-environment",
    "title": "R - An Introduction",
    "section": "Global environment",
    "text": "Global environment\n\nThe global environment is where all objects are stored\n\nyou can see the global environment in the RStudio Environment pane\nyou can also see the global environment by typing ls() in the console\n\nWorking with multiple objects\n\nyou can create multiple objects in the global environment\nyou can manipulate and transform these objects using functions\nyou can also use the rm() function to remove objects from the global environment\n\nR’s ability to keep multiple objects in memory at the same time is a huge plus when it comes to effective data work\n\ne.g. We can copy an existing data frame, or create new one entirely from scratch - either will exist happily with our existing objects in the global environment\n\n\n. . .\n\n\nCode\nd2 = data.frame(x = rnorm(10), y = runif(10))"
  },
  {
    "objectID": "R_introduction.html#everything-has-a-name",
    "href": "R_introduction.html#everything-has-a-name",
    "title": "R - An Introduction",
    "section": "Everything has a name",
    "text": "Everything has a name\n\nEvery object in R has a name\n\nyou can use the name to refer to the object in the global environment\nobject names are case sensitive\n\nThe name of our object must follow certain restrictions\n\nit cannot begin with a number\nit should not contain spaces\nspecial characters such as % and $ should not be used\n\nReserved words\n\nwe can assign objects to different names\nHowever, there are a number of special words that are “reserved” in R\n\nThese are are fundamental commands, operators and relations in base R that you cannot (re)assign, even if you wanted to\nSee here for a full list\n\n\n\n. . .\n\n\nyou can also use the name to refer to the object in a function\nfunction itself is an object\n\ne.g. mean is a function that calculates the mean of a vector\nwe can assign it to a new name, e.g. average = mean\nbut we cannot assign it to a reserved word, e.g. if = mean\nthis will lead to an error"
  },
  {
    "objectID": "R_introduction.html#namespace-conflicts",
    "href": "R_introduction.html#namespace-conflicts",
    "title": "R - An Introduction",
    "section": "Namespace conflicts",
    "text": "Namespace conflicts\n\nR has a large number of packages, each with its own set of functions\n\nsometimes, different packages have functions with the same name\nthis can lead to “namespace conflicts” where R doesn’t know which function to use\n\ne.g. Look what happens we load the dplyr package\n\n. . .\n\n\nCode\nlibrary(dplyr)\n\n\n\nThe messages that you see about some object being masked from ‘package:X’ are warning you about a namespace conflict\n\ne.g. Both dplyr and the stats package have functions named “filter” and “lag”\n\nWhenever a namespace conflict arises, the most recently loaded package will gain preference\n\nso the filter() function now refers specifically to the dplyr variant\nwhat if we want the stats variant?\n\n\n\n\nThe potential for namespace conflicts is a result of the OOP approach\n\nAlso reflects the fundamental open-source nature of R and the use of external packages\nPeople are free to call their functions whatever they want, so some overlap is only to be expected\n\nTemporarily use stats::filter()\n\nPermanently assign filter = stats::filter"
  },
  {
    "objectID": "R_introduction.html#indexing",
    "href": "R_introduction.html#indexing",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nIndexing is a way to access specific elements of an object\n\ne.g. we can access specific elements of a vector, list, or data frame using indexing\n\nThere are two main ways to index objects in R\n\nOption 1: []\n\nThis is the most common way to index objects in R\nIt works for vectors, matrices, data frames, and lists\nIt can be used to access specific elements of an object, or to subset an object\n\nOption 2: $\n\nThis is a special operator that is used to access specific elements of a list or data frame by name\nIt is often used to access columns of a data frame by name\n\n\n\n\n\nIndexing is done using square brackets []\nIndexing can be done using either numeric or logical vectors\n\nNumeric indexing refers to the position of the element in the object\nLogical indexing refers to a logical vector that indicates which elements to keep\n\nIndexing can also be done using names\n\ne.g. we can access specific elements of a data frame using the column names"
  },
  {
    "objectID": "R_introduction.html#indexing-1",
    "href": "R_introduction.html#indexing-1",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nuse [] to index objects that we create in R\n\n. . .\n\n\nCode\na = 1:10\na[4] ## Get the 4th element of object \"a\"\na[c(4, 6)] ## Get the 4th and 6th elements\n\n\n\nIt also works on larger arrays (vectors, matrices, data frames, and lists)\n\n. . .\n\n\nCode\nlibrary(dplyr)\nstarwars[1, 1] ## Show the cell corresponding to the 1st row & 1st column of the data frame\n\n\n\nWhat does starwars[1:3, 1] give you?\nWhat does starwars[-1, 1] give you?\nwhat if we want to get the 1st column of the data frame?\n\n. . .\n\n\nCode\nstarwars[, 1] ## Get the 1st column of the starwars data frame\n\n\n\nwe can use $ to access the columns of a data frame by name\n\n. . .\n\n\nCode\nstarwars$name ## Get the \"name\" column of the starwars data frame\n\n\n\n\nWhat if you want to get the names of the columns in a data frame? . . .\n\n\n[1] Indexing in R begins at 1. Not 0 like some languages (e.g. Python and JavaScript)"
  },
  {
    "objectID": "R_introduction.html#cleaning-up",
    "href": "R_introduction.html#cleaning-up",
    "title": "R - An Introduction",
    "section": "cleaning up",
    "text": "cleaning up\n\nUse rm() to remove objects from the global environment\n\ne.g. rm(a) will remove the object a from the global environment\n\n\n. . .\n\n\nCode\na = \"hello\"\nb = \"world\"\nrm(a, b)\n\n\n\nuse rm(list = ls()) to remove all objects in your working environment (except packages)\n\nBetter just to start a new R session\n\n\n\n\nbut this is frowned upon\n\n\n\nDetaching packages is more complicated\n\nthere could be many cross-dependencies (i.e. one package depends on, and might even automatically load, another\ne.g. detach(package:dplyr)\n\nbetter just to restart your R session"
  },
  {
    "objectID": "R_introduction.html#removing-plots",
    "href": "R_introduction.html#removing-plots",
    "title": "R - An Introduction",
    "section": "Removing plots",
    "text": "Removing plots\n\nUse dev.off() to remove the current plot\n\ne.g. dev.off() will remove the current plot from the plotting window\n\nUse graphics.off() to remove all plots\n\n. . .\n\n\nCode\nplot(1:10)\ndev.off()\n\n\n\nRStudio has convenient buttons for clearing your workspace environment and removing (individual) plots"
  },
  {
    "objectID": "R_introduction.html#logic-1",
    "href": "R_introduction.html#logic-1",
    "title": "R - An Introduction",
    "section": "Logic",
    "text": "Logic\n\nOrder of precedence\n\nlogic statements follow a strict order of precedence\nlogical operators (&gt;, ==, etc) are evaluated before Boolean operators (& and |)\n\nfailure to recognise this can lead to unexpected behaviour\n\n\n\n. . .\n\n\nCode\n1 &gt; 0.5 & 2\n\n\n. . .\n\n\nCode\n1 &gt; 0.5 & 1 &gt; 2\n\n\n\nLesson: explicit about each component of your logic statement(s)\n\n\n\n2 is converted into as.logical(2)\nas.logical(2) is TRUE because it is not zero\n\n\n\nNegation: !\n\nthis will come in very handy when we start filtering data objects\n\n\n. . .\n\n\nCode\nis.na(1:10)\n!is.na(1:10)\n\nNegate(is.na)(1:10)"
  },
  {
    "objectID": "R_introduction.html#everything-has-a-name-1",
    "href": "R_introduction.html#everything-has-a-name-1",
    "title": "R - An Introduction",
    "section": "Everything has a name",
    "text": "Everything has a name\n\nSemi-reserved words\n\nthere is a class of words and strings that are called “semi-reserved”\n\n\n. . .\n\n\nCode\nmy_vector = c(1, 2, 5)\nmy_vector\n\n\n\nwhat happens if you type the following?\n\n. . .\n\n\nCode\nc = 4\nc(1, 2 ,5)\n\n\n\nR is “smart” enough to distinguish between the variable c = 4 that we created and the built-in function c() that calls for concatenation\nHowever, R won’t always be able to distinguish between conflicting definitions\n\n. . .\n\n\nCode\npi\npi = 2\npi\n\n\n\nBottom line: Don’t use (semi-)reserved characters!\n\n\n\nthese are named functions or constants (e.g. pi) that you can re-assign if you really wanted to… but already come with important meanings from base R\nThe c() function is a good example of a semi-reserved character\nArguably the most important semi-reserved character is c(), which we use for concatenation\n\ni.e. creating vectors and binding different objects together"
  },
  {
    "objectID": "R_introduction.html#indexing-2",
    "href": "R_introduction.html#indexing-2",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nlists are a more complex type of array object in R\n\nthey can contain a random assortment of objects that don’t share the same class\n\ne.g. a list can contain a vector, a data frame, and a matrix\nor even lists of lists\n\nlists are very flexible and can be used to store any type of object\n\nThe relevance to indexing is that lists require two square brackets [[]] to index the parent list item and then the standard [] within that parent item\nThis is different from the single square brackets that we use to index vectors, matrices, and data frames\n\nThe double square brackets are used to extract the object itself, rather than a subset of the list"
  },
  {
    "objectID": "R_introduction.html#assignment-operators",
    "href": "R_introduction.html#assignment-operators",
    "title": "R - An Introduction",
    "section": "Assignment operators",
    "text": "Assignment operators\n\nAssignment: &lt;- or =\n\nuse &lt;- for assignment, but = is also acceptable\n&lt;- is the preferred operator in R, but = is more common in other programming languages\n\n\n. . .\n\n\nCode\na &lt;- 10 + 5\na\n\n\n\nnevertheless, we can use = for assignment\n\n. . .\n\n\nCode\nb = 10 + 10 \n\nb\n\n\n\n\nan arrow can point in the other direction too (i.e. -&gt;)\nthe following code chunk is equivalent to the previous one, although used much less frequently\n\n\n\nCode\n10 + 5 -&gt; a\n\n\n\nNote that the assigned object must be on the left with “=”"
  },
  {
    "objectID": "R_introduction.html#object-oriented-programming-oop-in-r",
    "href": "R_introduction.html#object-oriented-programming-oop-in-r",
    "title": "R - An Introduction",
    "section": "Object-oriented programming (OOP) in R",
    "text": "Object-oriented programming (OOP) in R\n\nR is an object-oriented programming language\n\neverything in R is an object\nobjects can be manipulated and transformed using functions\nfunctions are also objects in R\n\nR has three main object classes\n\nvectors\nlists\ndata frames\n\nR also has other object classes, such as matrices, arrays, and factors\nEach object class has its own set of rules (“methods”) for determining valid operations\n\ne.g. you can perform many of the same operations on matrices and data frames\nBut there are some operations that only work on a matrix, and vice versa\nAt the same time, you can (usually) convert an object from one type to another\n\n\n. . .\n\n\nCode\n## Create a small data frame called \"d\".\n\nd = data.frame(x = 1:2, y = 3:4) \n\nd\n\n\n. . .\n\n\nCode\n## Convert it to (i.e. create) a matrix call \"m\".\n\nm = as.matrix(d)\n\nm\n\n\n\n\nR can store information as an object with a name of our choice\n\nOnce we have created an object, we just refer to it by name\nwe are using objects as “shortcuts” to some piece of information or data\n\nthere are many different types (or classes) of objects\narithmetic operations like addition and subtraction cannot be used for character strings\nMost obviously, there are actually multiple OOP frameworks in R\n\nS3, S4, R6…\nHadley Wickham’s “Advanced R” provides a very thorough overview of the main ones\n\nBut for our purposes, it is much more helpful to think about\n\nthe shared characteristics of these different systems and\nthe broad implications of OOP in R.\n\n\nWhat we lose in detail, we hopefully gain in perspective\nBut do read Hadley’s book if you get the chance + It’s incredibly helpful (as are all his books)"
  },
  {
    "objectID": "R_introduction.html#namespace-conflicts-1",
    "href": "R_introduction.html#namespace-conflicts-1",
    "title": "R - An Introduction",
    "section": "Namespace conflicts",
    "text": "Namespace conflicts\nTwo common ways to resolve namespace conflicts in R:\n\nUse package::function()\n\n\nWe can explicitly call a conflicted function from a particular package using the package::function() syntax\n\n. . .\n\n\nCode\nstats::filter(1:10, rep(1, 2))\n\n\n. . .\n\n\nCode\ndplyr::starwars ## Print the starwars data frame from the dplyr package\n\nscales::comma(c(1000, 1000000)) ## Use the comma function, which comes from the scales package\n\n\n\nAssign function = package::function\n\n\nA more permanent solution is to assign a conflicted function name to a particular package\nThis will hold for the remainder of your current R session, or until you change it back\n\n. . .\n\n\nCode\nfilter = stats::filter ## Note the lack of parentheses\nfilter = dplyr::filter ## Change it back again\n\n\n\n\n\nWe can also use :: for more than just conflicted cases\ne.g. Being explicit about where a function (or dataset) comes from can help add clarity to our code\ne.g. dplyr::filter(iris, Species==\"virginica\") is clearer than just filter(iris, Species==\"virginica\")\n\nAnother good rule of thumb is that you want to load your most important packages last\n\ne.g. Load the tidyverse after you’ve already loaded any other packages\n\nUser-side namespace conflicts\n\nA final thing to say about namespace conflicts is that they don’t only arise from loading packages\nThey can arise when users create their own functions with a conflicting name\n\ne.g. If I was naive enough to create a new function called c()"
  },
  {
    "objectID": "R_introduction.html#indexing-3",
    "href": "R_introduction.html#indexing-3",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nLet’s look at an example of a list to see how it works in practice\n\nWe’ll use the my_list object, which contains three objects: a character string, a numeric vector, and a data frame\n\nAs before, we have two options for indexing lists\nOption 1: [[ ]]\n\nuse double square brackets to index a list\nthis will return the object itself, rather than a subset of the list\ne.g. my_list[[1]] will return the first object in the list\nwe can also use my_list[[2]][3] to return the third element of the second object\n\n\n. . .\n\n\nCode\nmy_list = list(a = \"hello\", b = c(1,2,3), c = data.frame(x = 1:5, y = 6:10))\n\nmy_list[[1]] \n\nmy_list[[2]][3]"
  },
  {
    "objectID": "R_introduction.html#indexing-4",
    "href": "R_introduction.html#indexing-4",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nOption 2: $\n\nlists provide a nice segue to our other indexing operator: $\nLet’s continue with the my_list example\n\n\n. . .\n\n\nCode\nmy_list\n\nmy_list$a\n\nmy_list$c$x\n\n\n\nThe $ form of indexing also works (and in the manner that you probably expect) for other object types in R\n\nIn some cases, you can also combine the two index options\n\n\n. . .\n\n\nCode\nmy_list$b[3]\n\nstarwars$name[1]\n\n\n\n\nnote some key differences between the output from this example and that of our previous starwars[1, 1] example\n\nWhat are they?\nHint: Apart from the visual cues, try wrapping each command in str()\n\nThe last thing that I want to say about $ is that it provides another way to avoid the “object not found” problem that we ran into with our earlier regression example\n\ne.g. lm(y ~ x) will not work, but lm(d$y ~ d$x) will work\n\n\n. . .\n\n\nCode\nd = data.frame(x = 1:10, y = 11:20)\n\nlm(y ~ x) \n\nlm(d$y ~ d$x)"
  },
  {
    "objectID": "R_introduction_v2.html#introduction",
    "href": "R_introduction_v2.html#introduction",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nR is a programming language and software environment for statistical computing and graphics\n\nwidely used in academia and industry\nfor data analysis, statistical modeling, and visualization\nfor machine learning, data mining, and big data analysis\nfor reproducible research and scientific computing\n\nR is an implementation of the S programming language\n\nS was developed at Bell Laboratories by John Chambers and colleagues\nS was designed for data analysis and graphics\nS was the precursor to the commercial statistical software package S-PLUS"
  },
  {
    "objectID": "R_introduction_v2.html#introduction-1",
    "href": "R_introduction_v2.html#introduction-1",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand\n\nnamed partly after the first names of the first two R authors and partly as a play on the name of S\na GNU project, a free software movement initiated by Richard Stallman in 1983\nfreely available under the GNU General Public License\na large number of packages available"
  },
  {
    "objectID": "R_introduction_v2.html#introduction-2",
    "href": "R_introduction_v2.html#introduction-2",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\ntidyverse is a collection of R packages designed for data science\n\ntidyverse packages share an underlying design philosophy, grammar, and data structures\ntidyverse packages are designed to work together\n\nfocus on the tidyverse\n\nmainly because it is easier to understand\ndo most data manipulation we need in social science research with these tools\n\nA good reference for tidyverse is the book by Wickham (2019)\n\nR for Data Science"
  },
  {
    "objectID": "R_introduction_v2.html#introduction-3",
    "href": "R_introduction_v2.html#introduction-3",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nfor quick reference, visit Posit Primers on Data Science\n\nR Basics\nTransform Tables\nVisualize Data\n\nfor more specific topics, visit Data Science\n\nData Wrangling\nData Visualization\nModelling\n\nwe use cover some base R functions first, then move on to the tidyverse"
  },
  {
    "objectID": "R_introduction_v2.html#basic-arithmetic",
    "href": "R_introduction_v2.html#basic-arithmetic",
    "title": "R - An Introduction",
    "section": "Basic Arithmetic",
    "text": "Basic Arithmetic\n\nR can be regarded as a calculator\n\nit recognizes all of the standard arithmetic operators\n\n\n\n\n\nCode\n# Basic arithmetic operations in R\n\n1+2 \n\n6-7 \n\n5/2 \n\n2^3\n\n2+5*2^3\n\n3*(4+5) \n\n(3+4)*5\n\nsqrt(4)\n\n\n\nmodulo operators (integer division & remainder)\n\n\n\n\n\nCode\n# Modulo operators in R\n\n5 %/% 2  # integer division\n5 %% 2   # remainder\n\n100 %/% 60 ## How many whole hours in 100 minutes?\n\n100 %% 60 ## How many minutes are left over?\n\n\n\n\nIn RStudio, you can start a new script using the dropdown menu File &gt; New File &gt; R Script\nuse your R script to save finalized commands\n\ntype in the console to practice and debug, then use the script to save what worked\n\nR scripts allow you to save comments, or annotations, to your code\n\nanything following the # symbol in a script will not be treated like an R command—essentially, R will skip over it"
  },
  {
    "objectID": "R_introduction_v2.html#logic",
    "href": "R_introduction_v2.html#logic",
    "title": "R - An Introduction",
    "section": "Logic",
    "text": "Logic\n\nR can also be used for logical operations\n\nit recognizes the standard logical operators\n\n\n\n\n\nCode\n1 &gt; 2\n\n1 &gt; 2 & 1 &gt; 0.5 # The \"&\" stands for \"and\"\n\n1 &gt; 2 | 1 &gt; 0.5 # The \"|\" stands for \"or\" (not a pipe a la the shell)\n\nisTRUE (1 &lt; 2)\n\n\n\nHere are the detailed list of logical operators in R\n\n& and | are used for element-wise logical operations\n&& and || are used for short-circuit logical operations\n\ne.g. 1 &gt; 2 && 1 &gt; 0.5 will return FALSE without evaluating the second condition\n\n! is used for negation (i.e. “not”)\n==, !=, &lt;, &lt;=, &gt;, and &gt;= are used for comparison\n\nHere is further information about logical vectors in R\n\nLogical vectors are vectors that contain only TRUE, FALSE, or NA values\nLogical vectors are often used for subsetting data frames or matrices"
  },
  {
    "objectID": "R_introduction_v2.html#logic-1",
    "href": "R_introduction_v2.html#logic-1",
    "title": "R - An Introduction",
    "section": "Logic",
    "text": "Logic\n\nOrder of precedence\n\nlogic statements follow a strict order of precedence\nlogical operators (&gt;, ==, etc) are evaluated before Boolean operators (& and |)\n\nfailure to recognise this can lead to unexpected behaviour\n\n\n\n\n\n\nCode\n1 &gt; 0.5 & 2\n\n\n\n\n\n\nCode\n1 &gt; 0.5 & 1 &gt; 2\n\n\n\nLesson: explicit about each component of your logic statement(s)\n\n\n\n2 is converted into as.logical(2)\nas.logical(2) is TRUE because it is not zero\n\n\n\nNegation: !\n\nthis will come in very handy when we start filtering data objects\n\n\n\n\n\n\nCode\nis.na(1:10)\n!is.na(1:10)\n\nNegate(is.na)(1:10)"
  },
  {
    "objectID": "R_introduction_v2.html#logical-operators",
    "href": "R_introduction_v2.html#logical-operators",
    "title": "R - An Introduction",
    "section": "logical operators",
    "text": "logical operators\n\nValue matching: %in%\n\nwhether an object is contained within (i.e. matches one of) a list of items, use %in%\n\n\n\n\n\nCode\n4 %in% 1:10\n\n4 %in% 5:10\n\n\n\nThere’s no equivalent “not in” command\n\nbut we can create one\n\n\n\n\n\n\nCode\n`%ni%` = Negate(`%in%`) ## The backticks (`) help to specify functions.\n\n4 %ni% 5:10\n\n\n\nEvaluation\n\nuse two equal signs for logical evaluation\n\n\n\n\n\n\nCode\n1 == 1 ## This does.\n\n1 != 2 ## Note the single equal sign when combined with a negation\n\n\n\n\nEvaluation caveat: Floating-point numbers\nWhat do you think will happen if we evaluate 0.1 + 0.2 == 0.3?\n0.1 + 0.2 == 0.3\nProblem: Computers represent numbers as binary (i.e. base 2) floating-points\n\nMore here.\n\nFast and memory efficient, but can lead to unexpected behaviour.\n\n\nSimilar to the way that standard decimal (i.e. base 10) representation can’t precisely capture certain fractions\n\ne.g. \\(\\frac{1}{3} = 0.3333...\\)\n\nSolution: Use all.equal() for evaluating floats (i.e fractions)\n\nall.equal(0.1 + 0.2, 0.3)"
  },
  {
    "objectID": "R_introduction_v2.html#assignment-operators",
    "href": "R_introduction_v2.html#assignment-operators",
    "title": "R - An Introduction",
    "section": "Assignment operators",
    "text": "Assignment operators\n\nAssignment: &lt;- or =\n\nuse &lt;- for assignment, but = is also acceptable\n&lt;- is the preferred operator in R, but = is more common in other programming languages\n\n\n\n\n\nCode\na &lt;- 10 + 5\na\n\n\n\nnevertheless, we can use = for assignment\n\n\n\n\n\nCode\nb = 10 + 10 \n\nb\n\n\n\n\nan arrow can point in the other direction too (i.e. -&gt;)\nthe following code chunk is equivalent to the previous one, although used much less frequently\n\n\n\nCode\n10 + 5 -&gt; a\n\n\n\nNote that the assigned object must be on the left with “=”"
  },
  {
    "objectID": "R_introduction_v2.html#help",
    "href": "R_introduction_v2.html#help",
    "title": "R - An Introduction",
    "section": "Help",
    "text": "Help\n\nUse help or ? to get help on a function\n\ne.g. ?mean will give you the documentation for the mean() function\n\nFor more information on a (named) function or object in R, consult the “help” documentation. For example:\n\n\n\n\nCode\nhelp(plot)\n\n?plot \n\n\n\nComments in R are demarcated by #.\nHit Ctrl+Shift+c in RStudio to (un)comment whole sections of highlighted code\nVignettes\n\nfor many packages, you can also try the vignette() function, which will provide an introduction to a package and it’s purpose through a series of helpful examples\n\ne.g. vignette(\"ggplot2\") will give you a detailed introduction to the ggplot2 package\n\n\n\n\n\nsee the Examples section at the bottom of the help file?\n\nYou can run them with the example() function\nTry it: example(plot)"
  },
  {
    "objectID": "R_introduction_v2.html#object-oriented-programming-oop-in-r",
    "href": "R_introduction_v2.html#object-oriented-programming-oop-in-r",
    "title": "R - An Introduction",
    "section": "Object-oriented programming (OOP) in R",
    "text": "Object-oriented programming (OOP) in R\n\nR is an object-oriented programming language\n\neverything in R is an object\nobjects can be manipulated and transformed using functions\nfunctions are also objects in R\n\nR has three main object classes\n\nvectors\nlists\ndata frames\n\nR also has other object classes, such as matrices, arrays, and factors\nEach object class has its own set of rules (“methods”) for determining valid operations\n\ne.g. you can perform many of the same operations on matrices and data frames\nBut there are some operations that only work on a matrix, and vice versa\nAt the same time, you can (usually) convert an object from one type to another\n\n\n\n\n\nCode\n## Create a small data frame called \"d\".\n\nd = data.frame(x = 1:2, y = 3:4) \n\nd\n\n\n\n\n\n\nCode\n## Convert it to (i.e. create) a matrix call \"m\".\n\nm = as.matrix(d)\n\nm\n\n\n\n\nR can store information as an object with a name of our choice\n\nOnce we have created an object, we just refer to it by name\nwe are using objects as “shortcuts” to some piece of information or data\n\nthere are many different types (or classes) of objects\narithmetic operations like addition and subtraction cannot be used for character strings\nMost obviously, there are actually multiple OOP frameworks in R\n\nS3, S4, R6…\nHadley Wickham’s “Advanced R” provides a very thorough overview of the main ones\n\nBut for our purposes, it is much more helpful to think about\n\nthe shared characteristics of these different systems and\nthe broad implications of OOP in R.\n\n\nWhat we lose in detail, we hopefully gain in perspective\nBut do read Hadley’s book if you get the chance + It’s incredibly helpful (as are all his books)"
  },
  {
    "objectID": "R_introduction_v2.html#object-class-type-and-structure",
    "href": "R_introduction_v2.html#object-class-type-and-structure",
    "title": "R - An Introduction",
    "section": "Object class, type, and structure",
    "text": "Object class, type, and structure\n\nUse the class, typeof, and str commands if you want understand more about a particular object\n\n\n\n\nCode\nd = data.frame(x = 1:2, y = 3:4) \n\nclass(d) ## Evaluate its class\n\ntypeof(d) ## Evaluate its type\n\nstr(d) ## Show its structure\n\n\n\nwe can inspect/print an object directly in the console\n\ne.g. Type d\n\nThe View() function is also very helpful\n\nthis is the same as clicking on the object in the RStudio Environment pane\ne.g. View(d)\n\n\n\n\nPS — Confused by the fact that typeof(d) returns “list”? See here."
  },
  {
    "objectID": "R_introduction_v2.html#global-environment",
    "href": "R_introduction_v2.html#global-environment",
    "title": "R - An Introduction",
    "section": "Global environment",
    "text": "Global environment\n\nThe global environment is where all objects are stored\n\nyou can see the global environment in the RStudio Environment pane\nyou can also see the global environment by typing ls() in the console\n\nWorking with multiple objects\n\nyou can create multiple objects in the global environment\nyou can manipulate and transform these objects using functions\nyou can also use the rm() function to remove objects from the global environment\n\nR’s ability to keep multiple objects in memory at the same time is a huge plus when it comes to effective data work\n\ne.g. We can copy an existing data frame, or create new one entirely from scratch - either will exist happily with our existing objects in the global environment\n\n\n\n\n\nCode\nd2 = data.frame(x = rnorm(10), y = runif(10))"
  },
  {
    "objectID": "R_introduction_v2.html#everything-has-a-name",
    "href": "R_introduction_v2.html#everything-has-a-name",
    "title": "R - An Introduction",
    "section": "Everything has a name",
    "text": "Everything has a name\n\nEvery object in R has a name\n\nyou can use the name to refer to the object in the global environment\nobject names are case sensitive\n\nThe name of our object must follow certain restrictions\n\nit cannot begin with a number\nit should not contain spaces\nspecial characters such as % and $ should not be used\n\nReserved words\n\nwe can assign objects to different names\nHowever, there are a number of special words that are “reserved” in R\n\nThese are are fundamental commands, operators and relations in base R that you cannot (re)assign, even if you wanted to\nSee here for a full list\n\n\n\n\n\n\nyou can also use the name to refer to the object in a function\nfunction itself is an object\n\ne.g. mean is a function that calculates the mean of a vector\nwe can assign it to a new name, e.g. average = mean\nbut we cannot assign it to a reserved word, e.g. if = mean\nthis will lead to an error"
  },
  {
    "objectID": "R_introduction_v2.html#everything-has-a-name-1",
    "href": "R_introduction_v2.html#everything-has-a-name-1",
    "title": "R - An Introduction",
    "section": "Everything has a name",
    "text": "Everything has a name\n\nSemi-reserved words\n\nthere is a class of words and strings that are called “semi-reserved”\n\n\n\n\n\nCode\nmy_vector = c(1, 2, 5)\nmy_vector\n\n\n\nwhat happens if you type the following?\n\n\n\n\n\nCode\nc = 4\nc(1, 2 ,5)\n\n\n\nR is “smart” enough to distinguish between the variable c = 4 that we created and the built-in function c() that calls for concatenation\nHowever, R won’t always be able to distinguish between conflicting definitions\n\n\n\n\n\nCode\npi\npi = 2\npi\n\n\n\nBottom line: Don’t use (semi-)reserved characters!\n\n\n\nthese are named functions or constants (e.g. pi) that you can re-assign if you really wanted to… but already come with important meanings from base R\nThe c() function is a good example of a semi-reserved character\nArguably the most important semi-reserved character is c(), which we use for concatenation\n\ni.e. creating vectors and binding different objects together"
  },
  {
    "objectID": "R_introduction_v2.html#namespace-conflicts",
    "href": "R_introduction_v2.html#namespace-conflicts",
    "title": "R - An Introduction",
    "section": "Namespace conflicts",
    "text": "Namespace conflicts\n\nR has a large number of packages, each with its own set of functions\n\nsometimes, different packages have functions with the same name\nthis can lead to “namespace conflicts” where R doesn’t know which function to use\n\ne.g. Look what happens we load the dplyr package\n\n\n\n\nCode\nlibrary(dplyr)\n\n\n\nThe messages that you see about some object being masked from ‘package:X’ are warning you about a namespace conflict\n\ne.g. Both dplyr and the stats package have functions named “filter” and “lag”\n\nWhenever a namespace conflict arises, the most recently loaded package will gain preference\n\nso the filter() function now refers specifically to the dplyr variant\nwhat if we want the stats variant?\n\n\n\n\nThe potential for namespace conflicts is a result of the OOP approach\n\nAlso reflects the fundamental open-source nature of R and the use of external packages\nPeople are free to call their functions whatever they want, so some overlap is only to be expected\n\nTemporarily use stats::filter()\n\nPermanently assign filter = stats::filter"
  },
  {
    "objectID": "R_introduction_v2.html#namespace-conflicts-1",
    "href": "R_introduction_v2.html#namespace-conflicts-1",
    "title": "R - An Introduction",
    "section": "Namespace conflicts",
    "text": "Namespace conflicts\nTwo common ways to resolve namespace conflicts in R:\n\nUse package::function()\n\n\nWe can explicitly call a conflicted function from a particular package using the package::function() syntax\n\n\n\n\nCode\nstats::filter(1:10, rep(1, 2))\n\n\n\n\n\n\nCode\ndplyr::starwars ## Print the starwars data frame from the dplyr package\n\nscales::comma(c(1000, 1000000)) ## Use the comma function, which comes from the scales package\n\n\n\nAssign function = package::function\n\n\nA more permanent solution is to assign a conflicted function name to a particular package\nThis will hold for the remainder of your current R session, or until you change it back\n\n\n\n\n\nCode\nfilter = stats::filter ## Note the lack of parentheses\nfilter = dplyr::filter ## Change it back again\n\n\n\n\n\nWe can also use :: for more than just conflicted cases\ne.g. Being explicit about where a function (or dataset) comes from can help add clarity to our code\ne.g. dplyr::filter(iris, Species==\"virginica\") is clearer than just filter(iris, Species==\"virginica\")\n\nAnother good rule of thumb is that you want to load your most important packages last\n\ne.g. Load the tidyverse after you’ve already loaded any other packages\n\nUser-side namespace conflicts\n\nA final thing to say about namespace conflicts is that they don’t only arise from loading packages\nThey can arise when users create their own functions with a conflicting name\n\ne.g. If I was naive enough to create a new function called c()"
  },
  {
    "objectID": "R_introduction_v2.html#indexing",
    "href": "R_introduction_v2.html#indexing",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nIndexing is a way to access specific elements of an object\n\ne.g. we can access specific elements of a vector, list, or data frame using indexing\n\nThere are two main ways to index objects in R\n\nOption 1: []\n\nThis is the most common way to index objects in R\nIt works for vectors, matrices, data frames, and lists\nIt can be used to access specific elements of an object, or to subset an object\n\nOption 2: $\n\nThis is a special operator that is used to access specific elements of a list or data frame by name\nIt is often used to access columns of a data frame by name\n\n\n\n\n\nIndexing is done using square brackets []\nIndexing can be done using either numeric or logical vectors\n\nNumeric indexing refers to the position of the element in the object\nLogical indexing refers to a logical vector that indicates which elements to keep\n\nIndexing can also be done using names\n\ne.g. we can access specific elements of a data frame using the column names"
  },
  {
    "objectID": "R_introduction_v2.html#indexing-1",
    "href": "R_introduction_v2.html#indexing-1",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nuse [] to index objects that we create in R\n\n\n\n\nCode\na = 1:10\na[4] ## Get the 4th element of object \"a\"\na[c(4, 6)] ## Get the 4th and 6th elements\n\n\n\nIt also works on larger arrays (vectors, matrices, data frames, and lists)\n\n\n\n\n\nCode\nlibrary(dplyr)\nstarwars[1, 1] ## Show the cell corresponding to the 1st row & 1st column of the data frame\n\n\n\nWhat does starwars[1:3, 1] give you?\nWhat does starwars[-1, 1] give you?\nwhat if we want to get the 1st column of the data frame?\n\n\n\n\n\nCode\nstarwars[, 1] ## Get the 1st column of the starwars data frame\n\n\n\nwe can use $ to access the columns of a data frame by name\n\n\n\n\n\nCode\nstarwars$name ## Get the \"name\" column of the starwars data frame\n\n\n\n\nWhat if you want to get the names of the columns in a data frame? . . .\n\n\n[1] Indexing in R begins at 1. Not 0 like some languages (e.g. Python and JavaScript)"
  },
  {
    "objectID": "R_introduction_v2.html#indexing-2",
    "href": "R_introduction_v2.html#indexing-2",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nlists are a more complex type of array object in R\n\nthey can contain a random assortment of objects that don’t share the same class\n\ne.g. a list can contain a vector, a data frame, and a matrix\nor even lists of lists\n\nlists are very flexible and can be used to store any type of object\n\nThe relevance to indexing is that lists require two square brackets [[]] to index the parent list item and then the standard [] within that parent item\nThis is different from the single square brackets that we use to index vectors, matrices, and data frames\n\nThe double square brackets are used to extract the object itself, rather than a subset of the list"
  },
  {
    "objectID": "R_introduction_v2.html#indexing-3",
    "href": "R_introduction_v2.html#indexing-3",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nLet’s look at an example of a list to see how it works in practice\n\nWe’ll use the my_list object, which contains three objects: a character string, a numeric vector, and a data frame\n\nAs before, we have two options for indexing lists\nOption 1: [[ ]]\n\nuse double square brackets to index a list\nthis will return the object itself, rather than a subset of the list\ne.g. my_list[[1]] will return the first object in the list\nwe can also use my_list[[2]][3] to return the third element of the second object\n\n\n\n\n\nCode\nmy_list = list(a = \"hello\", b = c(1,2,3), c = data.frame(x = 1:5, y = 6:10))\n\nmy_list[[1]] \n\nmy_list[[2]][3]"
  },
  {
    "objectID": "R_introduction_v2.html#indexing-4",
    "href": "R_introduction_v2.html#indexing-4",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nOption 2: $\n\nlists provide a nice segue to our other indexing operator: $\nLet’s continue with the my_list example\n\n\n\n\n\nCode\nmy_list\n\nmy_list$a\n\nmy_list$c$x\n\n\n\nThe $ form of indexing also works (and in the manner that you probably expect) for other object types in R\n\nIn some cases, you can also combine the two index options\n\n\n\n\n\n\nCode\nmy_list$b[3]\n\nstarwars$name[1]\n\n\n\n\nnote some key differences between the output from this example and that of our previous starwars[1, 1] example\n\nWhat are they?\nHint: Apart from the visual cues, try wrapping each command in str()\n\nThe last thing that I want to say about $ is that it provides another way to avoid the “object not found” problem that we ran into with our earlier regression example\n\ne.g. lm(y ~ x) will not work, but lm(d$y ~ d$x) will work\n\n\n. . .\n\n\nCode\nd = data.frame(x = 1:10, y = 11:20)\n\nlm(y ~ x) \n\nlm(d$y ~ d$x)"
  },
  {
    "objectID": "R_introduction_v2.html#cleaning-up",
    "href": "R_introduction_v2.html#cleaning-up",
    "title": "R - An Introduction",
    "section": "cleaning up",
    "text": "cleaning up\n\nUse rm() to remove objects from the global environment\n\ne.g. rm(a) will remove the object a from the global environment\n\n\n\n\n\nCode\na = \"hello\"\nb = \"world\"\nrm(a, b)\n\n\n\nuse rm(list = ls()) to remove all objects in your working environment (except packages)\n\nBetter just to start a new R session\n\n\n\n\nbut this is frowned upon\n\n\n\nDetaching packages is more complicated\n\nthere could be many cross-dependencies (i.e. one package depends on, and might even automatically load, another package)\ne.g. detach(package:dplyr)\n\nstill, better just to restart your R session"
  },
  {
    "objectID": "R_introduction_v2.html#removing-plots",
    "href": "R_introduction_v2.html#removing-plots",
    "title": "R - An Introduction",
    "section": "Removing plots",
    "text": "Removing plots\n\nUse dev.off() to remove the current plot\n\ne.g. dev.off() will remove the current plot from the plotting window\n\nUse graphics.off() to remove all plots\n\n\n\n\nCode\nplot(1:10)\ndev.off()\n\n\n\nRStudio has convenient buttons for clearing your workspace environment and removing (individual) plots"
  },
  {
    "objectID": "R_introduction_v2.html#references",
    "href": "R_introduction_v2.html#references",
    "title": "R - An Introduction",
    "section": "References",
    "text": "References\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social Science : An Introduction in Tidyverse. Princeton, New Jersey: Princeton University Press.\n\n\nWickham, Hadley. 2016. Ggplot2 : Elegrant Graphics for Data Analysis. Second edition. Use r! Switzerland: Springer.\n\n\n———. 2019. Advanced r. Second edition. The r Series. Boca Raton, FL: CRC Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2023. R for Data Science : Import, Tidy, Transform, Visualize, and Model Data. Second edition. Beijing: O’Reilly."
  },
  {
    "objectID": "R_introduction_v2.html#data-files-loading-and-saving",
    "href": "R_introduction_v2.html#data-files-loading-and-saving",
    "title": "R - An Introduction",
    "section": "Data files: Loading and saving",
    "text": "Data files: Loading and saving\n\nR can read and write data files in various formats\n\ne.g. CSV, Excel, SPSS, Stata, etc.\nwe will focus on CSV files for now\n\nworking directory\n\nR will look for files in the current working directory\nyou can check the current working directory using getwd()\nyou can change the working directory using setwd()\ne.g. setwd(\"path/to/your/directory\")"
  },
  {
    "objectID": "R_introduction_v2.html#data-files-loading-and-saving-1",
    "href": "R_introduction_v2.html#data-files-loading-and-saving-1",
    "title": "R - An Introduction",
    "section": "Data files: Loading and saving",
    "text": "Data files: Loading and saving\n\ngo to here to download a sample dataset\nuse read.csv() to read a CSV file into R\n\ne.g. unpop &lt;- read.csv(\"UNpop.csv\")\nthis will read the CSV file and create a data frame called unpop\n\n\n\n\n\nCode\nunpop &lt;- read.csv(\"Downloads/UNpop.csv\")\n\n\n\n\n\n\nCode\nclass(unpop)\n\n\n\nRData can be used to save and load R objects\n\ne.g. save(unpop, file = \"unpop.RData\") will save the unpop data frame as an RData file\nyou can load the RData file using load(\"unpop.RData\")\n\nRData files are useful for saving and loading multiple objects at once\n\n\n\n\n\nCode\nsave(unpop, file = \"unpop.RData\")\n\n\n\n\na data frame is a special type of list where each element is a vector of the same length\n\ndata frames are used to store tabular data, where each column represents a variable and each row represents an observation\n\nR will save the entire workspace as .RData in the working directory without an explicit file name and automatically load it next time we launch\n\nThis is not recommended practice because the .RData file is invisible to users of many operating systems and R will not tell us what objects are loaded unless we explicitly issue the ls() function"
  },
  {
    "objectID": "R_introduction_v2.html#data-files-loading-and-saving-2",
    "href": "R_introduction_v2.html#data-files-loading-and-saving-2",
    "title": "R - An Introduction",
    "section": "Data files: Loading and saving",
    "text": "Data files: Loading and saving\n\nuseful functions for exploring data frames\n\nnames() to view the names of the columns in a data frame\nnrow() to view the number of rows in a data frame\nncol() to view the number of columns in a data frame\ndim() to view the dimensions of a data frame (number of rows and columns)\nstr() to view the structure of a data frame\nhead() to view the first few rows of a data frame\ntail() to view the last few rows of a data frame\n\nuse write.csv() to write a data frame to a CSV file\n\ne.g. write.csv(unpop, \"UNpop.csv\")\nthis will write the unpop data frame to a CSV file called UNpop.csv"
  },
  {
    "objectID": "R_introduction_v2.html#data-files-loading-and-saving-3",
    "href": "R_introduction_v2.html#data-files-loading-and-saving-3",
    "title": "R - An Introduction",
    "section": "Data files: Loading and saving",
    "text": "Data files: Loading and saving\n\nload data in other formats\nR can read and write data files in various formats, including SPSS, Stata, and Excel\nforeign package can read and write data files in SPSS, Stata, and other formats\n\nit is part of the base R installation and is widely used for reading and writing data files\n\nhaven package is designed to be fast and efficient\n\nit can read and write data files in SPSS, Stata, and SAS formats\nit is part of the tidyverse and is designed to be fast and efficient\n\nreadr package can read and write data files in CSV, TSV, and other text formats\n\nit is part of the tidyverse and is designed to be fast and efficient\n\nreadxl package can read and write Excel files\nwritexl package can write data frames to Excel files\n\n\n\n\nCode\n#install.packages(\"haven\")\n\nlibrary(\"haven\")\n\n\n\n\n\n\nCode\n# Read Stata file\nurl_stata&lt;-\"https://github.com/kwan-MSDA/MSDA-Bootcamp/blob/main/dataset/UNpop.dta?raw=true\"\nunpop_stata&lt;- read_dta(url_stata)"
  },
  {
    "objectID": "R_introduction.html",
    "href": "R_introduction.html",
    "title": "R - An Introduction",
    "section": "",
    "text": "R is a programming language and software environment for statistical computing and graphics\n\nwidely used in academia and industry\nfor data analysis, statistical modeling, and visualization\nfor machine learning, data mining, and big data analysis\nfor reproducible research and scientific computing\n\nR is an implementation of the S programming language\n\nS was developed at Bell Laboratories by John Chambers and colleagues\nS was designed for data analysis and graphics\nS was the precursor to the commercial statistical software package S-PLUS"
  },
  {
    "objectID": "MSDA-Bootcamp/about.html",
    "href": "MSDA-Bootcamp/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n[1] 2"
  },
  {
    "objectID": "Data Visualization with R.html",
    "href": "Data Visualization with R.html",
    "title": "Data Visualization with R",
    "section": "",
    "text": "it starts from the grammar of graphics Wickham (2016)\n\n\n\ndata\naesthetics\ngeoms\nfacets\nstats\nscales\ncoordinates\nthemes\n\n\n\n\n\nsource: University of Melbourne"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2",
    "href": "Data Visualization with R.html#ggplot2",
    "title": "Data Visualization with R",
    "section": "",
    "text": "it starts from the grammar of graphics Wickham (2016)\n\n\n\ndata\naesthetics\ngeoms\nfacets\nstats\nscales\ncoordinates\nthemes\n\n\n\n\n\nsource: University of Melbourne"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-1",
    "href": "Data Visualization with R.html#ggplot2-1",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nEvery ggplot2 plot has three key components:\n\ndata\nA set of aesthetic mappings between variables in the data and visual properties\nAt least one layer which describes how to render each observation\n\nLayers are usually created with a geom function"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-2",
    "href": "Data Visualization with R.html#ggplot2-2",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nillustration\n\nUse built-in dataset from ggplot2: mpg\n\ninformation about the fuel economy of popular car models in 1999 and 2008\ncollected by the US Environmental Protection Agency\nhere are some of the variables in the dataset:\n\nmanufacturer, model, year\ndispl (engine displacement in litres)\nhwy (miles per gallon on the highway)\ncty (miles per gallon in the city)\ncyl (number of cylinders)\ndrv (f = front-wheel drive, r = rear wheel drive, 4 = 4wd)\nclass (type of car)\ntrans (type of transmission)\nfl (fuel type)\n\n\n\n\n\nThe mpg dataset is a tibble, a modern version of a data frame\nThe mpg dataset is part of the ggplot2 package\nThe mpg dataset is a tidy dataset\nThis dataset suggests many interesting questions\n\nHow are engine size and fuel economy related?\nDo certain manufacturers care more about fuel economy than others?\nHas fuel economy improved in the last ten years?\n\nList five functions that you could use to get more information about the mpg dataset\nHow can you find out what other datasets are included with ggplot2?\nApart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert cty and hwy into the European standard of l/100km?\nWhich manufacturer has the most models in this dataset?\n\nWhich model has the most variations?\nDoes your answer change if you remove the redundant specification of drive train (e.g. “pathfinder 4wd”, “a4 quattro”) from the model name?"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-3",
    "href": "Data Visualization with R.html#ggplot2-3",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nLet us plot the relationship between engine size and fuel economy\n\n. . .\n\n\nCode\nlibrary(ggplot2)\n\ndata(mpg)\n\nggplot(data=mpg, mapping=aes(x=displ, y=hwy)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n. . .\n\nHow would you describe the relationship between displ and hwy?\n\n\n\nCode\nggplot(mpg, aes(cty, hwy)) + geom_point()\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(carat, price)) + geom_point()\n\n\n\n\n\n\n\n\n\nCode\nggplot(economics, aes(date, unemploy)) + geom_line()\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(cty)) + geom_histogram()"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-4",
    "href": "Data Visualization with R.html#ggplot2-4",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nColour, size, shape and other aesthetic attributes\n\nAesthetics are visual properties of the objects in the plot\n\ncolour, size, shape, linetype, fill, alpha\n\nAesthetics can be mapped to variables in the data\n\naes(colour=variable)\naes(size=variable)\naes(shape=variable)\naes(linetype=variable)\naes(fill=variable)\naes(alpha=variable)"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-5",
    "href": "Data Visualization with R.html#ggplot2-5",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nColour, size, shape and other aesthetic attributes\n\n\nCode\nggplot(mpg, aes(displ, hwy, colour=class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(trans, hwy, colour=class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nggplot2 takes care of the details of converting data (e.g., ‘f’, ‘r’, ‘4’) into aesthetics (e.g., ‘red’, ‘yellow’, ‘green’) with a scale\n\nThere is one scale for each aesthetic mapping in a plot.\nThe scale is also responsible for creating a guide, an axis or legend, that allows you to read the plot, converting aesthetic values back into data values\n\nThe scale functions are:\n\nscale_colour_manual()\nscale_size_manual()\nscale_shape_manual()\nscale_linetype_manual()\nscale_fill_manual()\nscale_alpha_manual()\n\nWhat happens when you map them to continuous values? What about categorical values? What happens when you use more than one aesthetic in a plot?"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-6",
    "href": "Data Visualization with R.html#ggplot2-6",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2"
  },
  {
    "objectID": "Data Visualization with R.html#labels",
    "href": "Data Visualization with R.html#labels",
    "title": "Data Visualization with R",
    "section": "labels",
    "text": "labels\n\nLabels are important for making your plot understandable\n\nxlab() and ylab() functions\nlabs() function\n\n\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(color=class)) +\n  labs(x=\"Engine size (litres)\",\n       y=\"Highway fuel economy (miles per gallon)\",\n       title=\"Relationship between engine size and fuel economy\",\n       color=\"Car type\",\n       caption=\"Source: mpg dataset\")+\n  theme_bw()"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-7",
    "href": "Data Visualization with R.html#ggplot2-7",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nggthemes\n\n\nCode\nlibrary(ggthemes)\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(color=class)) +\n  labs(x=\"Engine size (litres)\",\n       y=\"Highway fuel economy (miles per gallon)\",\n       title=\"Relationship between engine size and fuel economy\",\n       color=\"Car type\",\n       caption=\"Source: mpg dataset\")+\n  theme_economist()+\n  scale_color_tableau()"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-8",
    "href": "Data Visualization with R.html#ggplot2-8",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nFacets\n\nFacets allow you to create multiple plots that each display a subset of the data\n\nfacet_wrap() creates a grid of plots\nfacet_grid() creates a matrix of plots\n\n\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  facet_wrap(~class)"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-9",
    "href": "Data Visualization with R.html#ggplot2-9",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nPlot geoms\n\nGeoms are the geometric objects that represent the data in the plot\n\ngeom_point() creates a scatterplot\ngeom_smooth() creates a smoothed line plot\ngeom_histogram() creates a histogram\ngeom_boxplot() creates a boxplot\ngeom_bar() creates a bar plot\ngeom_line() creates a line plot\ngeom_vline() adds a vertical line to the plot\ngeom_hline() adds a horizontal line to the plot\ngeom_abline() adds a diagonal line to the plot"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-10",
    "href": "Data Visualization with R.html#ggplot2-10",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nAdding a smoother to a plot\n\n\nCode\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  geom_smooth(span=0.3)"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-11",
    "href": "Data Visualization with R.html#ggplot2-11",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nBoxplots and related plots\n\nBoxplots, violin and jittered points are useful for visualizing the distribution of a continuous variable\n\n\n\nCode\n##| layout-ncol: 3\n##| fig-width: 4\n\nlibrary(ggpubr)\n\njitter&lt;- ggplot(mpg, aes(drv, hwy)) + geom_jitter()\nboxplot&lt;- ggplot(mpg, aes(drv, hwy)) + geom_boxplot()\nviolin&lt;- ggplot(mpg, aes(drv, hwy)) + geom_violin()\n\nggarrange(jitter, boxplot, violin, ncol=3)\n\n\n\n\n\n\n\n\n\n\n\nA boxplot is a type of visual shorthand for measures of position (percentiles) that describe a distribution\n\nIt is also useful for identifying potential outliers in the data\nVisual points that display observations that fall more than 1.5 times the IQR from either edge of the box\nThese outlying points are unusual so are plotted individually\n\nA violin plot is a combination of a boxplot and a kernel density plot\n\nIt shows the distribution of the data, the median, and the interquartile range\nIt is useful for comparing the distribution of a continuous variable across different categories\n\nA jittered point plot is useful for visualizing the distribution of a continuous variable across different categories\n\nIt is useful for identifying potential outliers in the data"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-12",
    "href": "Data Visualization with R.html#ggplot2-12",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nBoxplots\n\n\nCode\nggplot(mpg, aes(class, hwy)) +\n  geom_boxplot()+\n  labs(title=\"Highway fuel economy by car type\",\n       x=\"Car type\",\n       y=\"Highway fuel economy (miles per gallon)\")+\n  coord_flip()+\n  theme_economist()"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-13",
    "href": "Data Visualization with R.html#ggplot2-13",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nBar plots\n\nBar plots are useful for visualizing the distribution of a categorical variable\n\n\n\n\n\nCode\nggplot(mpg, aes(class)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(class, fill=drv)) +\n  geom_bar()"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-14",
    "href": "Data Visualization with R.html#ggplot2-14",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nHistograms and density plots\n\nHistograms and density plots are useful for visualizing the distribution of a continuous variable\n\n\n\n\n\nCode\nggplot(mpg, aes(hwy)) +\n  geom_histogram() \n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(mpg, aes(hwy)) +\n  geom_density()"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-15",
    "href": "Data Visualization with R.html#ggplot2-15",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nHistograms and density plots\n\n\nCode\nden&lt;- ggplot(mpg, aes(displ, colour = drv)) + \n  geom_density(linewidth=0.8)\n  \nhist&lt;- ggplot(mpg, aes(displ, fill = drv)) + \n  geom_histogram(binwidth = 0.5) + \n  facet_wrap(~drv, ncol = 1)\n\nggarrange(den, hist, ncol=2)"
  },
  {
    "objectID": "Data Visualization with R.html#ggplot2-16",
    "href": "Data Visualization with R.html#ggplot2-16",
    "title": "Data Visualization with R",
    "section": "ggplot2",
    "text": "ggplot2\n\nggsave - save the graph as an image file\n\n\nCode\nggsave(filename=\"mpg_displ.png\",width=6, height=4)"
  },
  {
    "objectID": "Data Visualization with R.html#final-example---toy-imports-to-the-us-from-1996-2005",
    "href": "Data Visualization with R.html#final-example---toy-imports-to-the-us-from-1996-2005",
    "title": "Data Visualization with R",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\nit is drawn from Scott (2021)\n\n\n\nCode\nlibrary(tidyverse)\n\ntoy_imports &lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/toyimports.csv\")\n\nhead(toy_imports)\n\n\n# A tibble: 6 × 8\n  partner  year partner_name       product product_name US_report_import pop2000\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;                   &lt;dbl&gt;   &lt;dbl&gt;\n1 ARE      1998 United Arab Emira…  950341 \"Toys repre…             1.06  3.25e6\n2 ARE      2000 United Arab Emira…  950349 \"Toys repre…            12.0   3.25e6\n3 ARE      2003 United Arab Emira…  950349 \"Toys repre…             4.65  3.25e6\n4 ARE      2005 United Arab Emira…  950320 \"Reduced-si…            49.2   3.25e6\n5 ARG      1996 Argentina           950341 \"Toys repre…             0     3.69e7\n6 ARG      1996 Argentina           950310 \"Electric t…            10.8   3.69e7\n# ℹ 1 more variable: region &lt;dbl&gt;\n\n\n. . .\n\nTask: make a graph showing total toy imports over time for the U.S.’s top 5 trading partners by total dollar value of toys imported"
  },
  {
    "objectID": "Data Visualization with R.html#final-example---toy-imports-to-the-us-from-1996-2005-1",
    "href": "Data Visualization with R.html#final-example---toy-imports-to-the-us-from-1996-2005-1",
    "title": "Data Visualization with R",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\n\nCode\ncountry_total&lt;- toy_imports %&gt;% \n  group_by(partner_name) %&gt;%\n  summarize(total_import=sum(US_report_import)) %&gt;%\n  arrange(desc(total_import)) %&gt;%\n  head(5)\n\ncountry_total\n\n\n# A tibble: 5 × 2\n  partner_name     total_import\n  &lt;chr&gt;                   &lt;dbl&gt;\n1 China               26842305.\n2 Denmark              1034990.\n3 Canada                572309.\n4 Hong Kong, China      545186.\n5 Switzerland           400969.\n\n\n\n\nthe total dollar value of toys imported to the U.S. (US_report_import, in multiples of $1,000) in a specific product category from a specific country in a specific year\nThe product categories have unique numerical codes (product) as well as product names exciting enough to quicken the heart of any toy-loving child (“Parts and accessories :– Other,” “Toys representing animal or non-human figures,” and so on\nGroup all the observations by trading partner (the partner_name variable)\nFor each partner, calculate total dollar value by summing toy imports (US_report_import) across all categories and years\nArrange the partners by total dollar value"
  },
  {
    "objectID": "Data Visualization with R.html#final-example---toy-imports-to-the-us-from-1996-2005-2",
    "href": "Data Visualization with R.html#final-example---toy-imports-to-the-us-from-1996-2005-2",
    "title": "Data Visualization with R",
    "section": "Final Example - toy imports to the US from 1996-2005",
    "text": "Final Example - toy imports to the US from 1996-2005\n\n\nCode\n#| out-width: 100%\n\ntop5_partners=c(\"China\", \"Denmark\", \"Canada\", \"Hong Kong, China\", \"Switzerland\")\n\noptions(scipen = 999)\n\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(plotly)\n\np &lt;- toy_imports %&gt;% \n  filter(partner_name %in% top5_partners) %&gt;%\n  group_by(year, partner_name) %&gt;%\n  summarize(total_import=sum(US_report_import)) %&gt;% \n  ggplot(aes(year, total_import, color=partner_name)) +\n  geom_line()+\n  labs(title=\"Toy imports from the U.S.'s top-5 partners, 1996-2005\",\n       x=\"Year\",\n       y=\"Dollar value of imports (log scale)\",\n       color=\"Import Region\")+\n  scale_x_continuous(breaks=1996:2005)+\n  theme_economist()+ \n  scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n              labels = trans_format(\"log10\", math_format(10^.x)))\n\nggplotly(p)"
  },
  {
    "objectID": "Data Visualization with R.html#the-five-coldest-months-in-rapid-city-from-1995-to-2011",
    "href": "Data Visualization with R.html#the-five-coldest-months-in-rapid-city-from-1995-to-2011",
    "title": "Data Visualization with R",
    "section": "the five coldest months in Rapid City from 1995 to 2011",
    "text": "the five coldest months in Rapid City from 1995 to 2011\n\n\nCode\nlibrary(tidyverse)\n\nrapidcity &lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/rapidcity.csv\")\n\nrapidcity %&gt;% \n  group_by(Year, Month) %&gt;%\n  summarize(avg_Temp = mean(Temp),\n            lowest_temp = min(Temp),\n            hightest_temp = max(Temp)) %&gt;%\n  arrange(avg_Temp) %&gt;%\n  head(5) %&gt;% \n  round(1)\n\n\n# A tibble: 5 × 5\n# Groups:   Year [4]\n   Year Month avg_Temp lowest_temp hightest_temp\n  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n1  1996     1     14.9       -11            46.1\n2  2009    12     16.4        -2.6          35.6\n3  2000    12     17.3        -9            38.8\n4  1996    12     17.5       -10.8          40.4\n5  2001     2     17.6        -3.9          40.8\n\n\n\n\nImport the data set (we’ve done this already).\nSplit the data set into individual months in individual years: January 1995, February 1995, March 1995, and so on, all the way through December 2011.\nFor each individual month, calculate the average of the Temp variable (along with any other summaries we might find interesting).\nSort the individual months according to their average temperatures.\nMake a table of the five coldest months"
  },
  {
    "objectID": "Data Visualization with R.html#survival-on-the-titanic",
    "href": "Data Visualization with R.html#survival-on-the-titanic",
    "title": "Data Visualization with R",
    "section": "survival on the Titanic",
    "text": "survival on the Titanic\nQ: how did survival among adult passengers vary by sex and cabin class?\n\n\nCode\ntitanic &lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/titanic.csv\")\n\nhead(titanic)\n\n\n# A tibble: 6 × 5\n  name                            survived sex       age passengerClass\n  &lt;chr&gt;                           &lt;chr&gt;    &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;         \n1 Allen, Miss. Elisabeth Walton   yes      female 29     1st           \n2 Allison, Master. Hudson Trevor  yes      male    0.917 1st           \n3 Allison, Miss. Helen Loraine    no       female  2     1st           \n4 Allison, Mr. Hudson Joshua Crei no       male   30     1st           \n5 Allison, Mrs. Hudson J C (Bessi no       female 25     1st           \n6 Anderson, Mr. Harry             yes      male   48     1st           \n\n\n\n\nCode\nsurv_adults&lt;- titanic %&gt;% \n  mutate(Adult = age &gt;= 18) %&gt;%\n  filter(Adult) %&gt;%\n  group_by(sex, passengerClass) %&gt;%\n  summarize(total_count=n(),\n            survived = sum(survived==\"yes\"),\n            survival_rate = survived/total_count)\n\n\nsurv_adults\n\n\n# A tibble: 6 × 5\n# Groups:   sex [2]\n  sex    passengerClass total_count survived survival_rate\n  &lt;chr&gt;  &lt;chr&gt;                &lt;int&gt;    &lt;int&gt;         &lt;dbl&gt;\n1 female 1st                    125      121        0.968 \n2 female 2nd                     85       74        0.871 \n3 female 3rd                    106       47        0.443 \n4 male   1st                    144       47        0.326 \n5 male   2nd                    143       12        0.0839\n6 male   3rd                    289       45        0.156 \n\n\n\n\nCode\nlibrary(ggthemes)\n\nggplot(surv_adults) +\n  geom_col(aes(x=sex, y=survival_rate)) +\n  facet_wrap(~passengerClass, nrow=1)+\n  labs(title=\"Survival rate by gender and passenger class\",\n       y=\"Survival rate\",\n       x=\"gender\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\ncreate a new variable, which we’ll call Adult, that determines whether a passenger is at least 18 years old.\nfilter the data set down to adults only.\ngroup the filtered data set by sex and cabin class (2 sexes× × 3 classes = 6 groups).\ncalculate the survival percentage for each group."
  },
  {
    "objectID": "Data Visualization with R.html#extra-gapminder-data",
    "href": "Data Visualization with R.html#extra-gapminder-data",
    "title": "Data Visualization with R",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(gapminder)\n\ndata(gapminder)\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;%\n  mutate(median_lifeExp = median(lifeExp)) %&gt;%\n  ggplot(aes(year, median_lifeExp, color=continent)) +\n  geom_line()+\n  labs(title=\"Life expectancy by continent and year\",\n       x=\"Year\",\n       y=\"Life expectancy\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(gapminder, aes(x = continent, y = lifeExp)) +\n  geom_boxplot(outlier.colour = \"hotpink\") +\n  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1 / 4)"
  },
  {
    "objectID": "Data Visualization with R.html#extra-gapminder-data-1",
    "href": "Data Visualization with R.html#extra-gapminder-data-1",
    "title": "Data Visualization with R",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\nthis is from BBC style\n\n\nCode\n# install.packages('devtools')\n#devtools::install_github('bbc/bbplot'))\n\nlibrary(ggpubr)\n\nsource(\"https://raw.githubusercontent.com/kwan-MSDA/R/main/bbc_style.R\")\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;%\n  summarize(median_lifeExp = median(lifeExp)) %&gt;%\n  ggplot(aes(year, median_lifeExp, color=continent)) +\n  geom_line()+\n  labs(title=\"Life expectancy by continent and year\",\n       x=\"Year\",\n       y=\"Life expectancy\")+\n  bbc_style()\n\n\n\n\n\n\n\n\n\n\n\nsource 1: https://bbc.github.io/rcookbook/#do_something_else_entirely\nsource 2: https://github.com/bbc/bbplot?tab=readme-ov-file\nsource 3: https://noeliagorod.com/2020/07/23/bbc-visual-and-data-journalism-cookbook-for-r-graphics/"
  },
  {
    "objectID": "Data Visualization with R.html#extra-gapminder-data-2",
    "href": "Data Visualization with R.html#extra-gapminder-data-2",
    "title": "Data Visualization with R",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(\"ggalt\")\nlibrary(\"tidyr\")\n \nlibrary(gapminder)\n\ndumbbell_df &lt;- gapminder %&gt;%\n  filter(year == 1967 | year == 2007) %&gt;%\n  select(country, year, lifeExp) %&gt;%\n  spread(year, lifeExp) %&gt;%\n  mutate(gap = `2007` - `1967`) %&gt;%\n  arrange(desc(gap)) %&gt;%\n  head(10)\n \n#Make plot\nggplot(dumbbell_df, aes(x = `1967`, xend = `2007`, y = reorder(country, gap), group = country)) + \n  geom_dumbbell(colour = \"#dddddd\",\n                size = 3,\n                colour_x = \"#FAAB18\",\n                colour_xend = \"#1380A1\") +\n  bbc_style() + \n  labs(title=\"We're living longer\",\n       subtitle=\"Biggest life expectancy rise, 1967-2007\")"
  },
  {
    "objectID": "Data Visualization with R.html#extra-gapminder-data-3",
    "href": "Data Visualization with R.html#extra-gapminder-data-3",
    "title": "Data Visualization with R",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ngapminder %&gt;% \n  filter(year==2007) %&gt;%\n  mutate(country=factor(country, levels=unique(country))) %&gt;%\n  arrange(desc(pop)) %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) +\n  geom_point(alpha=0.6, shape=21, color=\"black\")+\n  scale_size(range=c(.1, 24), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  theme_ipsum()+\n  theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent in 2007\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")"
  },
  {
    "objectID": "Data Visualization with R.html#extra-gapminder-data-4",
    "href": "Data Visualization with R.html#extra-gapminder-data-4",
    "title": "Data Visualization with R",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\n\nCode\nlibrary(gganimate)\n\ngapminder %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent, frame=year)) +\n  geom_point(alpha=0.6, shape=21, color=\"black\")+\n  scale_size(range=c(.1, 22), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  theme_ipsum()+\n  theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent in {frame_time}\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")+\n  geom_text(data=gapminder %&gt;%  filter(pop &gt;1e+8), aes(label=country), size=5, nudge_x=0.1, nudge_y=0.1)+\n  transition_time(year)+\n  enter_fade()+\n  exit_fade()\n\n\n\n\n\n\n\n\n\nCode\nanim_save(\"gapminder_gganimate.gif\")"
  },
  {
    "objectID": "Data Visualization with R.html#extra-gapminder-data-5",
    "href": "Data Visualization with R.html#extra-gapminder-data-5",
    "title": "Data Visualization with R",
    "section": "Extra: Gapminder data",
    "text": "Extra: Gapminder data\n\nsource\n\n\nCode\nlibrary(plotly)\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ng&lt;- crosstalk::SharedData$new(gapminder %&gt;% \n                              mutate(country=factor(country, levels=unique(country))) %&gt;%\n                              arrange(desc(pop)),\n                              ~ continent)\ngg&lt;- g %&gt;% \n  ggplot(aes(x=gdpPercap, y=lifeExp, fill=continent, frame=year)) +\n  geom_point(aes(size=pop, alpha=0.6, ids=country))+\n  scale_size(range=c(.1, 24), name=\"Population (M)\")+\n  scale_fill_viridis(discrete=TRUE, guide=FALSE, option=\"A\")+\n  scale_alpha(range=c(0.6, 1), guide=FALSE)+\n  theme_ipsum()+\n  # theme(legend.position=\"none\")+\n  labs(title=\"Life expectancy by continent between 1952-2007\",\n       x=\"GDP per capita\",\n       y=\"Life Expectancy\")\n\nggplotly(gg, height = 500, width = 800)"
  },
  {
    "objectID": "Data Visualization with R.html#references",
    "href": "Data Visualization with R.html#references",
    "title": "Data Visualization with R",
    "section": "References",
    "text": "References\n\n\nScott, James. 2021. “Data Science in r: A Gentle Introduction.” 2021. https://bookdown.org/jgscott/DSGI/.\n\n\nWickham, Hadley. 2016. Ggplot2 : Elegrant Graphics for Data Analysis. Second edition. Use r! Switzerland: Springer.\n\n\n———. 2019. Advanced r. Second edition. The r Series. Boca Raton, FL: CRC Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2023. R for Data Science : Import, Tidy, Transform, Visualize, and Model Data. Second edition. Beijing: O’Reilly."
  },
  {
    "objectID": "Data Wrangling with R.html",
    "href": "Data Wrangling with R.html",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The first step in any data analysis is to load the data into R\n\nthe data can be in a variety of formats\nthe most common formats are CSV, Excel, and SPSS\nthe readr package is part of the tidyverse and is used to read data into R\n\n\n\n\n\n\n\nCode\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n# check your working directory\ngetwd()\n\n## read data file\n\naddh&lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/addhealthfake.csv\")\n\n\n\n\n\n\nHere are some details about the dataset\n\nThe National Longitudinal Study of Adolescent to Adult Health (Add Health)\na longitudinal study of a nationally representative sample of adolescents in grades 7-12 in the United States during the 1994-95 school year (Wave I)\nThe Add Health cohort has been followed into young adulthood with four in-home interviews for Wave I-IV by 2008\n\nthe Wave V conducted during 2016-2018 included a mixed-mode survey\n\nrespondents’ social, economic, psychological, and physical well-being\n\nalong with contextual data on the family, neighborhood, community, school, friendships, peer groups, and romantic relationships\n\nstudy developmental trajectories of health and risk behaviors throughout the life course\n\n\n\n\n\n\nThe dataset used here is a subset of the Add Health dataset\n\n3000 observations and 11 variables\n\nAfter the dataset is loaded in R, it is important to explore the data to understand its structure and content\n\ncheck the data types of each variable\ncheck the dimensions of the data\nlook at a few rows and variables\n\n\n\n\nCode\nclass(addh$age)\n\n\n[1] \"numeric\"\n\n\nCode\nclass(addh$gender)\n\n\n[1] \"character\"\n\n\nCode\nclass(addh$love)\n\n\n[1] \"numeric\"\n\n\n\n\n\n\nFor more information on the dataset,\n\nsummary(): numeric summaries\nstr(): data types and sample data\ncolnames() or names(): names of columns/variables\ndim(): dimensions\nView(): view all data in RStudio viewer\nhead(): top 10 rows\ntail(): bottom 10 rows\n\n\n\n\n\n\n\nCode\nstr(addh)\n\n\nspc_tbl_ [3,000 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id           : num [1:3000] 1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num [1:3000] 18 22 18 26 27 21 19 27 18 25 ...\n $ gender       : chr [1:3000] \"female\" \"male\" \"female\" \"female\" ...\n $ income       : num [1:3000] 19252 11617 16189 18194 24484 ...\n $ logincome    : num [1:3000] 9.87 9.36 9.69 9.81 10.11 ...\n $ debt         : chr [1:3000] \"yesdebt\" \"nodebt\" \"yesdebt\" \"yesdebt\" ...\n $ love         : num [1:3000] 1 10 10 2 5 10 3 4 1 6 ...\n $ nocheating   : num [1:3000] 7 10 3 1 10 4 10 10 10 3 ...\n $ money        : num [1:3000] 9 3 5 3 9 9 9 7 3 8 ...\n $ paypercent   : num [1:3000] 46 56 42 82 93 42 89 55 43 53 ...\n $ logpaypercent: num [1:3000] 3.83 4.03 3.74 4.41 4.53 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_double(),\n  ..   age = col_double(),\n  ..   gender = col_character(),\n  ..   income = col_double(),\n  ..   logincome = col_double(),\n  ..   debt = col_character(),\n  ..   love = col_double(),\n  ..   nocheating = col_double(),\n  ..   money = col_double(),\n  ..   paypercent = col_double(),\n  ..   logpaypercent = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\nCode\nhead(addh, n=5)\n\n\n# A tibble: 5 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;\n\n\n\n\n(in dplyr) slice_sample(): randomly select n rows\n\n\n\n\n\n\nTo get information about one variable, use the following functions:\n\ntable(): get a table summarizing counts\nunique(): get the unique responses for a variable\nsort(): sort the numerically (or alphabetically)\nhist(): produce a histogram\n\n\n\n\nCode\n##| output-location: fragment\n\ntable(addh$gender)\n\n\n\nfemale   male \n  1503   1497 \n\n\n\n\nCode\n##| output-location: fragment\n\ntable(addh$age)\n\n\n\n 18  19  20  21  22  23  24  25  26  27 \n306 299 300 315 303 265 301 278 296 337 \n\n\n\n\nCode\n##| output-location: fragment\n\nsort(unique(addh$age))\n\n\n [1] 18 19 20 21 22 23 24 25 26 27\n\n\n\n\n\n\nuse the base R subsetting syntax with [row index, column index]\n\n\n\nCode\n##| output-location: fragment\n\n# get first column, rows 1 through 3 \naddh[1:3,1]\n\n\n# A tibble: 3 × 1\n     id\n  &lt;dbl&gt;\n1     1\n2     2\n3     3\n\n\n\nExercise: How would you subset the observation in the third row and the fifth column?\n\n\n\nCode\n##| output-location: fragment\n\n# get everything besides first row\naddh[-1, ]\n\n\n# A tibble: 2,999 × 11\n      id   age gender income logincome debt     love nocheating money paypercent\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1     2    22 male   11617.      9.36 nodebt     10         10     3         56\n 2     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n 3     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n 4     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n 5     6    21 female 22353.     10.0  nodebt     10          4     9         42\n 6     7    19 male   11842.      9.38 yesdebt     3         10     9         89\n 7     8    27 female 19874.      9.90 nodebt      4         10     7         55\n 8     9    18 male   27422.     10.2  nodebt      1         10     3         43\n 9    10    25 female  9968.      9.21 yesdebt     6          3     8         53\n10    11    24 female 26354.     10.2  nodebt     10         10    10         52\n# ℹ 2,989 more rows\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;\n\n\n\n\n\n\nSuppose that you want to know a few things from the dataset:\n\nWhat’s the median income of this sample? What’s the mean age?\nOn average, do the young adults surveyed think money, no cheating, or love is more important in a relationship?\nWhat are the answer choices for debt?\n\nhint: for simple calculations, you can use the base R functions mean(), median(), and table()\n\n\n\nCode\n##| output-location: fragment\n\nmedian(addh$income)\n\n\n[1] 15127.34\n\n\nCode\nmean(addh$age)\n\n\n[1] 22.51133\n\n\nCode\nunique(addh$debt)\n\n\n[1] \"yesdebt\" \"nodebt\" \n\n\n\n\nCode\n# as a precursor to the next section, we can use dplyr to do the same thing\n\nlibrary(dplyr)\nsummary(addh,\n        mean_money = mean(money),\n        mean_nocheating = mean(nocheating),\n        mean_love = mean(love))\n\n\n       id              age           gender              income     \n Min.   :   1.0   Min.   :18.00   Length:3000        Min.   : 1008  \n 1st Qu.: 750.8   1st Qu.:20.00   Class :character   1st Qu.: 9372  \n Median :1500.5   Median :22.00   Mode  :character   Median :15127  \n Mean   :1500.5   Mean   :22.51                      Mean   :15231  \n 3rd Qu.:2250.2   3rd Qu.:25.00                      3rd Qu.:20518  \n Max.   :3000.0   Max.   :27.00                      Max.   :41700  \n                                                                    \n   logincome          debt                love          nocheating    \n Min.   : 3.292   Length:3000        Min.   : 1.000   Min.   : 1.000  \n 1st Qu.: 9.222   Class :character   1st Qu.: 5.000   1st Qu.: 5.000  \n Median : 9.650   Mode  :character   Median :10.000   Median :10.000  \n Mean   : 9.482                      Mean   : 7.707   Mean   : 7.694  \n 3rd Qu.: 9.939                      3rd Qu.:10.000   3rd Qu.:10.000  \n Max.   :10.638                      Max.   :10.000   Max.   :10.000  \n NA's   :97                                                           \n     money          paypercent     logpaypercent  \n Min.   : 1.000   Min.   :  1.00   Min.   :0.000  \n 1st Qu.: 3.000   1st Qu.: 25.00   1st Qu.:3.219  \n Median : 6.000   Median : 51.00   Median :3.932  \n Mean   : 5.569   Mean   : 50.45   Mean   :3.629  \n 3rd Qu.: 8.000   3rd Qu.: 76.00   3rd Qu.:4.331  \n Max.   :10.000   Max.   :100.00   Max.   :4.605  \n                                                  \n\n\n\n\n\n\nThe dplyr package is part of the tidyverse and is used for data manipulation\ndplyr functions include:\n\nfilter(): subset rows\nselect(): subset columns\nmutate(): create new variables\nsummarise(): summarize data\narrange(): sort data\ngroup_by(): group data\n\nvery important function: pipe operator %&gt;% from the magrittr package\n\nallows you to chain functions together\n\nbasic structure of the dplyr functions\n\nfunction(dataframe, operation 1 to perform, opertaion 2 to perform,…)\n\n\n\n\n\n\n\n\nit can be used with operations, like\n\nstarts_with()\nends_with()\ncontains()\nmatches()\netc…\n\n\n\n\nCode\npay_variables &lt;- select(addh, contains(\"pay\"))\n\nhead(pay_variables, 5)\n\n\n# A tibble: 5 × 2\n  paypercent logpaypercent\n       &lt;dbl&gt;         &lt;dbl&gt;\n1         46          3.83\n2         56          4.03\n3         42          3.74\n4         82          4.41\n5         93          4.53\n\n\n\n\n\n\n\n\n\nfilter rows based on conditions\n\n\n\nCode\nnodebt_income &lt;- filter(addh, debt == \"nodebt\" & income &gt;= 10000)\n\nnrow(nodebt_income)\n\n\n[1] 1096\n\n\n\n\nCode\nnomissing_income &lt;- filter(addh, !is.na(income)) # only keep obs that are NOT (!) na\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr\n\nnrow(nomissing_income)\n\n\n[1] 3000\n\n\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr\n\n\n\n\n\n\n\n\nsort data based on one or more columns\ntask: find the two observations who think money is extremely important for a relationship (10 on money) but who pay for the fewest percentage of dates (paypercent)\n\n\n\nCode\naddh %&gt;%\n  filter(money == 10) %&gt;%\n  arrange(paypercent) %&gt;%\n  head(2)\n\n\n# A tibble: 2 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   811    22 male   34161.     10.4  yesdebt    10          9    10          2\n2  2086    20 male    4816.      8.48 yesdebt    10         10    10          2\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\ncreate new variables added to the dataset\ntask: add a variable with the average rating for nocheating, money, and love’s importance for a relationship (sum divided by 3) and another variable that logs that rating\n\n\n\nCode\naddh&lt;- mutate(addh,\n              rateavg=(love + money + nocheating)/3,\n              rateavglog=log(rateavg))\n\nhead(addh, 5)\n\n\n# A tibble: 5 × 13\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\nCaution\n\nusing the same column name or same object name, you overwrite the original object or column\n\n\n\n\n\n\n\n\n\ngroup data by one or more variables and then summarize the data according to the groups\ntask: find the average “not cheating importance” for different gender\n\n\n\nCode\naddh %&gt;% \n  group_by(gender) %&gt;% \n  summarize(mean_nocheating = mean(nocheating))\n\n\n# A tibble: 2 × 2\n  gender mean_nocheating\n  &lt;chr&gt;            &lt;dbl&gt;\n1 female            7.79\n2 male              7.60\n\n\n\nSummarise has a number of operations for creating summary statistics\n\nmean(), median(), min(), max(), sd(), n(), n_distinct(), first, last, etc…\n\n\n\n\n\n\n\nExercise one\n\nthe number of females and males by debt status\nthe percentage in each (debt x gender) category as a fraction of all observations\nthe number of distinct ratings of love’s importance in each of these debt x gender categories\n\n\n\n\nCode\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(percentage = n()/nrow(addh),\n            n_distinct_love = n_distinct(love))\n\n\n# A tibble: 4 × 4\n# Groups:   gender [2]\n  gender debt    percentage n_distinct_love\n  &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt;           &lt;int&gt;\n1 female nodebt       0.256              10\n2 female yesdebt      0.245              10\n3 male   nodebt       0.248              10\n4 male   yesdebt      0.251              10\n\n\n\n\n\n\nExercise two\n\n\nGroup the data by gender and debt status first\n\nFind the average rating of love, no cheating, and money’s importance for a relationship in each group\nArrange the groups by their rating of money’s importance to a relationship from the highest to rating to the lowest rating\n\n\n\n\nCode\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(mean_love = mean(love),\n            mean_nocheating = mean(nocheating),\n            mean_money = mean(money)) %&gt;%\n  arrange(desc(mean_money))\n\n\n# A tibble: 4 × 5\n# Groups:   gender [2]\n  gender debt    mean_love mean_nocheating mean_money\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;           &lt;dbl&gt;      &lt;dbl&gt;\n1 male   yesdebt      7.76            7.72       5.66\n2 female yesdebt      7.57            7.75       5.59\n3 female nodebt       7.82            7.83       5.54\n4 male   nodebt       7.68            7.47       5.49\n\n\n\n\n\n\nRecoding variables is a common task in data analysis for social science research\n\nconvert a variable from one format to another\ncreate a new variable based on the values of an existing variable (or of multiple existing variables)\n\nsome typical recoding tasks\n\nconvert a continuous variable to a categorical variable\nconvert a categorical variable to a continuous variable\ncreate categorical variables based on conditions\n\nOur focus\n\ndata types\nlogical statements\ncase_when() function\n\n\n\n\n\n\n\n\nuse the mutate() function to change the data type of a variable\n\nas.character()\nas.numeric()\nas.factor()\nas.integer()\nas.logical()\n\n\n\n\nCode\naddh2 &lt;- addh %&gt;% \n            mutate(\n               age = as.character(age),\n               debt = as.factor(debt)\n               )\n\nhead(addh2, 3)\n\n\n# A tibble: 3 × 13\n     id age   gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1 18    female 19252.      9.87 yesdebt     1          7     9         46\n2     2 22    male   11617.      9.36 nodebt     10         10     3         56\n3     3 18    female 16189.      9.69 yesdebt    10          3     5         42\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\nuse c to string together the elements\n\n\n\nCode\nagevec&lt;- c(18, 21, 23, 25, 27, 30)\n\nagevec\n\n\n[1] 18 21 23 25 27 30\n\n\n\n\nCode\nclass(agevec)\n\n\n[1] \"numeric\"\n\n\n\n\nCode\ngendervec &lt;- c(\"male\", \"female\", \"other\", \"female\", \"female\", \"male\")\ngendervec\n\n\n[1] \"male\"   \"female\" \"other\"  \"female\" \"female\" \"male\"  \n\n\n\n\nCode\nclass(gendervec)\n\n\n[1] \"character\"\n\n\n\n\n\n\n\n\n\nElements in a vector need to be of the same type, otherwise, type coercion happens\n\n\n\nCode\nc(28, \"28\", TRUE)\n\n\n[1] \"28\"   \"28\"   \"TRUE\"\n\n\n\n\nCode\nc(28, \"28\", TRUE) %&gt;% class()\n\n\n[1] \"character\"\n\n\n\n\nCode\nc(1,2,3, TRUE, FALSE)\n\n\n[1] 1 2 3 1 0\n\n\nCode\nc(1,2,3, TRUE, FALSE) %&gt;% class()\n\n\n[1] \"numeric\"\n\n\n\n\n\n\n\n\n\nconvert from one type to another using the following functions:\n\nas.numeric()\nas.character()\nas.factor()\n\n\n\n\nCode\nas.character(agevec)\n\n\n[1] \"18\" \"21\" \"23\" \"25\" \"27\" \"30\"\n\n\n\n\nCode\nas.numeric(gendervec)\n\n\n[1] NA NA NA NA NA NA\n\n\n\n\n\n\n\n\n\nVectors can have a factor type\n\nlooks like a character vector\nbut is actually a number under the hood (“labelled data”)\n\n\n\n\nCode\ngenderfactorvec&lt;- factor(gendervec,\n                         levels=c(\"male\", \"female\", \"other\"))\n\ngenderfactorvec\n\n\n[1] male   female other  female female male  \nLevels: male female other\n\n\n\n\nCode\nclass(genderfactorvec)\n\n\n[1] \"factor\"\n\n\n\n\nCode\nas.numeric(genderfactorvec)\n\n\n[1] 1 2 3 2 2 1\n\n\n\n\n\n\n\n\n\nthere are functions to help you create the vector more efficiently:\n\nrep: repeat the same thing multiple times\nseq: create a sequence of numbers\npaste: stick together character and numeric info\nsample: for vectors where we want to randomly sample from some larger pool\n\n\n\n\nCode\nrep(1, 5)\n\n\n[1] 1 1 1 1 1\n\n\n\n\nCode\nseq(from=1997, to=2024, by=5)\n\n\n[1] 1997 2002 2007 2012 2017 2022\n\n\n\n\nCode\npaste(\"age\", seq(from=22, to=30, by=1),\n      sep=\"_\")\n\n\n[1] \"age_22\" \"age_23\" \"age_24\" \"age_25\" \"age_26\" \"age_27\" \"age_28\" \"age_29\"\n[9] \"age_30\"\n\n\n\n\n\n\n\n\n\nOne way to create a dataframe\n\nuse bind_cols() to attach same-length vectors together as columns in a tibble\nVectors can be different types\n\n\n\n\nCode\nbind_cols(age=agevec, gender=gendervec)\n\n\n# A tibble: 6 × 2\n    age gender\n  &lt;dbl&gt; &lt;chr&gt; \n1    18 male  \n2    21 female\n3    23 other \n4    25 female\n5    27 female\n6    30 male  \n\n\n\n\n\n\n\n\nCode\naddh2&lt;- addh %&gt;% \n            mutate(gender=factor(gender,\n                                 levels=c(\"male\", \"female\")\n                                 )\n               )\n\nstr(addh2$gender)\n\n\n Factor w/ 2 levels \"male\",\"female\": 2 1 2 2 2 2 1 2 1 2 ...\n\n\nCode\nvec1&lt;- as.character(addh2$gender)\nvec2&lt;- as.numeric(addh2$gender)\n\n\n\nconvert the variable gender in addh to a factor variable\nwhat happens if you try to convert the variable to character by using as.character after the factor conversion\nwhat happens if you try to convert the variable to number by using as.numeric after the factor conversion\n\n\n\n\n\n\n\nA matrix is a two-dimensional array\n\nall elements must be of the same type\ncan be created using the matrix() function\ncan be created from a vector using the dim() function\n\n\n\n\nCode\nmatrix1&lt;- matrix(1:15, nrow=3, ncol=5)\n\nmatrix1\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    7   10   13\n[2,]    2    5    8   11   14\n[3,]    3    6    9   12   15\n\n\n\n\n\n\n\n\n\n\nCode\ndim(matrix1)\n\n\n[1] 3 5\n\n\n\n\nCode\ncolnames(matrix1)&lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrownames(matrix1)&lt;- c(\"X\", \"Y\", \"Z\")\n\nmatrix1\n\n\n  A B C  D  E\nX 1 4 7 10 13\nY 2 5 8 11 14\nZ 3 6 9 12 15\n\n\n\n\nCode\nmatrix1[2,3]\n\n\n[1] 8\n\n\n\n\nCode\nmatrix1[2,]\n\n\n A  B  C  D  E \n 2  5  8 11 14 \n\n\n\n\n\n\n\n\n\n\nCode\nA&lt;- matrix(1:6, nrow=2, ncol=3)\nB&lt;- matrix(7:12, nrow=3, ncol=2)\n\n\nprint(A %*% B)\n\n\n     [,1] [,2]\n[1,]   76  103\n[2,]  100  136\n\n\nCode\nprint(B %*% A)\n\n\n     [,1] [,2] [,3]\n[1,]   27   61   95\n[2,]   30   68  106\n[3,]   33   75  117\n\n\n\n\nCode\nprint(t(A))\n\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\n\n\n\n\n\n\n\n\n\nCode\nC&lt;- matrix(c(2,5,3,1,3,6,2,9,5), nrow=3, ncol=3)\nprint(solve(C))\n\n\n            [,1]       [,2]        [,3]\n[1,]  1.14705882 -0.2058824 -0.08823529\n[2,] -0.05882353 -0.1176471  0.23529412\n[3,] -0.61764706  0.2647059 -0.02941176\n\n\n\n\nCode\nprint(det(C))\n\n\n[1] -34\n\n\n\n\nCode\nprint(eigen(C))\n\n\neigen() decomposition\n$values\n[1] 12.502029 -3.320941  0.818912\n\n$vectors\n           [,1]        [,2]       [,3]\n[1,] -0.1946720 -0.07646107 -0.8799055\n[2,] -0.7265653 -0.79546586  0.1194865\n[3,] -0.6589428  0.60115536  0.4598796\n\n\n\n\n\n\n\n\n\nlet us start from discussing logical operators first\nthe main logical operators used in R are:\n\n\\(==\\) (equal to)\n\\(!=\\) (not equal to)\n\\(!\\) (not)\n\\(&lt;\\) (less than)\n\\(&lt;=\\) (less than or equal to)\n\\(&gt;\\) (greater than)\n\\(&gt;=\\) (greater than or equal to)\n\\(\\&\\) (and)\n\\(|\\) (or)\n\n\n\n\n\n\n\n\n\nlogical statements are used to filter data, create new variables, and recode variables\n\nifelse() function\n\n\n\n\nCode\naddh2&lt;- addh %&gt;% \n            mutate(\n               money_over_love = ifelse(money &gt; love, 1, 0),\n               .after = id\n               )\n\nhead(addh2, 5)\n\n\n# A tibble: 5 × 14\n     id money_over_love   age gender income logincome debt     love nocheating\n  &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n1     1               1    18 female 19252.      9.87 yesdebt     1          7\n2     2               0    22 male   11617.      9.36 nodebt     10         10\n3     3               0    18 female 16189.      9.69 yesdebt    10          3\n4     4               1    26 female 18194.      9.81 yesdebt     2          1\n5     5               1    27 female 24484.     10.1  yesdebt     5         10\n# ℹ 5 more variables: money &lt;dbl&gt;, paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;,\n#   rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\n\nCode\naddh3&lt;- addh %&gt;% \n            mutate(\n               money_or_love = ifelse(money==love, \"same\",\n                                      ifelse(love &gt; money, \"love greater\", \"money greater\")),\n               .after = id\n               )\n\nhead(addh3, 5)\n\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\nuse case_when() if there are 3 or more conditions for creating a variable\nits syntax is the following:\n\ncase_when(logical condition ~ value assigned, logical condition 2 ~ value assigned. . . .default = value if does not fit other logical conditions)\n\n\n\n\nCode\naddh3&lt;- addh %&gt;% \n  mutate(\n    money_or_love = case_when(\n      money==love ~ \"same\",\n      love &gt; money ~ \"love greater\",\n      TRUE ~ \"money greater\"\n    ),\n    .after = id\n  )\n\nhead(addh3, 5)\n\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;\n\n\n\n\n\n\n\ncreate a new variable called money_or_love in the addh dataset\n\nthe variable should have the following categories:\n\n“extreme” if person either codes love or money as 9 or 10\n“lovegreater” if love &gt; money\n“same” if love == money\n“moneygreater” if money &gt; love\nNA if none of the above\n\n\n\n\n\n\n\n\n\n\nCode\nincome_75&lt;- quantile(addh$income)[4]\n\naddh2&lt;- addh %&gt;% \n  mutate(high_income=ifelse(income &gt; income_75, 1, 0))\n\nincome_25 &lt;- quantile(addh$income)[2]\n\naddh2&lt;- addh2 %&gt;% \n  mutate(income_level=case_when(income &lt;= income_25 ~ \"low\",\n                                income &gt;=income_75 ~\"high\", \n                                .default=\"medium\"),\n         .after = id)\n\nhead(addh2, 5)\n\n\n# A tibble: 5 × 15\n     id income_level   age gender income logincome debt    love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 medium          18 female 19252.      9.87 yesde…     1          7     9\n2     2 medium          22 male   11617.      9.36 nodebt    10         10     3\n3     3 medium          18 female 16189.      9.69 yesde…    10          3     5\n4     4 medium          26 female 18194.      9.81 yesde…     2          1     3\n5     5 high            27 female 24484.     10.1  yesde…     5         10     9\n# ℹ 5 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;, high_income &lt;dbl&gt;\n\n\n\n\n\n\n\nLoops are used to repeat a block of code multiple times\n\nfor loop\nwhile loop\nrepeat loop\nbreak and next statements\n\nLoops are useful for:\n\nautomating repetitive tasks\niterating over elements in a list or vector\ncreating new variables or dataframes\nrunning simulations\n\n\n\n\nLoops can be slow in R\n\nuse vectorized functions whenever possible\nuse the apply family of functions\nuse the purrr package\n\n\n\n\n\n\n\nThe for loop is the most common type of loop in R\n\nit repeats a block of code a specified number of times\nit can go through every element of a vector\n\nsyntax: for (i in vector) {code to execute}\n\n\nit can iterate through a set number of elements in a vector\n\nsyntax: for (i in 1:length(vector)) {code to execute}\n\n\nThe for loop is useful for:\n\ncreating new variables\nrunning simulations\niterating over elements in a list or vector\nautomating repetitive tasks\n\n\n\n\nSteps to turn into a for loop:\n\nInitialize a vector to store results- this time it will store an entire vector of results rather than one result. Can either do: 1.1 Initialize a vector of a certain length: vec &lt;- vector(length = desired length) 1.2 Initialize an empty vector: vec &lt;- c()\nUse the for statement to tell the loop what to iterate through.\nCopy and paste the code from the single-observation case into the “meat” part of the for loop sandwich\nFor step three, make sure to add indexing where appropriate\n\n\n\n\n\n\n\n\nCode\nset.seed(123456)\n\nsample_means&lt;- numeric(length=1000)\n\nfor (i in seq_along(sample_means)) {\n  samp&lt;- sample(addh3$money, size = 800, replace=TRUE)\n  sample_means[i]&lt;- mean(samp)\n}\n\nmean(sample_means)\n\n\n[1] 5.57076\n\n\n\n\nCode\nlibrary(tidyverse)\n\nggplot(as.data.frame(sample_means), aes(sample_means)) +\n  #geom_histogram(bins=30)+\n  geom_density()+\n  geom_vline(xintercept = mean(sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means\",\n       y=\"Frequency\")+\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions are blocks of code that can be reused\n\nthey take input arguments\nthey return output\nthey can be used in loops, apply functions, and other functions\nthey can be used to create new variables, summarize data, and run simulations\n\nthe basic structure of a function is:\n\nfunction_name &lt;- function(input arguments) {code to execute}\nreturn(output)\n\nwe now touch upon some basics\n\n\n\nWhat problem is the function trying to solve?\nWhat are the function’s arguments in this case? (as a function’s inputs)\nWhat is the function doing with those arguments?\nWhat does the function return? What class is it? (check it using R)\n\n\n\n\n\n\nLet us start with a simple function, z-score of a variable\n\n. . .\n\n\nCode\nzscore&lt;- function(x) {\n  zscore&lt;- (x - mean(x))/sd(x)\n  return(zscore)\n}\n\nz_income&lt;- zscore(addh$income)\n\nhead(z_income, 10)\n\n\n [1]  0.5221372 -0.4693026  0.1243644  0.3847371  1.2013581  0.9246830\n [7] -0.4400798  0.6028251  1.5828892 -0.6833786\n\n\n. . .\n\nmore complicated example\n\n\n\nCode\nsample_means&lt;- function(data, n, reps) {\n  sample_means&lt;- numeric(length=reps)\n  \n  for (i in seq_along(sample_means)) {\n    samp&lt;- sample(data, size = n, replace=TRUE)\n    sample_means[i]&lt;- mean(samp)\n  }\n  \n  return(sample_means)\n}\n\n\n. . .\n\n\nCode\nage_sample_means&lt;- sample_means(addh$age, 500, 1000)\n\nggplot(as.data.frame(age_sample_means), aes(age_sample_means)) +\n  geom_density()+\n  geom_vline(xintercept = mean(age_sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means of Age\",\n       y=\"Frequency\")+\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\ncreate a function that incorporate both sample means functions and the density plot as above\nplot the distribution of sample means for the variable love in the addh dataset using the function\n\n\n\n\n\nLists are a way to store multiple objects in R\n\ncan store vectors, dataframes, and other lists\ncan store objects of different classes\n\n\n\n\nCode\nlist1&lt;- list(1, c(8,9,10,11,12), data.frame(x=1:10, y=11:20))\n\nlist1\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1]  8  9 10 11 12\n\n[[3]]\n    x  y\n1   1 11\n2   2 12\n3   3 13\n4   4 14\n5   5 15\n6   6 16\n7   7 17\n8   8 18\n9   9 19\n10 10 20\n\n\n\n\n\n\nThe syntax is map(mylist, myfunction, functionoptions) and can change depending on the type of output for your analysis\n\n\n\nCode\nlibrary(purrr)\n\nmap(list1, length)\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 5\n\n[[3]]\n[1] 2\n\n\n\n\nCode\nmap(list1, class)\n\n\n[[1]]\n[1] \"numeric\"\n\n[[2]]\n[1] \"numeric\"\n\n[[3]]\n[1] \"data.frame\"\n\n\n\n\nCode\nmap(list1, summary)\n\n\n[[1]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\n[[2]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      8       9      10      10      11      12 \n\n[[3]]\n       x               y        \n Min.   : 1.00   Min.   :11.00  \n 1st Qu.: 3.25   1st Qu.:13.25  \n Median : 5.50   Median :15.50  \n Mean   : 5.50   Mean   :15.50  \n 3rd Qu.: 7.75   3rd Qu.:17.75  \n Max.   :10.00   Max.   :20.00  \n\n\n\n\n\n\nThe tidy approach (Wickham (2014)) to data is a way to organize data in a consistent format\n\neach variable is a column\neach observation is a row\neach type of observational unit is a table\neach value is a cell\n\n\n\n\nFive common problems for messy data\n\nColumn headers are values, not variable names\nMultiple variables are stored in one column\nVariables are stored in both rows and columns\nMultiple types of observational units are stored in the same table\nA single observational unit is stored in multiple tables\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(tidyr)\n\nsleep_wide&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\"),\n                    day1=c(8, 7, 6),\n                    day2=c(6, 6, 5),\n                    day3=c(5, 4, 4))\n\nsleep_wide\n\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4\n\n\n\n\nCode\nsleep_long&lt;- sleep_wide %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"sleep_hours\")\n  \n\n\nsleep_long\n\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     day1            8\n2 KT     day2            6\n3 KT     day3            5\n4 Olivia day1            7\n5 Olivia day2            6\n6 Olivia day3            4\n7 Dean   day1            6\n8 Dean   day2            5\n9 Dean   day3            4\n\n\n\n\nCode\nlibrary(stringr)\n\nsleep_long %&gt;% \n  mutate(day=stringr::str_sub(day,-1, -1))\n\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     1               8\n2 KT     2               6\n3 KT     3               5\n4 Olivia 1               7\n5 Olivia 2               6\n6 Olivia 3               4\n7 Dean   1               6\n8 Dean   2               5\n9 Dean   3               4\n\n\n\n\nseparate(col = office_housing, into = c(“office”, “housing”), sep = “_“)\nsleep_united &lt;- sleep_pls_unite %&gt;% unite(col = “office”, building, floor, sep = ““)\n\n\n\n\n\n\n\n\n\nCode\nsleep_wide2&lt;- sleep_long %&gt;% \n  pivot_wider(names_from=day,\n              values_from=sleep_hours)\n\nsleep_wide2\n\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4\n\n\n\n\n\n\n. . .\n\n\nCode\nsleep_wide2&lt;- tibble(name=c(rep(\"KT\",2), rep(\"Olivia\",2), rep(\"Dean\",2)),\n                     activity=rep(c(\"sleep\", \"play\"),3),\n                     day1=c(8, 2, 7, 2, 5, 3),\n                     day2=c(6, 1, 1, 3, 6, 2),\n                     day3=c(5, 1, 4, 1, 4, 3))\n\nsleep_wide2\n\n\n# A tibble: 6 × 5\n  name   activity  day1  day2  day3\n  &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     sleep        8     6     5\n2 KT     play         2     1     1\n3 Olivia sleep        7     1     4\n4 Olivia play         2     3     1\n5 Dean   sleep        5     6     4\n6 Dean   play         3     2     3\n\n\n. . .\n\nhow to express the data in a tidy format?\n\ni.e. name, day, sleep, play as columns\n\n\n. . .\n\n\nCode\nsleep_tidy&lt;- sleep_wide2 %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"hours\") %&gt;% \n  mutate(day=stringr::str_sub(day, -1, -1)) %&gt;% \n  pivot_wider(names_from=activity,\n              values_from=hours)\n\nsleep_tidy\n\n\n# A tibble: 9 × 4\n  name   day   sleep  play\n  &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     1         8     2\n2 KT     2         6     1\n3 KT     3         5     1\n4 Olivia 1         7     2\n5 Olivia 2         1     3\n6 Olivia 3         4     1\n7 Dean   1         5     3\n8 Dean   2         6     2\n9 Dean   3         4     3\n\n\n\n\n\n\nThe last step in data analysis is to export the data\n\nsave the data in a format that can be shared with others\nsave the data in a format that can be read by other software\nsave the data in a format that can be used in other software\n\nExport command depends on the type of file you are trying to write to\n\nwrite.csv for CSV\nwrite.xslx for Excel\nwrite.dta for Stata file\netc\n\nBy default, the new file will be saved in current working directory\n\nIf you want to save it elsewhere, need to specify the path\n\n\n\n\nCode\nwrite_csv(sleep_tidy, \"sleep_tidy.csv\")\n\nlibrary(haven)\nwrite_dta(sleep_tidy, \"c:/Users/KT/Downloads/sleep_tidy.dta\")\n\n\n\n\n\n\nThe typical merge in R is left_join\n\nkeep all rows from “left” table even if observation doesn’t have matching row in “right” table\nthis will drop observations from the joining data when they are not matched to the “left” table\n\n\n\n\nCode\nsleep_tidy&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"May\", \"Mary\"),\n                     sleep=c(8, 7, 6, 5, 5),\n                     play=c(2, 2, 3, 3, 2))\n\nsleep_tidy2&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"Peter\", \"Susan\"),\n                      study=c(3, 4, 5, 2, 3),\n                      work=c(8, 10, 9, 6, 5))\n\nsleep_tidy3&lt;- left_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy3\n\n\n# A tibble: 5 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n\n\n\n\nCode\nsleep_tidy4&lt;- left_join(sleep_tidy2, sleep_tidy, by=\"name\")\n\nsleep_tidy4\n\n\n# A tibble: 5 × 5\n  name   study  work sleep  play\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         3     8     8     2\n2 Olivia     4    10     7     2\n3 Dean       5     9     6     3\n4 Peter      2     6    NA    NA\n5 Susan      3     5    NA    NA\n\n\n\n\n\n\ninner join Only keep rows of the first data.frame that have corresponding records in the second data.frame\n\n. . .\n\n\nCode\nsleep_tidy5&lt;- inner_join(sleep_tidy, sleep_tidy2, by=\"name\", suffix=c(\"_sleep\", \"_work\"))\n\nsleep_tidy5\n\n\n# A tibble: 3 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n\n\n. . .\n\nfull join Keep all rows from both dataframes, filling in missing values with NAs\n\n. . .\n\n\nCode\nsleep_tidy6&lt;- full_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy6\n\n\n# A tibble: 7 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n6 Peter     NA    NA     2     6\n7 Susan     NA    NA     3     5"
  },
  {
    "objectID": "Data Wrangling with R.html#loading-data",
    "href": "Data Wrangling with R.html#loading-data",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The first step in any data analysis is to load the data into R\n\nthe data can be in a variety of formats\nthe most common formats are CSV, Excel, and SPSS\nthe readr package is part of the tidyverse and is used to read data into R\n\n\n\n\n\n\n\nCode\n#install.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n# check your working directory\ngetwd()\n\n## read data file\n\naddh&lt;- read_csv(\"https://raw.githubusercontent.com/kwan-MSDA/Bootcamp_2024/main/dataset/addhealthfake.csv\")"
  },
  {
    "objectID": "Data Wrangling with R.html#add-health-dataset",
    "href": "Data Wrangling with R.html#add-health-dataset",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Here are some details about the dataset\n\nThe National Longitudinal Study of Adolescent to Adult Health (Add Health)\na longitudinal study of a nationally representative sample of adolescents in grades 7-12 in the United States during the 1994-95 school year (Wave I)\nThe Add Health cohort has been followed into young adulthood with four in-home interviews for Wave I-IV by 2008\n\nthe Wave V conducted during 2016-2018 included a mixed-mode survey\n\nrespondents’ social, economic, psychological, and physical well-being\n\nalong with contextual data on the family, neighborhood, community, school, friendships, peer groups, and romantic relationships\n\nstudy developmental trajectories of health and risk behaviors throughout the life course"
  },
  {
    "objectID": "Data Wrangling with R.html#explore-data",
    "href": "Data Wrangling with R.html#explore-data",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The dataset used here is a subset of the Add Health dataset\n\n3000 observations and 11 variables\n\nAfter the dataset is loaded in R, it is important to explore the data to understand its structure and content\n\ncheck the data types of each variable\ncheck the dimensions of the data\nlook at a few rows and variables\n\n\n\n\nCode\nclass(addh$age)\n\n\n[1] \"numeric\"\n\n\nCode\nclass(addh$gender)\n\n\n[1] \"character\"\n\n\nCode\nclass(addh$love)\n\n\n[1] \"numeric\""
  },
  {
    "objectID": "Data Wrangling with R.html#explore-data-1",
    "href": "Data Wrangling with R.html#explore-data-1",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "For more information on the dataset,\n\nsummary(): numeric summaries\nstr(): data types and sample data\ncolnames() or names(): names of columns/variables\ndim(): dimensions\nView(): view all data in RStudio viewer\nhead(): top 10 rows\ntail(): bottom 10 rows"
  },
  {
    "objectID": "Data Wrangling with R.html#explore-data-2",
    "href": "Data Wrangling with R.html#explore-data-2",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\nstr(addh)\n\n\nspc_tbl_ [3,000 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id           : num [1:3000] 1 2 3 4 5 6 7 8 9 10 ...\n $ age          : num [1:3000] 18 22 18 26 27 21 19 27 18 25 ...\n $ gender       : chr [1:3000] \"female\" \"male\" \"female\" \"female\" ...\n $ income       : num [1:3000] 19252 11617 16189 18194 24484 ...\n $ logincome    : num [1:3000] 9.87 9.36 9.69 9.81 10.11 ...\n $ debt         : chr [1:3000] \"yesdebt\" \"nodebt\" \"yesdebt\" \"yesdebt\" ...\n $ love         : num [1:3000] 1 10 10 2 5 10 3 4 1 6 ...\n $ nocheating   : num [1:3000] 7 10 3 1 10 4 10 10 10 3 ...\n $ money        : num [1:3000] 9 3 5 3 9 9 9 7 3 8 ...\n $ paypercent   : num [1:3000] 46 56 42 82 93 42 89 55 43 53 ...\n $ logpaypercent: num [1:3000] 3.83 4.03 3.74 4.41 4.53 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_double(),\n  ..   age = col_double(),\n  ..   gender = col_character(),\n  ..   income = col_double(),\n  ..   logincome = col_double(),\n  ..   debt = col_character(),\n  ..   love = col_double(),\n  ..   nocheating = col_double(),\n  ..   money = col_double(),\n  ..   paypercent = col_double(),\n  ..   logpaypercent = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\nCode\nhead(addh, n=5)\n\n\n# A tibble: 5 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;\n\n\n\n\n(in dplyr) slice_sample(): randomly select n rows"
  },
  {
    "objectID": "Data Wrangling with R.html#explore-data-3",
    "href": "Data Wrangling with R.html#explore-data-3",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "To get information about one variable, use the following functions:\n\ntable(): get a table summarizing counts\nunique(): get the unique responses for a variable\nsort(): sort the numerically (or alphabetically)\nhist(): produce a histogram\n\n\n\n\nCode\n##| output-location: fragment\n\ntable(addh$gender)\n\n\n\nfemale   male \n  1503   1497 \n\n\n\n\nCode\n##| output-location: fragment\n\ntable(addh$age)\n\n\n\n 18  19  20  21  22  23  24  25  26  27 \n306 299 300 315 303 265 301 278 296 337 \n\n\n\n\nCode\n##| output-location: fragment\n\nsort(unique(addh$age))\n\n\n [1] 18 19 20 21 22 23 24 25 26 27"
  },
  {
    "objectID": "Data Wrangling with R.html#subset-data",
    "href": "Data Wrangling with R.html#subset-data",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "use the base R subsetting syntax with [row index, column index]\n\n\n\nCode\n##| output-location: fragment\n\n# get first column, rows 1 through 3 \naddh[1:3,1]\n\n\n# A tibble: 3 × 1\n     id\n  &lt;dbl&gt;\n1     1\n2     2\n3     3\n\n\n\nExercise: How would you subset the observation in the third row and the fifth column?\n\n\n\nCode\n##| output-location: fragment\n\n# get everything besides first row\naddh[-1, ]\n\n\n# A tibble: 2,999 × 11\n      id   age gender income logincome debt     love nocheating money paypercent\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1     2    22 male   11617.      9.36 nodebt     10         10     3         56\n 2     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n 3     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n 4     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n 5     6    21 female 22353.     10.0  nodebt     10          4     9         42\n 6     7    19 male   11842.      9.38 yesdebt     3         10     9         89\n 7     8    27 female 19874.      9.90 nodebt      4         10     7         55\n 8     9    18 male   27422.     10.2  nodebt      1         10     3         43\n 9    10    25 female  9968.      9.21 yesdebt     6          3     8         53\n10    11    24 female 26354.     10.2  nodebt     10         10    10         52\n# ℹ 2,989 more rows\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;"
  },
  {
    "objectID": "Data Wrangling with R.html#exercises",
    "href": "Data Wrangling with R.html#exercises",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Suppose that you want to know a few things from the dataset:\n\nWhat’s the median income of this sample? What’s the mean age?\nOn average, do the young adults surveyed think money, no cheating, or love is more important in a relationship?\nWhat are the answer choices for debt?\n\nhint: for simple calculations, you can use the base R functions mean(), median(), and table()\n\n\n\nCode\n##| output-location: fragment\n\nmedian(addh$income)\n\n\n[1] 15127.34\n\n\nCode\nmean(addh$age)\n\n\n[1] 22.51133\n\n\nCode\nunique(addh$debt)\n\n\n[1] \"yesdebt\" \"nodebt\" \n\n\n\n\nCode\n# as a precursor to the next section, we can use dplyr to do the same thing\n\nlibrary(dplyr)\nsummary(addh,\n        mean_money = mean(money),\n        mean_nocheating = mean(nocheating),\n        mean_love = mean(love))\n\n\n       id              age           gender              income     \n Min.   :   1.0   Min.   :18.00   Length:3000        Min.   : 1008  \n 1st Qu.: 750.8   1st Qu.:20.00   Class :character   1st Qu.: 9372  \n Median :1500.5   Median :22.00   Mode  :character   Median :15127  \n Mean   :1500.5   Mean   :22.51                      Mean   :15231  \n 3rd Qu.:2250.2   3rd Qu.:25.00                      3rd Qu.:20518  \n Max.   :3000.0   Max.   :27.00                      Max.   :41700  \n                                                                    \n   logincome          debt                love          nocheating    \n Min.   : 3.292   Length:3000        Min.   : 1.000   Min.   : 1.000  \n 1st Qu.: 9.222   Class :character   1st Qu.: 5.000   1st Qu.: 5.000  \n Median : 9.650   Mode  :character   Median :10.000   Median :10.000  \n Mean   : 9.482                      Mean   : 7.707   Mean   : 7.694  \n 3rd Qu.: 9.939                      3rd Qu.:10.000   3rd Qu.:10.000  \n Max.   :10.638                      Max.   :10.000   Max.   :10.000  \n NA's   :97                                                           \n     money          paypercent     logpaypercent  \n Min.   : 1.000   Min.   :  1.00   Min.   :0.000  \n 1st Qu.: 3.000   1st Qu.: 25.00   1st Qu.:3.219  \n Median : 6.000   Median : 51.00   Median :3.932  \n Mean   : 5.569   Mean   : 50.45   Mean   :3.629  \n 3rd Qu.: 8.000   3rd Qu.: 76.00   3rd Qu.:4.331  \n Max.   :10.000   Max.   :100.00   Max.   :4.605"
  },
  {
    "objectID": "Data Wrangling with R.html#data-manipulation",
    "href": "Data Wrangling with R.html#data-manipulation",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The dplyr package is part of the tidyverse and is used for data manipulation\ndplyr functions include:\n\nfilter(): subset rows\nselect(): subset columns\nmutate(): create new variables\nsummarise(): summarize data\narrange(): sort data\ngroup_by(): group data\n\nvery important function: pipe operator %&gt;% from the magrittr package\n\nallows you to chain functions together\n\nbasic structure of the dplyr functions\n\nfunction(dataframe, operation 1 to perform, opertaion 2 to perform,…)"
  },
  {
    "objectID": "Data Wrangling with R.html#data-manipulation-1",
    "href": "Data Wrangling with R.html#data-manipulation-1",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "it can be used with operations, like\n\nstarts_with()\nends_with()\ncontains()\nmatches()\netc…\n\n\n\n\nCode\npay_variables &lt;- select(addh, contains(\"pay\"))\n\nhead(pay_variables, 5)\n\n\n# A tibble: 5 × 2\n  paypercent logpaypercent\n       &lt;dbl&gt;         &lt;dbl&gt;\n1         46          3.83\n2         56          4.03\n3         42          3.74\n4         82          4.41\n5         93          4.53"
  },
  {
    "objectID": "Data Wrangling with R.html#data-manipulation-2",
    "href": "Data Wrangling with R.html#data-manipulation-2",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "filter rows based on conditions\n\n\n\nCode\nnodebt_income &lt;- filter(addh, debt == \"nodebt\" & income &gt;= 10000)\n\nnrow(nodebt_income)\n\n\n[1] 1096\n\n\n\n\nCode\nnomissing_income &lt;- filter(addh, !is.na(income)) # only keep obs that are NOT (!) na\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr\n\nnrow(nomissing_income)\n\n\n[1] 3000\n\n\n\n#nomissing_income &lt;- drop_na(addh, income) # alternate function from tidyr"
  },
  {
    "objectID": "Data Wrangling with R.html#data-manipulation-3",
    "href": "Data Wrangling with R.html#data-manipulation-3",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "sort data based on one or more columns\ntask: find the two observations who think money is extremely important for a relationship (10 on money) but who pay for the fewest percentage of dates (paypercent)\n\n\n\nCode\naddh %&gt;%\n  filter(money == 10) %&gt;%\n  arrange(paypercent) %&gt;%\n  head(2)\n\n\n# A tibble: 2 × 11\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   811    22 male   34161.     10.4  yesdebt    10          9    10          2\n2  2086    20 male    4816.      8.48 yesdebt    10         10    10          2\n# ℹ 1 more variable: logpaypercent &lt;dbl&gt;"
  },
  {
    "objectID": "Data Wrangling with R.html#data-manipulation-4",
    "href": "Data Wrangling with R.html#data-manipulation-4",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "create new variables added to the dataset\ntask: add a variable with the average rating for nocheating, money, and love’s importance for a relationship (sum divided by 3) and another variable that logs that rating\n\n\n\nCode\naddh&lt;- mutate(addh,\n              rateavg=(love + money + nocheating)/3,\n              rateavglog=log(rateavg))\n\nhead(addh, 5)\n\n\n# A tibble: 5 × 13\n     id   age gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1    18 female 19252.      9.87 yesdebt     1          7     9         46\n2     2    22 male   11617.      9.36 nodebt     10         10     3         56\n3     3    18 female 16189.      9.69 yesdebt    10          3     5         42\n4     4    26 female 18194.      9.81 yesdebt     2          1     3         82\n5     5    27 female 24484.     10.1  yesdebt     5         10     9         93\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\nCaution\n\nusing the same column name or same object name, you overwrite the original object or column"
  },
  {
    "objectID": "Data Wrangling with R.html#data-manipulation-5",
    "href": "Data Wrangling with R.html#data-manipulation-5",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "group data by one or more variables and then summarize the data according to the groups\ntask: find the average “not cheating importance” for different gender\n\n\n\nCode\naddh %&gt;% \n  group_by(gender) %&gt;% \n  summarize(mean_nocheating = mean(nocheating))\n\n\n# A tibble: 2 × 2\n  gender mean_nocheating\n  &lt;chr&gt;            &lt;dbl&gt;\n1 female            7.79\n2 male              7.60\n\n\n\nSummarise has a number of operations for creating summary statistics\n\nmean(), median(), min(), max(), sd(), n(), n_distinct(), first, last, etc…"
  },
  {
    "objectID": "Data Wrangling with R.html#exercises-1",
    "href": "Data Wrangling with R.html#exercises-1",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Exercise one\n\nthe number of females and males by debt status\nthe percentage in each (debt x gender) category as a fraction of all observations\nthe number of distinct ratings of love’s importance in each of these debt x gender categories\n\n\n\n\nCode\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(percentage = n()/nrow(addh),\n            n_distinct_love = n_distinct(love))\n\n\n# A tibble: 4 × 4\n# Groups:   gender [2]\n  gender debt    percentage n_distinct_love\n  &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt;           &lt;int&gt;\n1 female nodebt       0.256              10\n2 female yesdebt      0.245              10\n3 male   nodebt       0.248              10\n4 male   yesdebt      0.251              10"
  },
  {
    "objectID": "Data Wrangling with R.html#exercises-2",
    "href": "Data Wrangling with R.html#exercises-2",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Exercise two\n\n\nGroup the data by gender and debt status first\n\nFind the average rating of love, no cheating, and money’s importance for a relationship in each group\nArrange the groups by their rating of money’s importance to a relationship from the highest to rating to the lowest rating\n\n\n\n\nCode\naddh %&gt;% \n  group_by(gender, debt) %&gt;%\n  summarize(mean_love = mean(love),\n            mean_nocheating = mean(nocheating),\n            mean_money = mean(money)) %&gt;%\n  arrange(desc(mean_money))\n\n\n# A tibble: 4 × 5\n# Groups:   gender [2]\n  gender debt    mean_love mean_nocheating mean_money\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;           &lt;dbl&gt;      &lt;dbl&gt;\n1 male   yesdebt      7.76            7.72       5.66\n2 female yesdebt      7.57            7.75       5.59\n3 female nodebt       7.82            7.83       5.54\n4 male   nodebt       7.68            7.47       5.49"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables",
    "href": "Data Wrangling with R.html#recoding-variables",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Recoding variables is a common task in data analysis for social science research\n\nconvert a variable from one format to another\ncreate a new variable based on the values of an existing variable (or of multiple existing variables)\n\nsome typical recoding tasks\n\nconvert a continuous variable to a categorical variable\nconvert a categorical variable to a continuous variable\ncreate categorical variables based on conditions\n\nOur focus\n\ndata types\nlogical statements\ncase_when() function"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-1",
    "href": "Data Wrangling with R.html#recoding-variables-1",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "use the mutate() function to change the data type of a variable\n\nas.character()\nas.numeric()\nas.factor()\nas.integer()\nas.logical()\n\n\n\n\nCode\naddh2 &lt;- addh %&gt;% \n            mutate(\n               age = as.character(age),\n               debt = as.factor(debt)\n               )\n\nhead(addh2, 3)\n\n\n# A tibble: 3 × 13\n     id age   gender income logincome debt     love nocheating money paypercent\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1 18    female 19252.      9.87 yesdebt     1          7     9         46\n2     2 22    male   11617.      9.36 nodebt     10         10     3         56\n3     3 18    female 16189.      9.69 yesdebt    10          3     5         42\n# ℹ 3 more variables: logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-2",
    "href": "Data Wrangling with R.html#recoding-variables-2",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "use c to string together the elements\n\n\n\nCode\nagevec&lt;- c(18, 21, 23, 25, 27, 30)\n\nagevec\n\n\n[1] 18 21 23 25 27 30\n\n\n\n\nCode\nclass(agevec)\n\n\n[1] \"numeric\"\n\n\n\n\nCode\ngendervec &lt;- c(\"male\", \"female\", \"other\", \"female\", \"female\", \"male\")\ngendervec\n\n\n[1] \"male\"   \"female\" \"other\"  \"female\" \"female\" \"male\"  \n\n\n\n\nCode\nclass(gendervec)\n\n\n[1] \"character\""
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-3",
    "href": "Data Wrangling with R.html#recoding-variables-3",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Elements in a vector need to be of the same type, otherwise, type coercion happens\n\n\n\nCode\nc(28, \"28\", TRUE)\n\n\n[1] \"28\"   \"28\"   \"TRUE\"\n\n\n\n\nCode\nc(28, \"28\", TRUE) %&gt;% class()\n\n\n[1] \"character\"\n\n\n\n\nCode\nc(1,2,3, TRUE, FALSE)\n\n\n[1] 1 2 3 1 0\n\n\nCode\nc(1,2,3, TRUE, FALSE) %&gt;% class()\n\n\n[1] \"numeric\""
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-4",
    "href": "Data Wrangling with R.html#recoding-variables-4",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "convert from one type to another using the following functions:\n\nas.numeric()\nas.character()\nas.factor()\n\n\n\n\nCode\nas.character(agevec)\n\n\n[1] \"18\" \"21\" \"23\" \"25\" \"27\" \"30\"\n\n\n\n\nCode\nas.numeric(gendervec)\n\n\n[1] NA NA NA NA NA NA"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-5",
    "href": "Data Wrangling with R.html#recoding-variables-5",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Vectors can have a factor type\n\nlooks like a character vector\nbut is actually a number under the hood (“labelled data”)\n\n\n\n\nCode\ngenderfactorvec&lt;- factor(gendervec,\n                         levels=c(\"male\", \"female\", \"other\"))\n\ngenderfactorvec\n\n\n[1] male   female other  female female male  \nLevels: male female other\n\n\n\n\nCode\nclass(genderfactorvec)\n\n\n[1] \"factor\"\n\n\n\n\nCode\nas.numeric(genderfactorvec)\n\n\n[1] 1 2 3 2 2 1"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-6",
    "href": "Data Wrangling with R.html#recoding-variables-6",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "there are functions to help you create the vector more efficiently:\n\nrep: repeat the same thing multiple times\nseq: create a sequence of numbers\npaste: stick together character and numeric info\nsample: for vectors where we want to randomly sample from some larger pool\n\n\n\n\nCode\nrep(1, 5)\n\n\n[1] 1 1 1 1 1\n\n\n\n\nCode\nseq(from=1997, to=2024, by=5)\n\n\n[1] 1997 2002 2007 2012 2017 2022\n\n\n\n\nCode\npaste(\"age\", seq(from=22, to=30, by=1),\n      sep=\"_\")\n\n\n[1] \"age_22\" \"age_23\" \"age_24\" \"age_25\" \"age_26\" \"age_27\" \"age_28\" \"age_29\"\n[9] \"age_30\""
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-7",
    "href": "Data Wrangling with R.html#recoding-variables-7",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "One way to create a dataframe\n\nuse bind_cols() to attach same-length vectors together as columns in a tibble\nVectors can be different types\n\n\n\n\nCode\nbind_cols(age=agevec, gender=gendervec)\n\n\n# A tibble: 6 × 2\n    age gender\n  &lt;dbl&gt; &lt;chr&gt; \n1    18 male  \n2    21 female\n3    23 other \n4    25 female\n5    27 female\n6    30 male"
  },
  {
    "objectID": "Data Wrangling with R.html#exercises-3",
    "href": "Data Wrangling with R.html#exercises-3",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\naddh2&lt;- addh %&gt;% \n            mutate(gender=factor(gender,\n                                 levels=c(\"male\", \"female\")\n                                 )\n               )\n\nstr(addh2$gender)\n\n\n Factor w/ 2 levels \"male\",\"female\": 2 1 2 2 2 2 1 2 1 2 ...\n\n\nCode\nvec1&lt;- as.character(addh2$gender)\nvec2&lt;- as.numeric(addh2$gender)\n\n\n\nconvert the variable gender in addh to a factor variable\nwhat happens if you try to convert the variable to character by using as.character after the factor conversion\nwhat happens if you try to convert the variable to number by using as.numeric after the factor conversion"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-8",
    "href": "Data Wrangling with R.html#recoding-variables-8",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "A matrix is a two-dimensional array\n\nall elements must be of the same type\ncan be created using the matrix() function\ncan be created from a vector using the dim() function\n\n\n\n\nCode\nmatrix1&lt;- matrix(1:15, nrow=3, ncol=5)\n\nmatrix1\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    7   10   13\n[2,]    2    5    8   11   14\n[3,]    3    6    9   12   15"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-9",
    "href": "Data Wrangling with R.html#recoding-variables-9",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\ndim(matrix1)\n\n\n[1] 3 5\n\n\n\n\nCode\ncolnames(matrix1)&lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrownames(matrix1)&lt;- c(\"X\", \"Y\", \"Z\")\n\nmatrix1\n\n\n  A B C  D  E\nX 1 4 7 10 13\nY 2 5 8 11 14\nZ 3 6 9 12 15\n\n\n\n\nCode\nmatrix1[2,3]\n\n\n[1] 8\n\n\n\n\nCode\nmatrix1[2,]\n\n\n A  B  C  D  E \n 2  5  8 11 14"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-10",
    "href": "Data Wrangling with R.html#recoding-variables-10",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\nA&lt;- matrix(1:6, nrow=2, ncol=3)\nB&lt;- matrix(7:12, nrow=3, ncol=2)\n\n\nprint(A %*% B)\n\n\n     [,1] [,2]\n[1,]   76  103\n[2,]  100  136\n\n\nCode\nprint(B %*% A)\n\n\n     [,1] [,2] [,3]\n[1,]   27   61   95\n[2,]   30   68  106\n[3,]   33   75  117\n\n\n\n\nCode\nprint(t(A))\n\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-11",
    "href": "Data Wrangling with R.html#recoding-variables-11",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\nC&lt;- matrix(c(2,5,3,1,3,6,2,9,5), nrow=3, ncol=3)\nprint(solve(C))\n\n\n            [,1]       [,2]        [,3]\n[1,]  1.14705882 -0.2058824 -0.08823529\n[2,] -0.05882353 -0.1176471  0.23529412\n[3,] -0.61764706  0.2647059 -0.02941176\n\n\n\n\nCode\nprint(det(C))\n\n\n[1] -34\n\n\n\n\nCode\nprint(eigen(C))\n\n\neigen() decomposition\n$values\n[1] 12.502029 -3.320941  0.818912\n\n$vectors\n           [,1]        [,2]       [,3]\n[1,] -0.1946720 -0.07646107 -0.8799055\n[2,] -0.7265653 -0.79546586  0.1194865\n[3,] -0.6589428  0.60115536  0.4598796"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-12",
    "href": "Data Wrangling with R.html#recoding-variables-12",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "let us start from discussing logical operators first\nthe main logical operators used in R are:\n\n\\(==\\) (equal to)\n\\(!=\\) (not equal to)\n\\(!\\) (not)\n\\(&lt;\\) (less than)\n\\(&lt;=\\) (less than or equal to)\n\\(&gt;\\) (greater than)\n\\(&gt;=\\) (greater than or equal to)\n\\(\\&\\) (and)\n\\(|\\) (or)"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-13",
    "href": "Data Wrangling with R.html#recoding-variables-13",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "logical statements are used to filter data, create new variables, and recode variables\n\nifelse() function\n\n\n\n\nCode\naddh2&lt;- addh %&gt;% \n            mutate(\n               money_over_love = ifelse(money &gt; love, 1, 0),\n               .after = id\n               )\n\nhead(addh2, 5)\n\n\n# A tibble: 5 × 14\n     id money_over_love   age gender income logincome debt     love nocheating\n  &lt;dbl&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n1     1               1    18 female 19252.      9.87 yesdebt     1          7\n2     2               0    22 male   11617.      9.36 nodebt     10         10\n3     3               0    18 female 16189.      9.69 yesdebt    10          3\n4     4               1    26 female 18194.      9.81 yesdebt     2          1\n5     5               1    27 female 24484.     10.1  yesdebt     5         10\n# ℹ 5 more variables: money &lt;dbl&gt;, paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;,\n#   rateavg &lt;dbl&gt;, rateavglog &lt;dbl&gt;\n\n\n\n\nCode\naddh3&lt;- addh %&gt;% \n            mutate(\n               money_or_love = ifelse(money==love, \"same\",\n                                      ifelse(love &gt; money, \"love greater\", \"money greater\")),\n               .after = id\n               )\n\nhead(addh3, 5)\n\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-14",
    "href": "Data Wrangling with R.html#recoding-variables-14",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "use case_when() if there are 3 or more conditions for creating a variable\nits syntax is the following:\n\ncase_when(logical condition ~ value assigned, logical condition 2 ~ value assigned. . . .default = value if does not fit other logical conditions)\n\n\n\n\nCode\naddh3&lt;- addh %&gt;% \n  mutate(\n    money_or_love = case_when(\n      money==love ~ \"same\",\n      love &gt; money ~ \"love greater\",\n      TRUE ~ \"money greater\"\n    ),\n    .after = id\n  )\n\nhead(addh3, 5)\n\n\n# A tibble: 5 × 14\n     id money_or_love   age gender income logincome debt   love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 money greater    18 female 19252.      9.87 yesd…     1          7     9\n2     2 love greater     22 male   11617.      9.36 node…    10         10     3\n3     3 love greater     18 female 16189.      9.69 yesd…    10          3     5\n4     4 money greater    26 female 18194.      9.81 yesd…     2          1     3\n5     5 money greater    27 female 24484.     10.1  yesd…     5         10     9\n# ℹ 4 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;"
  },
  {
    "objectID": "Data Wrangling with R.html#exercises-4",
    "href": "Data Wrangling with R.html#exercises-4",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "create a new variable called money_or_love in the addh dataset\n\nthe variable should have the following categories:\n\n“extreme” if person either codes love or money as 9 or 10\n“lovegreater” if love &gt; money\n“same” if love == money\n“moneygreater” if money &gt; love\nNA if none of the above"
  },
  {
    "objectID": "Data Wrangling with R.html#recoding-variables-15",
    "href": "Data Wrangling with R.html#recoding-variables-15",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\nincome_75&lt;- quantile(addh$income)[4]\n\naddh2&lt;- addh %&gt;% \n  mutate(high_income=ifelse(income &gt; income_75, 1, 0))\n\nincome_25 &lt;- quantile(addh$income)[2]\n\naddh2&lt;- addh2 %&gt;% \n  mutate(income_level=case_when(income &lt;= income_25 ~ \"low\",\n                                income &gt;=income_75 ~\"high\", \n                                .default=\"medium\"),\n         .after = id)\n\nhead(addh2, 5)\n\n\n# A tibble: 5 × 15\n     id income_level   age gender income logincome debt    love nocheating money\n  &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 medium          18 female 19252.      9.87 yesde…     1          7     9\n2     2 medium          22 male   11617.      9.36 nodebt    10         10     3\n3     3 medium          18 female 16189.      9.69 yesde…    10          3     5\n4     4 medium          26 female 18194.      9.81 yesde…     2          1     3\n5     5 high            27 female 24484.     10.1  yesde…     5         10     9\n# ℹ 5 more variables: paypercent &lt;dbl&gt;, logpaypercent &lt;dbl&gt;, rateavg &lt;dbl&gt;,\n#   rateavglog &lt;dbl&gt;, high_income &lt;dbl&gt;"
  },
  {
    "objectID": "Data Wrangling with R.html#looping",
    "href": "Data Wrangling with R.html#looping",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Loops are used to repeat a block of code multiple times\n\nfor loop\nwhile loop\nrepeat loop\nbreak and next statements\n\nLoops are useful for:\n\nautomating repetitive tasks\niterating over elements in a list or vector\ncreating new variables or dataframes\nrunning simulations\n\n\n\n\nLoops can be slow in R\n\nuse vectorized functions whenever possible\nuse the apply family of functions\nuse the purrr package"
  },
  {
    "objectID": "Data Wrangling with R.html#for-loops",
    "href": "Data Wrangling with R.html#for-loops",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The for loop is the most common type of loop in R\n\nit repeats a block of code a specified number of times\nit can go through every element of a vector\n\nsyntax: for (i in vector) {code to execute}\n\n\nit can iterate through a set number of elements in a vector\n\nsyntax: for (i in 1:length(vector)) {code to execute}\n\n\nThe for loop is useful for:\n\ncreating new variables\nrunning simulations\niterating over elements in a list or vector\nautomating repetitive tasks\n\n\n\n\nSteps to turn into a for loop:\n\nInitialize a vector to store results- this time it will store an entire vector of results rather than one result. Can either do: 1.1 Initialize a vector of a certain length: vec &lt;- vector(length = desired length) 1.2 Initialize an empty vector: vec &lt;- c()\nUse the for statement to tell the loop what to iterate through.\nCopy and paste the code from the single-observation case into the “meat” part of the for loop sandwich\nFor step three, make sure to add indexing where appropriate"
  },
  {
    "objectID": "Data Wrangling with R.html#for-loops-sample-means",
    "href": "Data Wrangling with R.html#for-loops-sample-means",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\nset.seed(123456)\n\nsample_means&lt;- numeric(length=1000)\n\nfor (i in seq_along(sample_means)) {\n  samp&lt;- sample(addh3$money, size = 800, replace=TRUE)\n  sample_means[i]&lt;- mean(samp)\n}\n\nmean(sample_means)\n\n\n[1] 5.57076\n\n\n\n\nCode\nlibrary(tidyverse)\n\nggplot(as.data.frame(sample_means), aes(sample_means)) +\n  #geom_histogram(bins=30)+\n  geom_density()+\n  geom_vline(xintercept = mean(sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means\",\n       y=\"Frequency\")+\n  theme_minimal()"
  },
  {
    "objectID": "Data Wrangling with R.html#write-a-function",
    "href": "Data Wrangling with R.html#write-a-function",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Functions are blocks of code that can be reused\n\nthey take input arguments\nthey return output\nthey can be used in loops, apply functions, and other functions\nthey can be used to create new variables, summarize data, and run simulations\n\nthe basic structure of a function is:\n\nfunction_name &lt;- function(input arguments) {code to execute}\nreturn(output)\n\nwe now touch upon some basics\n\n\n\nWhat problem is the function trying to solve?\nWhat are the function’s arguments in this case? (as a function’s inputs)\nWhat is the function doing with those arguments?\nWhat does the function return? What class is it? (check it using R)"
  },
  {
    "objectID": "Data Wrangling with R.html#functions---basics",
    "href": "Data Wrangling with R.html#functions---basics",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Let us start with a simple function, z-score of a variable\n\n. . .\n\n\nCode\nzscore&lt;- function(x) {\n  zscore&lt;- (x - mean(x))/sd(x)\n  return(zscore)\n}\n\nz_income&lt;- zscore(addh$income)\n\nhead(z_income, 10)\n\n\n [1]  0.5221372 -0.4693026  0.1243644  0.3847371  1.2013581  0.9246830\n [7] -0.4400798  0.6028251  1.5828892 -0.6833786\n\n\n. . .\n\nmore complicated example\n\n\n\nCode\nsample_means&lt;- function(data, n, reps) {\n  sample_means&lt;- numeric(length=reps)\n  \n  for (i in seq_along(sample_means)) {\n    samp&lt;- sample(data, size = n, replace=TRUE)\n    sample_means[i]&lt;- mean(samp)\n  }\n  \n  return(sample_means)\n}\n\n\n. . .\n\n\nCode\nage_sample_means&lt;- sample_means(addh$age, 500, 1000)\n\nggplot(as.data.frame(age_sample_means), aes(age_sample_means)) +\n  geom_density()+\n  geom_vline(xintercept = mean(age_sample_means),\n             color=\"red\", linetype=\"dashed\") +\n  labs(title=\"Distribution of Sample Means\",\n       x=\"Sample Means of Age\",\n       y=\"Frequency\")+\n  theme_bw()"
  },
  {
    "objectID": "Data Wrangling with R.html#exercises-5",
    "href": "Data Wrangling with R.html#exercises-5",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "create a function that incorporate both sample means functions and the density plot as above\nplot the distribution of sample means for the variable love in the addh dataset using the function"
  },
  {
    "objectID": "Data Wrangling with R.html#lists-and-map-functions-from-purrr-library",
    "href": "Data Wrangling with R.html#lists-and-map-functions-from-purrr-library",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Lists are a way to store multiple objects in R\n\ncan store vectors, dataframes, and other lists\ncan store objects of different classes\n\n\n\n\nCode\nlist1&lt;- list(1, c(8,9,10,11,12), data.frame(x=1:10, y=11:20))\n\nlist1\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1]  8  9 10 11 12\n\n[[3]]\n    x  y\n1   1 11\n2   2 12\n3   3 13\n4   4 14\n5   5 15\n6   6 16\n7   7 17\n8   8 18\n9   9 19\n10 10 20"
  },
  {
    "objectID": "Data Wrangling with R.html#lists-and-map-functions-from-purrr-library-1",
    "href": "Data Wrangling with R.html#lists-and-map-functions-from-purrr-library-1",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The syntax is map(mylist, myfunction, functionoptions) and can change depending on the type of output for your analysis\n\n\n\nCode\nlibrary(purrr)\n\nmap(list1, length)\n\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] 5\n\n[[3]]\n[1] 2\n\n\n\n\nCode\nmap(list1, class)\n\n\n[[1]]\n[1] \"numeric\"\n\n[[2]]\n[1] \"numeric\"\n\n[[3]]\n[1] \"data.frame\"\n\n\n\n\nCode\nmap(list1, summary)\n\n\n[[1]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\n[[2]]\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      8       9      10      10      11      12 \n\n[[3]]\n       x               y        \n Min.   : 1.00   Min.   :11.00  \n 1st Qu.: 3.25   1st Qu.:13.25  \n Median : 5.50   Median :15.50  \n Mean   : 5.50   Mean   :15.50  \n 3rd Qu.: 7.75   3rd Qu.:17.75  \n Max.   :10.00   Max.   :20.00"
  },
  {
    "objectID": "Data Wrangling with R.html#tidy-approach-to-data",
    "href": "Data Wrangling with R.html#tidy-approach-to-data",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The tidy approach (Wickham (2014)) to data is a way to organize data in a consistent format\n\neach variable is a column\neach observation is a row\neach type of observational unit is a table\neach value is a cell\n\n\n\n\nFive common problems for messy data\n\nColumn headers are values, not variable names\nMultiple variables are stored in one column\nVariables are stored in both rows and columns\nMultiple types of observational units are stored in the same table\nA single observational unit is stored in multiple tables"
  },
  {
    "objectID": "Data Wrangling with R.html#let-us-start-from-a-real-example",
    "href": "Data Wrangling with R.html#let-us-start-from-a-real-example",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\nlibrary(tidyr)\n\nsleep_wide&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\"),\n                    day1=c(8, 7, 6),\n                    day2=c(6, 6, 5),\n                    day3=c(5, 4, 4))\n\nsleep_wide\n\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4\n\n\n\n\nCode\nsleep_long&lt;- sleep_wide %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"sleep_hours\")\n  \n\n\nsleep_long\n\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     day1            8\n2 KT     day2            6\n3 KT     day3            5\n4 Olivia day1            7\n5 Olivia day2            6\n6 Olivia day3            4\n7 Dean   day1            6\n8 Dean   day2            5\n9 Dean   day3            4\n\n\n\n\nCode\nlibrary(stringr)\n\nsleep_long %&gt;% \n  mutate(day=stringr::str_sub(day,-1, -1))\n\n\n# A tibble: 9 × 3\n  name   day   sleep_hours\n  &lt;chr&gt;  &lt;chr&gt;       &lt;dbl&gt;\n1 KT     1               8\n2 KT     2               6\n3 KT     3               5\n4 Olivia 1               7\n5 Olivia 2               6\n6 Olivia 3               4\n7 Dean   1               6\n8 Dean   2               5\n9 Dean   3               4\n\n\n\n\nseparate(col = office_housing, into = c(“office”, “housing”), sep = “_“)\nsleep_united &lt;- sleep_pls_unite %&gt;% unite(col = “office”, building, floor, sep = ““)"
  },
  {
    "objectID": "Data Wrangling with R.html#reshape-the-data-1",
    "href": "Data Wrangling with R.html#reshape-the-data-1",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "Code\nsleep_wide2&lt;- sleep_long %&gt;% \n  pivot_wider(names_from=day,\n              values_from=sleep_hours)\n\nsleep_wide2\n\n\n# A tibble: 3 × 4\n  name    day1  day2  day3\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     6     5\n2 Olivia     7     6     4\n3 Dean       6     5     4"
  },
  {
    "objectID": "Data Wrangling with R.html#execises",
    "href": "Data Wrangling with R.html#execises",
    "title": "Data Wrangling with R",
    "section": "",
    "text": ". . .\n\n\nCode\nsleep_wide2&lt;- tibble(name=c(rep(\"KT\",2), rep(\"Olivia\",2), rep(\"Dean\",2)),\n                     activity=rep(c(\"sleep\", \"play\"),3),\n                     day1=c(8, 2, 7, 2, 5, 3),\n                     day2=c(6, 1, 1, 3, 6, 2),\n                     day3=c(5, 1, 4, 1, 4, 3))\n\nsleep_wide2\n\n\n# A tibble: 6 × 5\n  name   activity  day1  day2  day3\n  &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     sleep        8     6     5\n2 KT     play         2     1     1\n3 Olivia sleep        7     1     4\n4 Olivia play         2     3     1\n5 Dean   sleep        5     6     4\n6 Dean   play         3     2     3\n\n\n. . .\n\nhow to express the data in a tidy format?\n\ni.e. name, day, sleep, play as columns\n\n\n. . .\n\n\nCode\nsleep_tidy&lt;- sleep_wide2 %&gt;% \n  pivot_longer(cols=day1:day3,\n               names_to=\"day\",\n               values_to=\"hours\") %&gt;% \n  mutate(day=stringr::str_sub(day, -1, -1)) %&gt;% \n  pivot_wider(names_from=activity,\n              values_from=hours)\n\nsleep_tidy\n\n\n# A tibble: 9 × 4\n  name   day   sleep  play\n  &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT     1         8     2\n2 KT     2         6     1\n3 KT     3         5     1\n4 Olivia 1         7     2\n5 Olivia 2         1     3\n6 Olivia 3         4     1\n7 Dean   1         5     3\n8 Dean   2         6     2\n9 Dean   3         4     3"
  },
  {
    "objectID": "Data Wrangling with R.html#export-data",
    "href": "Data Wrangling with R.html#export-data",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The last step in data analysis is to export the data\n\nsave the data in a format that can be shared with others\nsave the data in a format that can be read by other software\nsave the data in a format that can be used in other software\n\nExport command depends on the type of file you are trying to write to\n\nwrite.csv for CSV\nwrite.xslx for Excel\nwrite.dta for Stata file\netc\n\nBy default, the new file will be saved in current working directory\n\nIf you want to save it elsewhere, need to specify the path\n\n\n\n\nCode\nwrite_csv(sleep_tidy, \"sleep_tidy.csv\")\n\nlibrary(haven)\nwrite_dta(sleep_tidy, \"c:/Users/KT/Downloads/sleep_tidy.dta\")"
  },
  {
    "objectID": "Data Wrangling with R.html#basic-merge",
    "href": "Data Wrangling with R.html#basic-merge",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "The typical merge in R is left_join\n\nkeep all rows from “left” table even if observation doesn’t have matching row in “right” table\nthis will drop observations from the joining data when they are not matched to the “left” table\n\n\n\n\nCode\nsleep_tidy&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"May\", \"Mary\"),\n                     sleep=c(8, 7, 6, 5, 5),\n                     play=c(2, 2, 3, 3, 2))\n\nsleep_tidy2&lt;- tibble(name=c(\"KT\", \"Olivia\", \"Dean\", \"Peter\", \"Susan\"),\n                      study=c(3, 4, 5, 2, 3),\n                      work=c(8, 10, 9, 6, 5))\n\nsleep_tidy3&lt;- left_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy3\n\n\n# A tibble: 5 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n\n\n\n\nCode\nsleep_tidy4&lt;- left_join(sleep_tidy2, sleep_tidy, by=\"name\")\n\nsleep_tidy4\n\n\n# A tibble: 5 × 5\n  name   study  work sleep  play\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         3     8     8     2\n2 Olivia     4    10     7     2\n3 Dean       5     9     6     3\n4 Peter      2     6    NA    NA\n5 Susan      3     5    NA    NA"
  },
  {
    "objectID": "Data Wrangling with R.html#merge-data",
    "href": "Data Wrangling with R.html#merge-data",
    "title": "Data Wrangling with R",
    "section": "",
    "text": "inner join Only keep rows of the first data.frame that have corresponding records in the second data.frame\n\n. . .\n\n\nCode\nsleep_tidy5&lt;- inner_join(sleep_tidy, sleep_tidy2, by=\"name\", suffix=c(\"_sleep\", \"_work\"))\n\nsleep_tidy5\n\n\n# A tibble: 3 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n\n\n. . .\n\nfull join Keep all rows from both dataframes, filling in missing values with NAs\n\n. . .\n\n\nCode\nsleep_tidy6&lt;- full_join(sleep_tidy, sleep_tidy2, by=\"name\")\n\nsleep_tidy6\n\n\n# A tibble: 7 × 5\n  name   sleep  play study  work\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 KT         8     2     3     8\n2 Olivia     7     2     4    10\n3 Dean       6     3     5     9\n4 May        5     3    NA    NA\n5 Mary       5     2    NA    NA\n6 Peter     NA    NA     2     6\n7 Susan     NA    NA     3     5"
  },
  {
    "objectID": "MSDA-Bootcamp/index.html",
    "href": "MSDA-Bootcamp/index.html",
    "title": "MSDA_Bootcamp",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n\n[1] 2"
  },
  {
    "objectID": "R_introduction_v3.html#introduction",
    "href": "R_introduction_v3.html#introduction",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nR is a programming language and software environment for statistical computing and graphics\n\nwidely used in academia and industry\nfor data analysis, statistical modeling, and visualization\nfor machine learning, data mining, and big data analysis\nfor reproducible research and scientific computing\n\nR is an implementation of the S programming language\n\nS was developed at Bell Laboratories by John Chambers and colleagues\nS was designed for data analysis and graphics\nS was the precursor to the commercial statistical software package S-PLUS"
  },
  {
    "objectID": "R_introduction_v3.html#introduction-1",
    "href": "R_introduction_v3.html#introduction-1",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nR was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand\n\nnamed partly after the first names of the first two R authors and partly as a play on the name of S\na GNU project, a free software movement initiated by Richard Stallman in 1983\nfreely available under the GNU General Public License\na large number of packages available"
  },
  {
    "objectID": "R_introduction_v3.html#introduction-2",
    "href": "R_introduction_v3.html#introduction-2",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\ntidyverse is a collection of R packages designed for data science\n\ntidyverse packages share an underlying design philosophy, grammar, and data structures\ntidyverse packages are designed to work together\n\nfocus on the tidyverse\n\nmainly because it is easier to understand\ndo most data manipulation we need in social science research with these tools\n\nA good reference for tidyverse is the book by Wickham (2019)\n\nR for Data Science"
  },
  {
    "objectID": "R_introduction_v3.html#introduction-3",
    "href": "R_introduction_v3.html#introduction-3",
    "title": "R - An Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nfor quick reference, visit Posit Primers on Data Science\n\nR Basics\nTransform Tables\nVisualize Data\n\nfor more specific topics, visit Data Science\n\nData Wrangling\nData Visualization\nModelling\n\nwe use cover some base R functions first, then move on to the tidyverse"
  },
  {
    "objectID": "R_introduction_v3.html#basic-arithmetic",
    "href": "R_introduction_v3.html#basic-arithmetic",
    "title": "R - An Introduction",
    "section": "Basic Arithmetic",
    "text": "Basic Arithmetic\n\nR can be regarded as a calculator\n\nit recognizes all of the standard arithmetic operators\n\n\n\n\n\nCode\n# Basic arithmetic operations in R\n\n1+2 \n\n6-7 \n\n5/2 \n\n2^3\n\n2+5*2^3\n\n3*(4+5) \n\n(3+4)*5\n\nsqrt(4)\n\n\n\nmodulo operators (integer division & remainder)\n\n\n\n\n\nCode\n# Modulo operators in R\n\n5 %/% 2  # integer division\n5 %% 2   # remainder\n\n100 %/% 60 ## How many whole hours in 100 minutes?\n\n100 %% 60 ## How many minutes are left over?\n\n\n\n\nIn RStudio, you can start a new script using the dropdown menu File &gt; New File &gt; R Script\nuse your R script to save finalized commands\n\ntype in the console to practice and debug, then use the script to save what worked\n\nR scripts allow you to save comments, or annotations, to your code\n\nanything following the # symbol in a script will not be treated like an R command—essentially, R will skip over it"
  },
  {
    "objectID": "R_introduction_v3.html#logic",
    "href": "R_introduction_v3.html#logic",
    "title": "R - An Introduction",
    "section": "Logic",
    "text": "Logic\n\nR can also be used for logical operations\n\nit recognizes the standard logical operators\n\n\n\n\n\nCode\n1 &gt; 2\n\n1 &gt; 2 & 1 &gt; 0.5 # The \"&\" stands for \"and\"\n\n1 &gt; 2 | 1 &gt; 0.5 # The \"|\" stands for \"or\" (not a pipe a la the shell)\n\nisTRUE (1 &lt; 2)\n\n\n\nHere are the detailed list of logical operators in R\n\n& and | are used for element-wise logical operations\n&& and || are used for short-circuit logical operations\n\ne.g. 1 &gt; 2 && 1 &gt; 0.5 will return FALSE without evaluating the second condition\n\n! is used for negation (i.e. “not”)\n==, !=, &lt;, &lt;=, &gt;, and &gt;= are used for comparison\n\nHere is further information about logical vectors in R\n\nLogical vectors are vectors that contain only TRUE, FALSE, or NA values\nLogical vectors are often used for subsetting data frames or matrices"
  },
  {
    "objectID": "R_introduction_v3.html#logic-1",
    "href": "R_introduction_v3.html#logic-1",
    "title": "R - An Introduction",
    "section": "Logic",
    "text": "Logic\n\nOrder of precedence\n\nlogic statements follow a strict order of precedence\nlogical operators (&gt;, ==, etc) are evaluated before Boolean operators (& and |)\n\nfailure to recognise this can lead to unexpected behaviour\n\n\n\n\n\n\nCode\n1 &gt; 0.5 & 2\n\n\n\n\n\n\nCode\n1 &gt; 0.5 & 1 &gt; 2\n\n\n\nLesson: explicit about each component of your logic statement(s)\n\n\n\n2 is converted into as.logical(2)\nas.logical(2) is TRUE because it is not zero\n\n\n\nNegation: !\n\nthis will come in very handy when we start filtering data objects\n\n\n\n\n\n\nCode\nis.na(1:10)\n!is.na(1:10)\n\nNegate(is.na)(1:10)"
  },
  {
    "objectID": "R_introduction_v3.html#logical-operators",
    "href": "R_introduction_v3.html#logical-operators",
    "title": "R - An Introduction",
    "section": "logical operators",
    "text": "logical operators\n\nValue matching: %in%\n\nwhether an object is contained within (i.e. matches one of) a list of items, use %in%\n\n\n\n\n\nCode\n4 %in% 1:10\n\n4 %in% 5:10\n\n\n\nThere’s no equivalent “not in” command\n\nbut we can create one\n\n\n\n\n\n\nCode\n`%ni%` = Negate(`%in%`) ## The backticks (`) help to specify functions.\n\n4 %ni% 5:10\n\n\n\nEvaluation\n\nuse two equal signs for logical evaluation\n\n\n\n\n\n\nCode\n1 == 1 ## This does.\n\n1 != 2 ## Note the single equal sign when combined with a negation\n\n\n\n\nEvaluation caveat: Floating-point numbers\nWhat do you think will happen if we evaluate 0.1 + 0.2 == 0.3?\n0.1 + 0.2 == 0.3\nProblem: Computers represent numbers as binary (i.e. base 2) floating-points\n\nMore here.\n\nFast and memory efficient, but can lead to unexpected behaviour.\n\n\nSimilar to the way that standard decimal (i.e. base 10) representation can’t precisely capture certain fractions\n\ne.g. \\(\\frac{1}{3} = 0.3333...\\)\n\nSolution: Use all.equal() for evaluating floats (i.e fractions)\n\nall.equal(0.1 + 0.2, 0.3)"
  },
  {
    "objectID": "R_introduction_v3.html#assignment-operators",
    "href": "R_introduction_v3.html#assignment-operators",
    "title": "R - An Introduction",
    "section": "Assignment operators",
    "text": "Assignment operators\n\nAssignment: &lt;- or =\n\nuse &lt;- for assignment, but = is also acceptable\n&lt;- is the preferred operator in R, but = is more common in other programming languages\n\n\n\n\n\nCode\na &lt;- 10 + 5\na\n\n\n\nnevertheless, we can use = for assignment\n\n\n\n\n\nCode\nb = 10 + 10 \n\nb\n\n\n\n\nan arrow can point in the other direction too (i.e. -&gt;)\nthe following code chunk is equivalent to the previous one, although used much less frequently\n\n\n\nCode\n10 + 5 -&gt; a\n\n\n\nNote that the assigned object must be on the left with “=”"
  },
  {
    "objectID": "R_introduction_v3.html#help",
    "href": "R_introduction_v3.html#help",
    "title": "R - An Introduction",
    "section": "Help",
    "text": "Help\n\nUse help or ? to get help on a function\n\ne.g. ?mean will give you the documentation for the mean() function\n\nFor more information on a (named) function or object in R, consult the “help” documentation. For example:\n\n\n\n\nCode\nhelp(plot)\n\n?plot \n\n\n\nComments in R are demarcated by #.\nHit Ctrl+Shift+c in RStudio to (un)comment whole sections of highlighted code\nVignettes\n\nfor many packages, you can also try the vignette() function, which will provide an introduction to a package and it’s purpose through a series of helpful examples\n\ne.g. vignette(\"ggplot2\") will give you a detailed introduction to the ggplot2 package\n\n\n\n\n\nsee the Examples section at the bottom of the help file?\n\nYou can run them with the example() function\nTry it: example(plot)"
  },
  {
    "objectID": "R_introduction_v3.html#object-oriented-programming-oop-in-r",
    "href": "R_introduction_v3.html#object-oriented-programming-oop-in-r",
    "title": "R - An Introduction",
    "section": "Object-oriented programming (OOP) in R",
    "text": "Object-oriented programming (OOP) in R\n\nR is an object-oriented programming language\n\neverything in R is an object\nobjects can be manipulated and transformed using functions\nfunctions are also objects in R\n\nR has three main object classes\n\nvectors\nlists\ndata frames\n\nR also has other object classes, such as matrices, arrays, and factors\nEach object class has its own set of rules (“methods”) for determining valid operations\n\ne.g. you can perform many of the same operations on matrices and data frames\nBut there are some operations that only work on a matrix, and vice versa\nAt the same time, you can (usually) convert an object from one type to another\n\n\n\n\n\nCode\n## Create a small data frame called \"d\".\n\nd = data.frame(x = 1:2, y = 3:4) \n\nd\n\n\n\n\n\n\nCode\n## Convert it to (i.e. create) a matrix call \"m\".\n\nm = as.matrix(d)\n\nm\n\n\n\n\nR can store information as an object with a name of our choice\n\nOnce we have created an object, we just refer to it by name\nwe are using objects as “shortcuts” to some piece of information or data\n\nthere are many different types (or classes) of objects\narithmetic operations like addition and subtraction cannot be used for character strings\nMost obviously, there are actually multiple OOP frameworks in R\n\nS3, S4, R6…\nHadley Wickham’s “Advanced R” provides a very thorough overview of the main ones\n\nBut for our purposes, it is much more helpful to think about\n\nthe shared characteristics of these different systems and\nthe broad implications of OOP in R.\n\n\nWhat we lose in detail, we hopefully gain in perspective\nBut do read Hadley’s book if you get the chance + It’s incredibly helpful (as are all his books)"
  },
  {
    "objectID": "R_introduction_v3.html#object-class-type-and-structure",
    "href": "R_introduction_v3.html#object-class-type-and-structure",
    "title": "R - An Introduction",
    "section": "Object class, type, and structure",
    "text": "Object class, type, and structure\n\nUse the class, typeof, and str commands if you want understand more about a particular object\n\n\n\n\nCode\nd = data.frame(x = 1:2, y = 3:4) \n\nclass(d) ## Evaluate its class\n\ntypeof(d) ## Evaluate its type\n\nstr(d) ## Show its structure\n\n\n\nwe can inspect/print an object directly in the console\n\ne.g. Type d\n\nThe View() function is also very helpful\n\nthis is the same as clicking on the object in the RStudio Environment pane\ne.g. View(d)\n\n\n\n\nPS — Confused by the fact that typeof(d) returns “list”? See here."
  },
  {
    "objectID": "R_introduction_v3.html#global-environment",
    "href": "R_introduction_v3.html#global-environment",
    "title": "R - An Introduction",
    "section": "Global environment",
    "text": "Global environment\n\nThe global environment is where all objects are stored\n\nyou can see the global environment in the RStudio Environment pane\nyou can also see the global environment by typing ls() in the console\n\nWorking with multiple objects\n\nyou can create multiple objects in the global environment\nyou can manipulate and transform these objects using functions\nyou can also use the rm() function to remove objects from the global environment\n\nR’s ability to keep multiple objects in memory at the same time is a huge plus when it comes to effective data work\n\ne.g. We can copy an existing data frame, or create new one entirely from scratch - either will exist happily with our existing objects in the global environment\n\n\n\n\n\nCode\nd2 = data.frame(x = rnorm(10), y = runif(10))"
  },
  {
    "objectID": "R_introduction_v3.html#everything-has-a-name",
    "href": "R_introduction_v3.html#everything-has-a-name",
    "title": "R - An Introduction",
    "section": "Everything has a name",
    "text": "Everything has a name\n\nEvery object in R has a name\n\nyou can use the name to refer to the object in the global environment\nobject names are case sensitive\n\nThe name of our object must follow certain restrictions\n\nit cannot begin with a number\nit should not contain spaces\nspecial characters such as % and $ should not be used\n\nReserved words\n\nwe can assign objects to different names\nHowever, there are a number of special words that are “reserved” in R\n\nThese are are fundamental commands, operators and relations in base R that you cannot (re)assign, even if you wanted to\nSee here for a full list\n\n\n\n\n\n\nyou can also use the name to refer to the object in a function\nfunction itself is an object\n\ne.g. mean is a function that calculates the mean of a vector\nwe can assign it to a new name, e.g. average = mean\nbut we cannot assign it to a reserved word, e.g. if = mean\nthis will lead to an error"
  },
  {
    "objectID": "R_introduction_v3.html#everything-has-a-name-1",
    "href": "R_introduction_v3.html#everything-has-a-name-1",
    "title": "R - An Introduction",
    "section": "Everything has a name",
    "text": "Everything has a name\n\nSemi-reserved words\n\nthere is a class of words and strings that are called “semi-reserved”\n\n\n\n\n\nCode\nmy_vector = c(1, 2, 5)\nmy_vector\n\n\n\nwhat happens if you type the following?\n\n\n\n\n\nCode\nc = 4\nc(1, 2 ,5)\n\n\n\nR is “smart” enough to distinguish between the variable c = 4 that we created and the built-in function c() that calls for concatenation\nHowever, R won’t always be able to distinguish between conflicting definitions\n\n\n\n\n\nCode\npi\npi = 2\npi\n\n\n\nBottom line: Don’t use (semi-)reserved characters!\n\n\n\nthese are named functions or constants (e.g. pi) that you can re-assign if you really wanted to… but already come with important meanings from base R\nThe c() function is a good example of a semi-reserved character\nArguably the most important semi-reserved character is c(), which we use for concatenation\n\ni.e. creating vectors and binding different objects together"
  },
  {
    "objectID": "R_introduction_v3.html#namespace-conflicts",
    "href": "R_introduction_v3.html#namespace-conflicts",
    "title": "R - An Introduction",
    "section": "Namespace conflicts",
    "text": "Namespace conflicts\n\nR has a large number of packages, each with its own set of functions\n\nsometimes, different packages have functions with the same name\nthis can lead to “namespace conflicts” where R doesn’t know which function to use\n\ne.g. Look what happens we load the dplyr package\n\n\n\n\nCode\nlibrary(dplyr)\n\n\n\nThe messages that you see about some object being masked from ‘package:X’ are warning you about a namespace conflict\n\ne.g. Both dplyr and the stats package have functions named “filter” and “lag”\n\nWhenever a namespace conflict arises, the most recently loaded package will gain preference\n\nso the filter() function now refers specifically to the dplyr variant\nwhat if we want the stats variant?\n\n\n\n\nThe potential for namespace conflicts is a result of the OOP approach\n\nAlso reflects the fundamental open-source nature of R and the use of external packages\nPeople are free to call their functions whatever they want, so some overlap is only to be expected\n\nTemporarily use stats::filter()\n\nPermanently assign filter = stats::filter"
  },
  {
    "objectID": "R_introduction_v3.html#namespace-conflicts-1",
    "href": "R_introduction_v3.html#namespace-conflicts-1",
    "title": "R - An Introduction",
    "section": "Namespace conflicts",
    "text": "Namespace conflicts\nTwo common ways to resolve namespace conflicts in R:\n\nUse package::function()\n\n\nWe can explicitly call a conflicted function from a particular package using the package::function() syntax\n\n\n\n\nCode\nstats::filter(1:10, rep(1, 2))\n\n\n\n\n\n\nCode\ndplyr::starwars ## Print the starwars data frame from the dplyr package\n\nscales::comma(c(1000, 1000000)) ## Use the comma function, which comes from the scales package\n\n\n\nAssign function = package::function\n\n\nA more permanent solution is to assign a conflicted function name to a particular package\nThis will hold for the remainder of your current R session, or until you change it back\n\n\n\n\n\nCode\nfilter = stats::filter ## Note the lack of parentheses\nfilter = dplyr::filter ## Change it back again\n\n\n\n\n\nWe can also use :: for more than just conflicted cases\ne.g. Being explicit about where a function (or dataset) comes from can help add clarity to our code\ne.g. dplyr::filter(iris, Species==\"virginica\") is clearer than just filter(iris, Species==\"virginica\")\n\nAnother good rule of thumb is that you want to load your most important packages last\n\ne.g. Load the tidyverse after you’ve already loaded any other packages\n\nUser-side namespace conflicts\n\nA final thing to say about namespace conflicts is that they don’t only arise from loading packages\nThey can arise when users create their own functions with a conflicting name\n\ne.g. If I was naive enough to create a new function called c()"
  },
  {
    "objectID": "R_introduction_v3.html#indexing",
    "href": "R_introduction_v3.html#indexing",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nIndexing is a way to access specific elements of an object\n\ne.g. we can access specific elements of a vector, list, or data frame using indexing\n\nThere are two main ways to index objects in R\n\nOption 1: []\n\nThis is the most common way to index objects in R\nIt works for vectors, matrices, data frames, and lists\nIt can be used to access specific elements of an object, or to subset an object\n\nOption 2: $\n\nThis is a special operator that is used to access specific elements of a list or data frame by name\nIt is often used to access columns of a data frame by name\n\n\n\n\n\nIndexing is done using square brackets []\nIndexing can be done using either numeric or logical vectors\n\nNumeric indexing refers to the position of the element in the object\nLogical indexing refers to a logical vector that indicates which elements to keep\n\nIndexing can also be done using names\n\ne.g. we can access specific elements of a data frame using the column names"
  },
  {
    "objectID": "R_introduction_v3.html#indexing-1",
    "href": "R_introduction_v3.html#indexing-1",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nuse [] to index objects that we create in R\n\n\n\n\nCode\na = 1:10\na[4] ## Get the 4th element of object \"a\"\na[c(4, 6)] ## Get the 4th and 6th elements\n\n\n\nIt also works on larger arrays (vectors, matrices, data frames, and lists)\n\n\n\n\n\nCode\nlibrary(dplyr)\nstarwars[1, 1] ## Show the cell corresponding to the 1st row & 1st column of the data frame\n\n\n\nWhat does starwars[1:3, 1] give you?\nWhat does starwars[-1, 1] give you?\nwhat if we want to get the 1st column of the data frame?\n\n\n\n\n\nCode\nstarwars[, 1] ## Get the 1st column of the starwars data frame\n\n\n\nwe can use $ to access the columns of a data frame by name\n\n\n\n\n\nCode\nstarwars$name ## Get the \"name\" column of the starwars data frame\n\n\n\n\nWhat if you want to get the names of the columns in a data frame? . . .\n\n\n[1] Indexing in R begins at 1. Not 0 like some languages (e.g. Python and JavaScript)"
  },
  {
    "objectID": "R_introduction_v3.html#indexing-2",
    "href": "R_introduction_v3.html#indexing-2",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nlists are a more complex type of array object in R\n\nthey can contain a random assortment of objects that don’t share the same class\n\ne.g. a list can contain a vector, a data frame, and a matrix\nor even lists of lists\n\nlists are very flexible and can be used to store any type of object\n\nThe relevance to indexing is that lists require two square brackets [[]] to index the parent list item and then the standard [] within that parent item\nThis is different from the single square brackets that we use to index vectors, matrices, and data frames\n\nThe double square brackets are used to extract the object itself, rather than a subset of the list"
  },
  {
    "objectID": "R_introduction_v3.html#indexing-3",
    "href": "R_introduction_v3.html#indexing-3",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nLet’s look at an example of a list to see how it works in practice\n\nWe’ll use the my_list object, which contains three objects: a character string, a numeric vector, and a data frame\n\nAs before, we have two options for indexing lists\nOption 1: [[ ]]\n\nuse double square brackets to index a list\nthis will return the object itself, rather than a subset of the list\ne.g. my_list[[1]] will return the first object in the list\nwe can also use my_list[[2]][3] to return the third element of the second object\n\n\n\n\n\nCode\nmy_list = list(a = \"hello\", b = c(1,2,3), c = data.frame(x = 1:5, y = 6:10))\n\nmy_list[[1]] \n\nmy_list[[2]][3]"
  },
  {
    "objectID": "R_introduction_v3.html#indexing-4",
    "href": "R_introduction_v3.html#indexing-4",
    "title": "R - An Introduction",
    "section": "Indexing",
    "text": "Indexing\n\nOption 2: $\n\nlists provide a nice segue to our other indexing operator: $\nLet’s continue with the my_list example\n\n\n\n\n\nCode\nmy_list\n\nmy_list$a\n\nmy_list$c$x\n\n\n\nThe $ form of indexing also works (and in the manner that you probably expect) for other object types in R\n\nIn some cases, you can also combine the two index options\n\n\n\n\n\n\nCode\nmy_list$b[3]\n\nstarwars$name[1]\n\n\n\n\nnote some key differences between the output from this example and that of our previous starwars[1, 1] example\n\nWhat are they?\nHint: Apart from the visual cues, try wrapping each command in str()\n\nThe last thing that I want to say about $ is that it provides another way to avoid the “object not found” problem that we ran into with our earlier regression example\n\ne.g. lm(y ~ x) will not work, but lm(d$y ~ d$x) will work\n\n\n. . .\n\n\nCode\nd = data.frame(x = 1:10, y = 11:20)\n\nlm(y ~ x) \n\nlm(d$y ~ d$x)"
  },
  {
    "objectID": "R_introduction_v3.html#cleaning-up",
    "href": "R_introduction_v3.html#cleaning-up",
    "title": "R - An Introduction",
    "section": "cleaning up",
    "text": "cleaning up\n\nUse rm() to remove objects from the global environment\n\ne.g. rm(a) will remove the object a from the global environment\n\n\n\n\n\nCode\na = \"hello\"\nb = \"world\"\nrm(a, b)\n\n\n\nuse rm(list = ls()) to remove all objects in your working environment (except packages)\n\nBetter just to start a new R session\n\n\n\n\nbut this is frowned upon\n\n\n\nDetaching packages is more complicated\n\nthere could be many cross-dependencies (i.e. one package depends on, and might even automatically load, another package)\ne.g. detach(package:dplyr)\n\nstill, better just to restart your R session"
  },
  {
    "objectID": "R_introduction_v3.html#removing-plots",
    "href": "R_introduction_v3.html#removing-plots",
    "title": "R - An Introduction",
    "section": "Removing plots",
    "text": "Removing plots\n\nUse dev.off() to remove the current plot\n\ne.g. dev.off() will remove the current plot from the plotting window\n\nUse graphics.off() to remove all plots\n\n\n\n\nCode\nplot(1:10)\ndev.off()\n\n\n\nRStudio has convenient buttons for clearing your workspace environment and removing (individual) plots"
  },
  {
    "objectID": "R_introduction_v3.html#data-files-loading-and-saving",
    "href": "R_introduction_v3.html#data-files-loading-and-saving",
    "title": "R - An Introduction",
    "section": "Data files: Loading and saving",
    "text": "Data files: Loading and saving\n\nR can read and write data files in various formats\n\ne.g. CSV, Excel, SPSS, Stata, etc.\nwe will focus on CSV files for now\n\nworking directory\n\nR will look for files in the current working directory\nyou can check the current working directory using getwd()\nyou can change the working directory using setwd()\ne.g. setwd(\"path/to/your/directory\")"
  },
  {
    "objectID": "R_introduction_v3.html#data-files-loading-and-saving-1",
    "href": "R_introduction_v3.html#data-files-loading-and-saving-1",
    "title": "R - An Introduction",
    "section": "Data files: Loading and saving",
    "text": "Data files: Loading and saving\n\ngo to here to download a sample dataset\nuse read.csv() to read a CSV file into R\n\ne.g. unpop &lt;- read.csv(\"UNpop.csv\")\nthis will read the CSV file and create a data frame called unpop\n\n\n\n\n\nCode\nunpop &lt;- read.csv(\"Downloads/UNpop.csv\")\n\n\n\n\n\n\nCode\nclass(unpop)\n\n\n\nRData can be used to save and load R objects\n\ne.g. save(unpop, file = \"unpop.RData\") will save the unpop data frame as an RData file\nyou can load the RData file using load(\"unpop.RData\")\n\nRData files are useful for saving and loading multiple objects at once\n\n\n\n\n\nCode\nsave(unpop, file = \"unpop.RData\")\n\n\n\n\na data frame is a special type of list where each element is a vector of the same length\n\ndata frames are used to store tabular data, where each column represents a variable and each row represents an observation\n\nR will save the entire workspace as .RData in the working directory without an explicit file name and automatically load it next time we launch\n\nThis is not recommended practice because the .RData file is invisible to users of many operating systems and R will not tell us what objects are loaded unless we explicitly issue the ls() function"
  },
  {
    "objectID": "R_introduction_v3.html#data-files-loading-and-saving-2",
    "href": "R_introduction_v3.html#data-files-loading-and-saving-2",
    "title": "R - An Introduction",
    "section": "Data files: Loading and saving",
    "text": "Data files: Loading and saving\n\nuseful functions for exploring data frames\n\nnames() to view the names of the columns in a data frame\nnrow() to view the number of rows in a data frame\nncol() to view the number of columns in a data frame\ndim() to view the dimensions of a data frame (number of rows and columns)\nstr() to view the structure of a data frame\nhead() to view the first few rows of a data frame\ntail() to view the last few rows of a data frame\n\nuse write.csv() to write a data frame to a CSV file\n\ne.g. write.csv(unpop, \"UNpop.csv\")\nthis will write the unpop data frame to a CSV file called UNpop.csv"
  },
  {
    "objectID": "R_introduction_v3.html#data-files-loading-and-saving-3",
    "href": "R_introduction_v3.html#data-files-loading-and-saving-3",
    "title": "R - An Introduction",
    "section": "Data files: Loading and saving",
    "text": "Data files: Loading and saving\n\nload data in other formats\nR can read and write data files in various formats, including SPSS, Stata, and Excel\nforeign package can read and write data files in SPSS, Stata, and other formats\n\nit is part of the base R installation and is widely used for reading and writing data files\n\nhaven package is designed to be fast and efficient\n\nit can read and write data files in SPSS, Stata, and SAS formats\nit is part of the tidyverse and is designed to be fast and efficient\n\nreadr package can read and write data files in CSV, TSV, and other text formats\n\nit is part of the tidyverse and is designed to be fast and efficient\n\nreadxl package can read and write Excel files\nwritexl package can write data frames to Excel files\n\n\n\n\nCode\n#install.packages(\"haven\")\n\nlibrary(\"haven\")\n\n\n\n\n\n\nCode\n# Read Stata file\nurl_stata&lt;-\"https://github.com/kwan-MSDA/MSDA-Bootcamp/blob/main/dataset/UNpop.dta?raw=true\"\nunpop_stata&lt;- read_dta(url_stata)"
  },
  {
    "objectID": "R_introduction_v3.html#references",
    "href": "R_introduction_v3.html#references",
    "title": "R - An Introduction",
    "section": "References",
    "text": "References\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social Science : An Introduction in Tidyverse. Princeton, New Jersey: Princeton University Press.\n\n\nWickham, Hadley. 2016. Ggplot2 : Elegrant Graphics for Data Analysis. Second edition. Use r! Switzerland: Springer.\n\n\n———. 2019. Advanced r. Second edition. The r Series. Boca Raton, FL: CRC Press.\n\n\nWickham, Hadley, and Garrett Grolemund. 2023. R for Data Science : Import, Tidy, Transform, Visualize, and Model Data. Second edition. Beijing: O’Reilly."
  }
]